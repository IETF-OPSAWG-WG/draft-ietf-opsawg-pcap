{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-02-29T01:06:03.367173+00:00",
  "repo": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "fc2929"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "159818"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 4,
      "id": "MDU6SXNzdWUxMDE2ODY5OTU=",
      "title": "Auto-Generate ",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/4",
      "state": "OPEN",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Using https://github.com/martinthomson/i-d-template for example ?\n",
      "createdAt": "2015-08-18T15:46:57Z",
      "updatedAt": "2019-02-06T01:40:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That looks like a lot of work. :cry:\n\nWe could just add a README.md with simple instructions for how to do it.\n\nFor example, if you have curl then this does it:\n\n```\ncurl --data \"url=https%3A%2F%2Fraw.githubusercontent.com%2Fpcapng%2Fpcapng%2Fmaster%2Fdraft-tuexen-opsawg-pcapng.xml&mode=html&format=ascii&type=ascii&Submit=Submit\" http://xml2rfc.ietf.org/cgi-bin/xml2rfc.cgi > tmp.html; open tmp.html\n```\n\nAnd if you don't have curl, then going to http://xml2rfc.ietf.org and entering \"https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml\" in the URL box and clicking \"submit\" will do it too.\n",
          "createdAt": "2015-08-21T02:47:42Z",
          "updatedAt": "2015-08-21T02:47:42Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "If this would mean that the specification is published, as HTML, as part of the repository, so that we can just point people to a URL in the repository to read the specification, that would be a Good Thing, as it'd save us the effort of setting up a separate website for the spec - especially if the HTML version is automatically re-generated when the XML is updated.\n",
          "createdAt": "2015-08-21T04:31:40Z",
          "updatedAt": "2015-08-21T04:31:40Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No,\nI have start to try and it is easy with Travis CI\n",
          "createdAt": "2015-08-21T05:28:44Z",
          "updatedAt": "2015-08-21T05:28:44Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed by pull #25 .\n",
          "createdAt": "2015-08-24T22:33:01Z",
          "updatedAt": "2015-08-24T22:33:01Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reopen, i have will push soon a patch to auto generate via Travis and use gh-pages\n",
          "createdAt": "2015-08-25T07:28:30Z",
          "updatedAt": "2015-08-25T07:28:30Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have push ( 21b83f86c2dedbfe2b6d0da3a7d047cd98c39b6e ) to add stuff to auto generate (and also help to generate for try (only need to use make) \n\nthe generate draft is available http://pcapng.github.io/pcapng/\n\nbut need enable travis for pcapng repo\n",
          "createdAt": "2015-08-26T06:20:14Z",
          "updatedAt": "2015-08-26T06:20:14Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Currently, the top-level `README.md` has links such as http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii that hand the raw XML file to xml2rfc.tools.ietf.org to generate HTML, plain text, or a PDF, so auto-generation is done \"on demand\" if you click on the link.\r\n\r\nIs that sufficient to close this issue?",
          "createdAt": "2019-02-06T01:40:21Z",
          "updatedAt": "2019-02-06T01:40:21Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWUxMDI1NDQzMTc=",
      "title": "Can there be multiple \"hardware\" option strings for an SHB?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/11",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to decide if there can/can't be multiple shb_hardware options in a given SHB.\n\nIf there _can_, then does the ordering matter - for example, if a PCAP-NG file merger merges multiple SHBs into one, and adds the merging machine's hardware info, does it prepend or append to the list?\n",
      "createdAt": "2015-08-22T15:16:22Z",
      "updatedAt": "2015-08-23T00:01:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This one isn't as important as multiple comments or user applications, but if we allow multiple options for those two it would be consistent to allow it for this one as well. It doesn't really hurt, and there may be a use case for it.\n\nOrdering matters I guess if someone wants to track the time line of adding options. Again, I'd vote for appending newer options.\n",
          "createdAt": "2015-08-23T00:01:29Z",
          "updatedAt": "2015-08-23T00:01:29Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWUxMDI1NDQzNjA=",
      "title": "Can there be multiple \"os\" option strings for an SHB?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/12",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to decide if there can/can't be multiple shb_os options in a given SHB.\n\nIf there _can_, then does the ordering matter - for example, if a PCAP-NG file merger merges multiple SHBs into one, and adds the merging machine's operating system info, does it prepend or append to the list?\n",
      "createdAt": "2015-08-22T15:17:05Z",
      "updatedAt": "2015-08-23T00:00:31Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This one isn't as important as multiple comments or user applications, but if we allow multiple options for those two it would be consistent to allow it for this one as well. It doesn't really hurt, and there may be a use case for it.\n",
          "createdAt": "2015-08-23T00:00:31Z",
          "updatedAt": "2015-08-23T00:00:31Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWUxMDI1NDQzODg=",
      "title": "Can there be multiple \"user application\" option strings for an SHB?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/13",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to decide if there can/can't be multiple shb_userappl options in a given SHB.\n\nIf there _can_, then does the ordering matter - for example, if a PCAP-NG file merger merges multiple SHBs into one, and adds the merging machine's application info, does it prepend or append to the list?\n",
      "createdAt": "2015-08-22T15:17:43Z",
      "updatedAt": "2015-08-22T23:56:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Saturday, August 22, 2015, 5:17:43 PM, hadrielk wrote:\n\n> Need to decide if there can/can't be multiple shb_userappl options in a given SHB.\n> If there can, then does the ordering matter - for example, if a\n> PCAP-NG file merger merges multiple SHBs into one, and adds the\n> merging machine's application info, does it prepend or append to the list?\n\nI'd vote for having multiple user applications. My use case is this:\nif I process a pcapng file with TraceWrangler, I want to keep the\ninformation that dumpcap did the capture, but also add that it was\nprocessed afterwards. I could add a CR/LF to the existing option and\nadd my text, but it's cleaner to have separate entries in my opinion.\n\nOrder matters, and I'd go for append (meaning, latest entries are read\nlast when reading options sequentially), because then you can follow\nthe processing chain if you want.\n",
          "createdAt": "2015-08-22T23:56:28Z",
          "updatedAt": "2015-08-22T23:56:28Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWUxMDI1NDQ0NDk=",
      "title": "What is the ordering for comment option strings?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/14",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is the first comment option the oldest or newest?\nI.e., if a new comment is added to a block by a PCAP-NG merging or manipulating application, does it get appended or prepended?\n",
      "createdAt": "2015-08-22T15:19:31Z",
      "updatedAt": "2019-02-06T01:48:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My first reaction was to append most-recent, meaning that the oldest\ncomment comes first when reading options sequentially.\n\nIt's probably a question of personal preference, but we should define\nit (and require programs that read a file and writes it back to disk\nto keep that order intact). Wording needs to be precise to avoid\nconfusion, because order may be important in some cases.\n",
          "createdAt": "2015-08-22T23:58:34Z",
          "updatedAt": "2015-08-22T23:58:34Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So would it suffice to add something such as\r\n\r\n> If a new opt_comment option is added to a block, it SHOULD be added after all existing opt_comment options, so that the order of the opt_comment options in the block reflects the order in which they were added to the block.\r\n\r\nOr do we want to strengthen that to \"...MUST be added...\"?\r\n\r\n(And is there any reason to define a opt_time_stamped_comment option?  We'd have to define the time stamp resolution, as there's no guarantee that a comment could be associated with an interface, so as to use the interface's time stamp resolution.)",
          "createdAt": "2019-02-06T01:48:22Z",
          "updatedAt": "2019-02-06T01:48:22Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWUxMDI1NDk3NTM=",
      "title": "Need to decide on the official name for this file format, and stick to it.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/15",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document generally uses the word \"pcapng\" to describe the file format, but uses \"pcap-ng\" in the introduction.\nIt would be nice to stick to one name, at least within the document. I just don't know what the official name is. :smirk: \n\n(as an aside, some web sites use \"PCAP-NG\" (all caps), or \"PcapNg\" or other variations)\n",
      "createdAt": "2015-08-22T16:38:39Z",
      "updatedAt": "2015-08-26T22:58:10Z",
      "closedAt": "2015-08-26T22:58:10Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure that all members of the pcap-ng mailing list have subscribed to this repository, so at least some issues might be better sent to the list in addition to, or rather than, being filed as issues.\n",
          "createdAt": "2015-08-22T21:50:02Z",
          "updatedAt": "2015-08-22T21:50:02Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The term is now 'pcapng' throughout the file, so closing this issue.\n",
          "createdAt": "2015-08-26T22:58:10Z",
          "updatedAt": "2015-08-26T22:58:10Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWUxMDI1NTg0OTc=",
      "title": "Need to figure out what to do with Experimental Blocks",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/17",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If we're going to publish this - either through the IETF, or even independently create a \"version 1.0\" - the Experimental Blocks have to go. Their formats and semantics are incomplete, they don't have reserved codes, etc. They just take up space, and add confusion.\n\nFor each Experimental Block, we need to decide to either:\n1. Complete it and make it no longer experimental, or...\n2. Remove it from the file and add it to this github repo's wiki pages in a \"Future Work\" section or some such.\n",
      "createdAt": "2015-08-22T18:46:17Z",
      "updatedAt": "2015-08-23T00:02:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I fully agree; I had proposed to do that last year during Sharkfest if I\nremember correctly; in the current state they are more like idea\ndrafts, not really specs. AFAIK nobody has even tried to implement any\nof this as they're to unspecific.\n\nWe can maybe think about completing\n- Compression Block\n  - need to define compression algorithms and compression type byte\n  - Maybe there is an interest for this as it can reduce file size\n    without having to gz the whole pcapng file\n  - Wireshark/libpcap would have to support it to have any chance of being\n    used\n- Crypto Block\n  - need to define encryption algorithms and encryption type byte id\n  - Maybe there is an interest for this, e.g. for secure lawful interception\n    file storage\n  - would also need some sort of hashing to prevent modification of the crypted data\n  - Wireshark/libpcap would have to support it to have any chance of being\n    used\n\notherwise, push those two to \"Future Work\" and get 1.0 done with the\nblock types we already have (and know to be working).\n\nI'd vote to remove/\"Future work\":\n- Fixed Length Block\n  - I'm not sure who/what may benefit from this; maybe some\n    specialized hardware capture device that has a file system that needs\n    this?\n- Directory Block\n  - needs to be defined; maybe in a later RFC if use case comes up\n- Traffic Statistics and Monitoring Block\n  - needs to be defined; maybe in a later RFC if use case comes up\n- Event/Security Block\n  - needs to be defined; maybe in a later RFC if use case comes up\n\nThat way we'd get a clean specification with block types that we know\nare already implemented and working (if maybe not to the last little\ndetail). We can always add more block types later in another RFC (or\nnewer document version).\n\nJust may 2 cents :-)\n",
          "createdAt": "2015-08-23T00:02:32Z",
          "updatedAt": "2015-08-23T00:02:32Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWUxMDI1NTk0MTI=",
      "title": "More things to do",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/18",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is more of a TODO list (and mostly to myself), than an issue for github:\n- Clean up the naming scheme for fields in terms of the \"shb_userappl\", \"if_MACaddr\", \"ns_dnsIP6addr\" type names. Either use lowerCamelCase, or underscore_name_scheme. Don't have all combinations.\n- We use inconsistent number bases: for block types we use hex numbers, for others we use decimal. Pick one.\n- Add a section for \"Recommendations for Applications\", or some such - for providing guidance on what apps should do when merging, saving only some blocks, anonymizing, etc.\n- If we decide to continue on the IETF path, then add an appendix of a (very small) example file in hex-ascii.\n- If we decide to continue on the IETF path, then write up the Security Considerations section text. (it's mandatory for IETF RFCs)\n- ~~For the XML file itself, the anchor names, spacing between sections/entries, etc., could use a cleanup.~~\n",
      "createdAt": "2015-08-22T19:02:53Z",
      "updatedAt": "2019-02-06T02:08:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- naming scheme: I'm bad with this, using both inconsistently myself, so it's hard for me to decide :-) I'd probably prefer lowerCamelCase as it allows for more Variantions\n- number bases: this probably needs to be HEX then, as the block type for the SHB has a meaning in HEX that is lost when translating to decimal. But I'm open for discussion.\n- Good idea about application recommendations, maybe even twofold: MUST and SHOULD, because some things like ordering of multiple identical options (e.g. comments) need to be consistent as they do not have timestamps or other ordering information. So an application reading a file has no chance of knowing the correct order otherwise.\n- good idea about the example file, let's do that\n- I'll have to check the security considerations section requirements, but we should do that anyway, and especially if it's mandatory.\n",
          "createdAt": "2015-08-23T00:09:02Z",
          "updatedAt": "2015-08-23T00:09:02Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> * number bases: this probably needs to be HEX then, as the block type for the SHB has a meaning in HEX that is lost when translating to decimal. But I'm open for discussion.\r\n\r\nI'd vote for hex.\r\n\r\nAny objections to hex?  If not, I'll update the spec.",
          "createdAt": "2019-02-06T01:55:28Z",
          "updatedAt": "2019-02-06T01:55:28Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> * Clean up the naming scheme for fields in terms of the \"shb_userappl\", \"if_MACaddr\", \"ns_dnsIP6addr\" type names. Either use lowerCamelCase, or underscore_name_scheme. Don't have all combinations.\r\n\r\nif_MACaddr and if_EUIaddr aren't CamelCase, they're \"initialism/acronym case\" - MAC is an initialism (and acronym) for Medi{um,a} Access Control (yes, the IEEE uses both \"Medium\" and \"Media\", sometimes even using both in the same document) and Extended Unique Identifier.\r\n\r\nSimilarly, in ns_dnsIP6addr and the like, \"IP\" is an initialism for Internet Protocol.  The same applies to if_IPv4addr and if_IPv6addr.  For \"IP\", however:\r\n\r\n1.  we also have nrb_record_ipv4 and nrb_record_ipv6, which *don't* capitalize \"ip\";\r\n1. neither ns_dnsIP4addr nor ns_dnsIP6addr have \"v\" between \"IP\" and the number;\r\n\r\nso we don't have a consistent convention for referring to the two main versions of the Internet Protocol.",
          "createdAt": "2019-02-06T02:08:59Z",
          "updatedAt": "2019-02-06T02:08:59Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWUxMDI2NTc5Nzg=",
      "title": "Name Resolution Block is under-specified",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/21",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are some under-specified portions of the NRB:\n- Can there be no/zero Record entries in an NRB, other than the end-of-record? I'm sure the answer is \"yes\", but we should explicitly say so in the doc. (and say it still requires an end-of-record)\n- What about entries for things other than IPv4/IPv6 addresses? Should unknown Record Types be silently ignored, or considered an error? I'm pretty sure the answer is \"silently ignore\", but we should specify that in the doc. (e.g., we might someday want entries for MAC address -> name, TCP or UDP port -> name, etc.)\n- Is a Record Value Length of zero legal, other than in an end-of-record? For the currently defined record types, no it's not legal, but for unknown types it should be legal. Again, need to be specific in the doc.\n- What if the same IP address is used in multiple entries - does it mean the second one updates/replaces the first, or does it just mean the same IP has multiple names?  I think that is probably application-specific behavior, so we should just say it's possible/legal, and has no semantic meaning.(?)\n",
      "createdAt": "2015-08-23T20:35:45Z",
      "updatedAt": "2019-02-06T02:24:52Z",
      "closedAt": "2019-02-06T02:24:52Z",
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- I think there can be a NRB with no/zero records. It would indicate that there was no name resolution record available at the time of writing the file, while a missing NRB would leave a doubt if or if not there would have been records.\n- Agree on \"Silent Ignore\" for unknown Record Types\n- Agree on the Record Value Length\n- Yes, we need to allow 1-1, 1-n, n-1 and n-n relationships of names and IP addresses, so multiple entries need to be possible. A name can have multiple IPs, and an IP can have multiple names. So must be legal to be able to store all possible combinations.\n",
          "createdAt": "2015-08-23T21:10:51Z",
          "updatedAt": "2015-08-23T21:10:51Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Resolved in the pull request.\n",
          "createdAt": "2015-08-23T23:15:21Z",
          "updatedAt": "2015-08-23T23:15:21Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Resolved in the pull request.\r\n\r\nSo presumably this can be closed.",
          "createdAt": "2019-02-06T02:24:52Z",
          "updatedAt": "2019-02-06T02:24:52Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWUxMDI2NzE3MDY=",
      "title": "Need to determine how to assign new Block Types/Option Codes in future",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/23",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now the doc says to contact the authors to assign new block types. That's not really sensible, imo.\n\nI think one reasonable approach is to ask IANA for new registries for them, and pick a policy like \"Designated Expert\" or even \"Specification Required\". Because for experimental or proprietary uses, we have Custom Blocks and Custom Options.\n\nIANA creates registries all the time, and they work reasonably well.\n\nAlso, we need to include NRB Record Types for that model as well. (I don't see any others, but there might be more)\n",
      "createdAt": "2015-08-23T23:31:57Z",
      "updatedAt": "2015-08-23T23:37:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, I agree. The last time someone needed new block types was when Loris asked for sysdig, and there wasn't a clear process. \n",
          "createdAt": "2015-08-23T23:37:39Z",
          "updatedAt": "2015-08-23T23:37:39Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWUxMDI2NzMzNDU=",
      "title": "Need to specify the IDB if_tzone option format",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/24",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the IDB if_tzone option is declared but not specified. (a signed int32 for number of seconds West of UTC?)\n\nI'm not sure why this option is in the IDB instead of the SHB, so that might be something to think about too. (I guess if your system is really, really big, then you could have interfaces in different timezones... ;)\n",
      "createdAt": "2015-08-23T23:51:26Z",
      "updatedAt": "2019-02-06T05:27:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ignore the second remark about it being in SHB instead of IDB - keeping it in IDB will make life easier for mergecap. :)\n",
          "createdAt": "2015-08-24T14:39:04Z",
          "updatedAt": "2015-08-24T14:39:04Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Ignore the second remark about it being in SHB instead of IDB - keeping it in IDB will make life easier for mergecap.\n\nExactly - you might merge two captures, on two different interfaces, done in two different time zones.\n",
          "createdAt": "2015-08-24T16:54:31Z",
          "updatedAt": "2015-08-24T16:54:31Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I would vote to replace it with if_tzid, which is a string containing a \"timezone\" id from [the IANA Time Zone Database](https://www.iana.org/time-zones).  See [the tzdb Theory file](https://www.ietf.org/timezones/theory.html) for more information; I put \"timezone\" in quotes because tzdb regions don't necessarily correspond to time zones.",
          "createdAt": "2019-02-06T05:27:44Z",
          "updatedAt": "2019-02-06T05:27:44Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWUxMDMwMzgyMTk=",
      "title": "Is extraneous padding legal?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/26",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is it legal to use more than 4 bytes of padding?\n\nFor example: if the file has a SPB, with an original packet length of 1000 but an IDB snaplen of 120, and the SPB's Block Length is 144 (=12 bytes Block headers + 4 bytes SPB packet length, leaving 128 bytes of packet data)... is that valid?\n\n~~Another example is option strings - we don't always specify if they're null-terminated or not, and if an app decides to encode the null it may force them to have to add padding they wouldn't have to have without the null; so if a reader app does not expect the null, it will think there are 4 extra (unnecessary) padding bytes.~~  Edit: that doesn't cause a problem, because the option length will include that NULL.\n",
      "createdAt": "2015-08-25T14:45:02Z",
      "updatedAt": "2015-08-26T17:49:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I _think_ the answer to this is no, extra padding bytes are not legal. The reason is you can't distinguish the extra padding bytes from an opt_endofopt option. Well... you could realize the Block Length is longer, and keep looking for a non-zero option code in the remaining bytes I guess... but it would be annoying and likely error prone.\n",
          "createdAt": "2015-08-25T16:13:53Z",
          "updatedAt": "2015-08-25T16:13:53Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWUxMDMwMzg3Mzg=",
      "title": "Are the shb_hardware/os/userappl strings zero-terminated?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/27",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The doc doesn't say, so we need to clear that up. Wireshark does not add a null to them, fwiw.\n",
      "createdAt": "2015-08-25T14:47:39Z",
      "updatedAt": "2019-02-06T03:05:22Z",
      "closedAt": "2019-02-06T03:04:39Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "The only strings described as null-terminated are some in an NRB record, where there are multiple strings and there need to be null terminators as separators; some are explicitly described as not being null-terminated.\r\n\r\nI've updated the spec in a356e3602dfa7067f4ed05bc8b5f4907aa833f53 to explicitly indicate that all strings for which we didn't indicate zero-termination are not zero-terminated.\r\n\r\nI also changed them all to say \"zero-terminated\" rather than \"null-terminated\" or \"with NULL termination\".",
          "createdAt": "2019-02-06T03:04:39Z",
          "updatedAt": "2019-02-06T03:05:22Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWUxMDMxNjMwNTc=",
      "title": "Fix the examples for isb_starttime/isb_endtime",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/28",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "No matter if leap seconds are counted or not, I'm pretty sure the example numbers for isb_starttime/isb_endtime are wrong. Presuming the resolution is microseconds (which, BTW, the draft does not say about those fields), then `'97 c3 04 00 aa 47 ca 64'` gives me `1340954905298858` microseconds since epoch; dividing by 1000000 gives ~1340954905 seconds, which is _not_ `06/29/2012 06:16:50 UTC`. In _unix_ time it's `6/29/2012 07:28:25 UTC`, which even accounting for ~35 leap seconds isn't right. [note: I could easily have screwed up the conversion somewhere though]\n",
      "createdAt": "2015-08-26T03:22:13Z",
      "updatedAt": "2019-02-06T05:11:24Z",
      "closedAt": "2019-02-06T05:11:24Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed, with a bunch of other cleanups, in bf17d7fe42e9c2b4a695bf816cae27be4c9c978a.\r\n\r\nGiven that these are UN\\*X-style times, leap seconds aren't, for better or worse, counted.  Given that some hardware adapters provide Precision Time Protocol time stamps, which use 1970-01-01 00:00:00 TAI as the origin, and *do* count leap seconds, we may want to add information to the IDB to indicate whether the time stamps count leap seconds and what the origin is.  (Note that there is no reason why one *couldn't* have time stamps that start at 1970-01-01 00:00:00 UTC and that count leap seconds, so \"shifting the origin\" and \"counting vs. not-counting leap seconds\" are independent, but *don't* get me started on leap seconds in UN\\*X....)",
          "createdAt": "2019-02-06T05:11:24Z",
          "updatedAt": "2019-02-06T05:11:24Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "MDU6SXNzdWUxMDMxODU3NjM=",
      "title": "Add Implementation section",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/29",
      "state": "OPEN",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "May be add a Implementation section  ( https://tools.ietf.org/html/rfc6982 ) ?\n\nfor start can be add a link to https://github.com/pcapng/pcapng/wiki/Implementations (or copy the table)\n",
      "createdAt": "2015-08-26T06:21:32Z",
      "updatedAt": "2015-08-26T12:32:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes I think just add a URL to the wiki - there are more implementations we can add, and it would be a pain to add them as edits to the draft via pull requests.\n",
          "createdAt": "2015-08-26T12:32:44Z",
          "updatedAt": "2015-08-26T12:32:52Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWUxMDMzMjcxNTI=",
      "title": "Is an empty option/record string valid?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/32",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[from an issue raised inside the doc by me:]\n\nFor example just a zero byte for the nrb_record_ipv4/v6 name string portions; or not even a zero byte for something like opt_comment or if_description.\n\nI would argue they are valid. Certainly pcapng readers should gracefully handle the case, but I think it is even legitimate for pcapng writers to generate it.\n",
      "createdAt": "2015-08-26T17:38:16Z",
      "updatedAt": "2019-02-06T04:36:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed-length options whose length isn't the length specified in the spec are invalid.\r\n\r\nFor variable-length options, we should specify a minimum length, which could be zero, but which might be non-zero for some non-string option types, such as if_filter, where the minimum length is 1, not 0, as the filter type must be included.  Options less than the minimum length are invalid.\r\n\r\nWe should, however, indicate how a zero-length string or a minimum-length option should be interpreted.\r\n\r\nFor example, if shb_os isn't present, the file doesn't say what OS the machine was running, but if it's zero-length, whatever program wrote the file chose, for better or worse, to say the OS is \"\" - content-free, but specified.\r\n\r\nFor strings in NRB nrb_record_ipv4 or nrb_record_ipv6 records, we could either declare empty strings as invalid or as not to be included as a name for the address (so that, for example if you have only an empty string, you have no translation for the name, and if you have a non-empty string and an empty string, the only translation is the non-empty string).\r\n\r\nThose could, perhaps, be used to indicate that the information was censored (unless \"this information was present at one point, but it's been censored\" would constitute a covert channel or some other way in which information that shouldn't be available is leaked).\r\n\r\nI'll update the spec to include minimum lengths for variable-length options, and specify that a fixed-length option with a length not equal to the specified length, or a variable-length option with a length less than the minimum length, is invalid.",
          "createdAt": "2019-02-06T04:08:49Z",
          "updatedAt": "2019-02-06T04:08:49Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I've made that update.",
          "createdAt": "2019-02-06T04:36:33Z",
          "updatedAt": "2019-02-06T04:36:33Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWUxMDM4NTU5NjU=",
      "title": "Is it legal for an EPB capture length value to be different than snaplen/origlen?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/35",
      "state": "OPEN",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the draft says this for EPB's (and the deprecated Packet Block) Capture Length field:\n\n```\nCaptured Packet Length: number of bytes captured from the packet (i.e. the length of the Packet Data\nfield). It will be the minimum value among the Original Packet Length and the snapshot length for the\ninterface (SnapLen, defined in Figure 10).\n```\n\nSo does this mean it MUST be `MIN(SnapLen, Original Packet Length)`, and cannot be more or less than it? (unless SnapLen is 0 obviously)\n\nI ask because Wireshark currently just uses the Capture Length value, ignoring the SnapLen and Original Packet Length. I had thought this was just a bug in Wireshark, but I'm not sure it is. One could argue that the IDB's SnapLen should only apply to the capture length of Simple Packet Blocks.\n",
      "createdAt": "2015-08-29T14:50:08Z",
      "updatedAt": "2019-02-06T03:47:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, Packet Capture Length can be less than SnapLen, so I think we have to change this. SnapLen is just one value for all packets, but we may see packets with different \"captured packet length\" values. \n\nOne example is that when cutting packets after the TCP header the actual remaining capture packet length depends on the length of the IP and TCP headers (which may vary for multiple packets, depending on what options were present). So Wireshark is doing it right in my point of view.\n\nIDBs SnapLen seems only relevant for SPBs, as you mentioned.\n",
          "createdAt": "2015-08-29T15:29:21Z",
          "updatedAt": "2015-08-29T15:29:21Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I.e., SnapLen is only \"normative\" for SPBs; it's just \"informative\" if you don't have any SPBs, as in \"just thought you might like to know that this was the slicing length specified when the capture was done\"?\n",
          "createdAt": "2015-08-29T18:35:53Z",
          "updatedAt": "2015-08-29T18:35:53Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, SPBs need the SnapLen info. EPB may have a smaller packet capture length.\n",
          "createdAt": "2015-08-29T19:27:55Z",
          "updatedAt": "2015-08-29T19:27:55Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A file could contain both EPBs and SPBs, and according to the spec this may\nhappen because: \"for example, a capture tool could switch from Enhanced\nPacket Blocks to Simple Packet Blocks when the hardware resources become\ncritical.\"\n\nOf course I seriously doubt anyone would ever do that, but let's pretend\nit's true - so you'd put the SnapLen in the IDB \"just in case\" you start\nwriting SPBs later in that file.\n\nIn hindsight, I think the SPB should probably never have been defined. We\ncould have just reserved max value for the timestamp field to mean \"unknown\ntime\". Saving 16 bytes in exchange for the extra complexity/confusion of\nhaving an SPB seems silly.\n\nOn Sat, Aug 29, 2015 at 2:35 PM, Guy Harris notifications@github.com\nwrote:\n\n> I.e., SnapLen is only \"normative\" for SPBs; it's just \"informative\" if you\n> don't have any SPBs, as in \"just thought you might like to know that this\n> was the slicing length specified when the capture was done\"?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pcapng/pcapng/issues/35#issuecomment-136022171.\n",
          "createdAt": "2015-08-29T19:36:19Z",
          "updatedAt": "2015-08-29T19:36:19Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What if the EPB's Capture Length field is _bigger_ than SnapLen?\n\nOn Sat, Aug 29, 2015 at 3:27 PM, Jasper Bongertz notifications@github.com\nwrote:\n\n> Yes, SPBs need the SnapLen info. EPB may have a smaller packet capture\n> length.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pcapng/pcapng/issues/35#issuecomment-136027902.\n",
          "createdAt": "2015-08-29T19:37:15Z",
          "updatedAt": "2015-08-29T19:37:15Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was thinking about a bigger Capture Length than SnapLen and I think it's unlikely but not impossible. Some packets may be edited at a later time (e.g. sanitizing them, or preparing a replay) where the packet ends up with more bytes than were captured. In that case Capture Length could exceed SnapLen.\n",
          "createdAt": "2015-08-29T19:43:23Z",
          "updatedAt": "2015-08-29T19:43:23Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "One possibility might be to describe SnapLen as a limit specified as part of the capture process, and indicate that packets in an EPB (or PB) might have a capture length greater than the SnapLen if the packet content has been edited.  *However*, we must then indicate that packets in an SPB MUST not be edited in any fashion that changes their length.",
          "createdAt": "2019-02-06T03:47:57Z",
          "updatedAt": "2019-02-06T03:47:57Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "MDU6SXNzdWUxOTA5NzQ1NDY=",
      "title": "Comments on 3.1. General Block Structure - endian and padding",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/41",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**3.1. General Block Structure**\r\n- The idea of having the \"Block Total Length\" both before the block body and after is a nice idea since it allows for fast forward and backward navigation in a pcapng file. However, backward navigation does not work very well if we allow switching between big and little endian in the same pcapng file (see comments for #42 4.1 SHB). Code that navigates backwards and passes a section boundary where the endianness is changed will most likely loose traction of block boundaries.\r\n- Please refrain from padding stuff to 32 bit boundaries. Doing so actually introduces unnecessary complexity rather than solving a problem.\r\n\r\nMy recommendation is to not allow SHB's to change the endianness, or even better only allow ONE Section Header Block per pcapng file.",
      "createdAt": "2016-11-22T11:27:54Z",
      "updatedAt": "2016-11-25T19:51:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "Is backward navigation really a necessity?  It adds 4 bytes at the end of each recorded packet, the overhead which in cases of very chatty protocols quickly adds up and penalizes applications that don't need backward navigation.",
          "createdAt": "2016-11-22T13:49:00Z",
          "updatedAt": "2016-11-22T13:49:32Z"
        },
        {
          "author": "erik4711",
          "authorAssociation": "NONE",
          "body": "Good point, backwards navigation can hardly be a necessity. It would be nice to see these redundant 4 bytes removed from the general block structure. However, I'm guessing the Wireshark community might wanna use the current structure for the final 1.0 spec, since they have been using this structure for quite some time already. Hopefully there will be a version 1.1 where we can discuss improvements like dropping the tailing block total length.",
          "createdAt": "2016-11-25T06:23:41Z",
          "updatedAt": "2016-11-25T06:23:41Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Backwards navigation is critical for me to have to be able to navigate backwards. There's two main reasons for this:\r\n1. being able to determine if a pcapng file is identical to one I have a meta data entry in my database for so I can look it up - one of the things I need to know for that is the time stamp of the last frame, so it's important I can find the start offset of the last frame without having to read the whole file \r\n2. being able to fix a damaged file by reading towards the messed up data from both ends of the file \r\n\r\nFor me the 4 additional bytes are easily worth the overhead. ",
          "createdAt": "2016-11-25T07:48:41Z",
          "updatedAt": "2016-11-25T18:23:47Z"
        },
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "Though it seems that (1) is easily achievable by storing file's checksum (e.g. SHA/MD5) in the database. Regarding (2), usually the damage happens at the end of a file due to an abnormal writer's termination. In which case the backwards navigation would be useless anyway, since the end of the file might be partially written, so the reader would have to read from the beginning until the last consistent packet is found.\r\n\r\nOn the other hand, in very chatty protocols where payload of each packet is very small (e.g. financial FAST market data), containing 8-16 bytes per packet with 100's of Gigabytes of data per day, any extra bytes of overhead create an unnecessary storage burden.\r\n\r\nSo I would really like to see this \"backward navigation\" option either obviated or made optional.",
          "createdAt": "2016-11-25T17:50:41Z",
          "updatedAt": "2016-11-25T17:53:57Z"
        },
        {
          "author": "erik4711",
          "authorAssociation": "NONE",
          "body": "@packetfoo This is why it's a bad idea to allow multiple SHB's with different endian in the same pcapng file. There is no way you can know whether to interpret the Block Total Length of the last frame as big endian or little endian. You can, of course, make an educated guess, but it would be nice if we didn't have to rely on guesswork to implement the pcapng spec.",
          "createdAt": "2016-11-25T18:21:51Z",
          "updatedAt": "2016-11-25T18:21:51Z"
        },
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "+1",
          "createdAt": "2016-11-25T18:24:00Z",
          "updatedAt": "2016-11-25T18:24:00Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@saleyn no, MD5 or any kind of hash is not going to cut it. Not even the file size is, because you can add comments (or other things) to a pcapng file and the packets stay completely the same (which is all that matters to meta data regarding packets), but hash and size change. Also, calculating the hashes would require reading the full file each and every time, and I can't afford to do that.\r\n\r\n@erik4711 I know what you mean - so far it worked fine since all I encounter are little endian files. Forcing a single endianess is something we should look at in the future, but first 1.0 needs to be done.",
          "createdAt": "2016-11-25T18:28:05Z",
          "updatedAt": "2016-11-25T18:28:05Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By the way, I need to find out what the reason for the 32bit padding is - I think there is a very specific reason for this, probably extremely high capture performance. Meaning: not talking about lazy PC hardware, but 10G/40G/100G/200G FPGA based captures where writing to disk needs to be ultra fast - it's possible that there are I/O problems if not writing flat 32bit values.",
          "createdAt": "2016-11-25T18:34:01Z",
          "updatedAt": "2016-11-25T18:34:01Z"
        },
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "@packetfoo, I understand that there might be legitimate reasons for backward navigation.  The question is if this requirement is general enough to make it a \"hard-core\" feature of the format.",
          "createdAt": "2016-11-25T18:45:58Z",
          "updatedAt": "2016-11-25T18:46:26Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think backwards movement is more useful to all capture files than avoiding 4 bytes for an extremely special capture application regarding tiny packets. Which wouldn't even be Ethernet compliant at that size, but there are other L2 protocols that do, of course, so I can see the point. But I still think 4 bytes overhead are completely insignificant compared to their usefulness of being able to move back and forth.\r\n\r\nAnd making the trailing size optional kills the \"read the last timestamp\" feature completely, because how would I know if the last four bytes are the block size or part of the frame data?",
          "createdAt": "2016-11-25T18:51:20Z",
          "updatedAt": "2016-11-25T18:51:20Z"
        },
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "Regarding the \"usefulness\" - it's really all use-case driven. In your case the benefit of backward navigation seems to outweigh the overall file size. In my case, it's the other way around, and when frequently dealing with very large pcap files, I really never encountered the need to read a file from the end, and if that ever occurred I would likely come up with a method to index the files.\r\n\r\nRegarding turning that to being an optional feature - one possibility could be to add a flag to the header block that would indicate that the file supports backward navigation, in which case the writer would append the size of last block at the end of each written block.",
          "createdAt": "2016-11-25T19:35:30Z",
          "updatedAt": "2016-11-25T19:35:30Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You're right, it's a question of point of view. Problem with the flag is that the header block for the last frame could be anywhere since we can have multiple SHBs, so even if I read the first SHB I cannot be sure that the flag tells the truth about the last block in the file.",
          "createdAt": "2016-11-25T19:42:18Z",
          "updatedAt": "2016-11-25T19:42:18Z"
        },
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "You just named another reason to not allow multiple SHBs. :-)",
          "createdAt": "2016-11-25T19:46:29Z",
          "updatedAt": "2016-11-25T19:46:29Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I know, they're complicating things. It has to be determined how useful it is to allow these, but that is again not something for the 1.0 spec. 1.0 will have to live with multiple SHBs.",
          "createdAt": "2016-11-25T19:51:32Z",
          "updatedAt": "2016-11-25T19:51:32Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWUxOTA5NzUxNzQ=",
      "title": "Comments on 4.1. Section Header Block - don't allow multiple SHB's",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/42",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**4.1. Section Header Block**\r\n\r\nFrom the pcapng spec:\r\n`\u201cPlease note: The endianness is indicated by the Section Header Block [section_shb]. Since this block can appear several times in a pcapng file, a single file can contain both endianness variants.\u201d`\r\n\r\n- I would prefer if the spec would only allow for one SHB per pcapng file. I'm guessing the reason for allowing multiple SHB's is to facilitate merging of pcapng files, but such freedom comes with a too high cost. One problem that comes with allowing multiple SHB's is that the trailing \"Block Total Length\" at the end of each block can't be used to move backwards in a pcapng file, since a change of endian by an SHB will cause the length field to be interpreted incorrectly. Even skipping forward in a pcapng file can be dangerous unless care is taken to read the endian of each newly encountered SHB. Merging pcapng files is an easy task, even if we allow only one SHB per file, so there is no need to simplify this task even more. There are just too many downsides to having multiple SHB's in a pcapng file. Which reminds me of this quote by Einstein: \u201cEverything should be made as simple as possible, but no simpler.\u201d\r\n- There is no real point in allowing for both big-endian and little-endian. Requiring all pcapng writers to use one endianness will not even affect performance notably. Just think of all the network protocols specified for big endian even though many CPU's are little endian. TCP is, for example, forced to transmit sequence numbers and window size values in big endian, yet you will never see the endianness conversion being a performance issue in TCP. I would personally prefer to have all pcapng files to be big endian ONLY.\r\n- Section Length field isn't used, it can be removed from the spec.\r\n- Having the \u201cByte-Order Magic\u201d field after the \u201cBlock Total Length\u201d isn't great, since we need to know the endian (from the magic field) before we can parse the length field anyway. I understand that this is an attempt of having the SHB to extend the generic \u201cGeneral Block Structure\u201d. However, the SHB can NEVER be parsed as a generic block anyway since it allows for a change of endianness which must be dealt with by all parsers.\r\n- Please refrain from padding stuff to 32 bit boundaries. Doing so actually introduces unnecessary complexity rather than solving a problem.\r\n\r\nMy recommendation: Only allow one SHB per pcapng file.",
      "createdAt": "2016-11-22T11:30:54Z",
      "updatedAt": "2016-11-22T11:31:11Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWUxOTA5NzU3MTU=",
      "title": "Comments on 4.2. Interface Description Block - SnapLen field can be removed",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/43",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**4.2. Interface Description Block**\r\nThe SnapLen field can be removed. We already have the captured length of packets in the EPB. The only packet that actually need the SnapLen is the SPB, which I recommend should be deprecated.",
      "createdAt": "2016-11-22T11:33:47Z",
      "updatedAt": "2016-11-22T11:33:47Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWUxOTA5NzU5NTg=",
      "title": "Comments on 4.3. Enhanced Packet Block - specify timestamps as a 64 bit vaule",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/44",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**4.3. Enhanced Packet Block**\r\n\r\nIs there any valid reason for splitting the 64 bit timestamp into two separate 32 bit values? Several 64 bit fields already exist in the spec, such as the Section Length field of SHB and epb_dropcount option. Also, please note that if we would require the pcapng spec to be big-endian only then we wouldn't need to make this type of differentiation.\r\n\r\nMy recommendation is that the timestamp should be serialized as a single 64 bit value rather than as two 32 bit values.",
      "createdAt": "2016-11-22T11:34:55Z",
      "updatedAt": "2016-11-22T11:37:48Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWUxOTA5NzYwNzY=",
      "title": "Comments on 4.4. Simple Packet Block - please deprecate",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/45",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**4.4. Simple Packet Block**\r\n\r\nPlease deprecate the SPB. Adding a simple block type does not make implementing the spec easier, it just adds an extra piece of code that must also be implemented. Additionally, I haven't seen any sniffer that actually writes packets in the SPB format.",
      "createdAt": "2016-11-22T11:35:35Z",
      "updatedAt": "2016-11-22T11:35:35Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWUxOTA5NzYyMjA=",
      "title": "Comments on 4.6. Interface Statistics Block - please deprecate",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/46",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**4.6. Interface Statistics Block**\r\nPlease deprecate ISB. The block is rarely used and most of the information in this block can be calculated by reading the EPB's anyway (like start time, end time, received frames, number of drops)",
      "createdAt": "2016-11-22T11:36:16Z",
      "updatedAt": "2016-11-22T11:36:16Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWUxOTA5NzYzNDk=",
      "title": "Comments on 5. Experimental Blocks - please drop/deprecate",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/47",
      "state": "OPEN",
      "author": "erik4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**5. Experimental Blocks**\r\nPlease drop all experimental blocks before finalizing the specification.",
      "createdAt": "2016-11-22T11:36:49Z",
      "updatedAt": "2016-11-22T13:57:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "saleyn",
          "authorAssociation": "NONE",
          "body": "Please comment on my proposed addition: https://github.com/pcapng/pcapng/pull/40 ([formatted version](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/saleyn/pcapng/apb/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii#section_apb)).",
          "createdAt": "2016-11-22T13:56:16Z",
          "updatedAt": "2016-11-22T13:57:23Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "MDU6SXNzdWUyNzMyOTY5MTU=",
      "title": "Proposal: Additional option fields for wireless packet capture",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/48",
      "state": "OPEN",
      "author": "ryankurte",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**Update:**\r\n\r\n*This has been split into two components, per-interface information is approached by introducing a Capture Information Block (CIB) attached to a given interface in #51, per-packet information through the addition of new options to the existing Extended Packet Block (EPB) in #56*\r\n\r\n*The following is left for reference*\r\n\r\n**Original:**\r\n\r\nHi there,\r\n\r\nI would like to propose the addition of a set of option fields useful for wireless packet capture.\r\nA number of these are available in the 802.11 radiotap (meta)header, however are generally useful outside the 802.11 protocol.\r\n\r\nThere is an argument [here](https://wiki.wireshark.org/Development/PcapNg) that \"there's already code to handle that in programs that read pcap and pcap-ng files, there's already code in drivers to generate that information when capturing packets\" which doesn't really stand for non-802.11 protocols. \r\nBy supporting these options as part of the core pcap-ng protocol we would enable development of interesting tools for visualisation and analysis of wireless networks that are protocol independent.\r\n\r\nThe option fields I would propose initially are:\r\n\r\n1. GPS Location (lat/lng/alt) as 3x 32-bit floats for EPB and IDB\r\n2. RSSI in dBm as 1x 32-bit float for EPB\r\n3. Frequency in Hz as 1x 32-bit float for EPB and IDB\r\n4. Channel as 1x 16-bit uint for EPB\r\n5. Channel Spacing as 1x 32-bit float for IDB\r\n\r\nSupporting GPS Location and frequency in the IDB or EPB allows for specification of multiple static capture points or moving captures at different frequencies.\r\n\r\nCheers,\r\n\r\nRyan",
      "createdAt": "2017-11-13T03:02:41Z",
      "updatedAt": "2019-01-05T22:23:38Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Supporting GPS Location and frequency in the IDB or EPB allows for specification of multiple static capture points or moving captures at different frequencies.\r\n\r\nSo presumably if the capture device isn't moving, the location can be in the IDB rather than in every EDB, and if it's not doing scanning, the frequency information can be in the IDB rather than in every EDB.\r\n\r\nWould the same apply to the channel number?",
          "createdAt": "2017-11-13T08:08:17Z",
          "updatedAt": "2017-11-13T08:08:17Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> RSSI in dBm as 1x 32-bit float for EPB\r\n\r\nWhat if you're receiving on more than one antenna?",
          "createdAt": "2017-11-13T08:09:07Z",
          "updatedAt": "2017-11-13T08:09:07Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Channel as 1x 16-bit uint for EPB\r\n\r\nWhat indicates how the channel number is to be interpreted?  I.e., is this an 802.11 channel, a Bluetooth channel, etc.?",
          "createdAt": "2017-11-13T08:09:59Z",
          "updatedAt": "2017-11-13T08:09:59Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Thanks for the quick response! In order:\r\n\r\nWRT channel number in EPB or IDB, yep that would make sense.\r\n\r\nWRT RSSI, I'm not aware of hardware that actually receives the same packet on N antennae rather than just picking the best one at a given point in the preamble, but, support for multiple RSSI options per packet would work? (And if they're actually parallel, that may be better modelled as N interfaces).\r\n\r\nWRT. channel number interpretation, this is I guess backwards from the current way.\r\nRather than a protocol specific header (ie. radiotap) that encodes the channel and how to interpret it, pcap-ng can encode the raw channel, then the decoder can handle interpretation if it's required (along with everything else in the pcap payload).\r\n\r\nThat does raise the question of support for further metadata (like channel b/w, spacing), as it stands I have been putting that kind of data in the file and interface comments since it's not /required/ for parsing / understanding the packet capture.\r\n\r\n\r\n\r\n",
          "createdAt": "2017-11-13T10:02:34Z",
          "updatedAt": "2017-11-13T10:02:34Z"
        },
        {
          "author": "kismetwireless",
          "authorAssociation": "NONE",
          "body": "I would also be interested in GPS data; I'd propose pushing it to include some additional info, modelled on the PPI GPS framework:\r\n\r\nhttps://media.blackhat.com/bh-us-11/Cache/BH_US_11_Cache_PPI-Geolocation_WP.pdf\r\n\r\nThe lat/lon/alt/ts is very similar to what is proposed above; the addition of VECTOR would allow for precision aimed antennas (something the original ppi geolcoation method was designed for).\r\n\r\nPosition in both IDB and EDB would account for all my needs (fixed and moving sensors); IDB alone wouldn't be enough.\r\n\r\nI'd like to suggest breaking the record into 'gps' and 'wifi specific'; I've got non-wifi packet sources in Kismet which still have location data.\r\n\r\nFor the wifi-specific component, you may find it difficult to represent channel simply; in wifi alone you've got 5, 10 15 (non-standard) widths, 20, HT20, HT40+ HT40-, HT80+center, HT160+center, and HT80+80 with dual non-contiguous center frequencies.\r\n\r\nFor RSSI, any N/AC hardware with mimo will report multiple signal levels in the radiotap header; you've got an arbitrary number of antenna signal levels (1-3 on current hardware but more in the future is certainly a possibility).\r\n\r\n",
          "createdAt": "2017-11-23T04:23:50Z",
          "updatedAt": "2017-11-23T04:23:50Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@kismetwireless good points! IDK whether the pcapng team would rather one big issue or multiple smaller ones (or how to actually enact any of this \ud83d\ude02)?\r\n\r\nTotally agreed about position options for both IDB and EDB.\r\n\r\nSo the VECTOR addition would add pitch/roll/yaw? I would make the suggestion that perhaps that would better be called orientation, and I have been wondering whether speed was useful to encompass doppler shift of measurements. Also that hopefully it could be more simple.\r\n\r\n I don't understand what you mean by 'gps' and 'wifi specific'? The goal here is to have useful physical data available for any packet capture source (I work on a variety of ISM band mesh networks which is the use case for me)\r\n\r\nThat is true, but the question is whether pcap-ng should include that, or, have some kind of generic enough mapping for it to be implemented for arbitrary protocols.\r\nI would argue the latter, but we have to find a way of generically representing it.\r\nPerhaps the addition of a `channel name` option would be sufficient?\r\n\r\nAnother option would be to add channels to the IDB and reference them from each EPB, but that's adding quite a lot of complexity, and means that wifi channels will end up getting encoded in every pcap file.\r\n\r\nFor RSSI, would the addition of an antenna index to the rssi option cover that?",
          "createdAt": "2017-11-26T20:16:30Z",
          "updatedAt": "2018-06-15T02:35:19Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "## Updated Additional Options\r\n\r\n1. Location options\r\n  a. Global Location (lat/lng/alt) as 3x 32-bit floats for EPB and IDB\r\n  b. Global location error (lat/lng/alt) as 3x 32-bit floats for EPB and IDB (following location option)\r\n  c. Orientation (pitch/roll/yaw) in radians as 3x 32-bit floats for EPB and IDB\r\n  d. Orientation error (pitch/roll/yaw) as 3x 32-bit floats for EPD and IDB (following orientation option)\r\n  e. Velocity (x/y/z) in m/s as 3x 32-bit floats wrt. global frame (orientation of antenna independent of motion)\r\n  f. Velocity error (x/y/z) in m/s as 3x 32-bit floats (following velocity option)\r\n2. Channel / Medium options\r\n  a. Frequency in Hz as 1x 32-bit float for EPB and IDB\r\n  b. Channel Spacing in Hz as 1x 32-bit float for IDB or EPB\r\n  c. Channel Bandwidth in Hz as 1x 32-bit float for IDB or EPB\r\n  d. Channel encoding as string for IDB or EPB\r\n  e. Channel name as string for IDB or EPB\r\n3. Capture / Measurement options\r\n  a. RSSI in dBm as 1x 32-bit antenna index and 1x 32-bit float for EPB\r\n  b. Channel index as 1x 16-bit uint for EPB\r\n\r\nRSSI could be 2x 16-bit to save a 4 bytes, but, 32-bit floats are probably easier to deal with in most situations (unless you're missing an FPU).",
          "createdAt": "2017-11-26T20:31:44Z",
          "updatedAt": "2017-12-02T03:17:49Z"
        },
        {
          "author": "kismetwireless",
          "authorAssociation": "NONE",
          "body": "re: wifi vs gps - we need gps for non-wifi packets, so it doesn't make sense to couple them.  We should have a GPS EPB and IDB, and a 'frequency' or similarly named EPB and IDB.\r\n\r\nFor the GPS frame I'd suggest all the data mapped in the GPS PPI spec which I linked above, starting on page 22.\r\n",
          "createdAt": "2017-11-27T14:37:38Z",
          "updatedAt": "2017-11-27T14:37:38Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "See also another proposal for a \"Location Information Block\" in the archives of the pcapng mailing list.  Here are [the thread from March 2015](https://www.winpcap.org/pipermail/pcap-ng-format/2015-March/thread.html) and [the continuation of that thread in April 2015](https://www.winpcap.org/pipermail/pcap-ng-format/2015-April/thread.html).",
          "createdAt": "2017-12-02T01:55:02Z",
          "updatedAt": "2017-12-02T01:55:02Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@kismetwireless absolutely and that's why I am proposing this? AFAIK it's currently coupled because the recommended way of getting location data into wireshark is wrapping whatever data you have in a radiotap header?\r\nAnd yep, the PPI spec seems like a good basis, which it seems to me would be a small addition to the previous discussions linked by @guyharris.\r\n\r\n@guyharris thanks for linking those, do you know what happened following that discussion?\r\nAlso, how to develop this discussion into a useful submission? It seems like we could pick up a lot of the previous components without much modification, though I would argue for floating point and sane units if that's appropriate within the spec.\r\n\r\n(For other readers, [this](https://www.winpcap.org/pipermail/pcap-ng-format/2015-April/000181.html) post contains a fairly thorough formatted proposal with responses following, and [this](https://www.winpcap.org/pipermail/pcap-ng-format/2015-April/000186.html) covers many of the same options as we're talking about with different formats/units (with much of the PPI spec stuff).\r\n\r\nI think the distinction between a `location` option and a `gps` option is important, and I used the wrong nomenclature before, the use case for me is to know from where the packet was observed (or created) regardless of the mechanism providing the location information. \r\nIs the underlying mechanism relevant in the capture file, and is the proposed Location Provider Block worth the complexity of having to deal with indexing as opposed to introducing additional option blocks?\r\n",
          "createdAt": "2017-12-02T03:25:29Z",
          "updatedAt": "2017-12-02T03:25:29Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> do you know what happened following that discussion?\r\n\r\nThere were still questions outstanding, so nothing happened after that.\r\n\r\n> Also, how to develop this discussion into a useful submission? It seems like we could pick up a lot of the previous components without much modification,\r\n\r\n\"This discussion\" meaning the discussion here on GitHub, or the e-mail discussion from 2015?  The best thing to do with the 2015 discussion is to pick up from the proposal and answers to questions any ideas that look good and, for open questions, possibly resolve them (e.g., [the questions about the Source Types](https://www.winpcap.org/pipermail/pcap-ng-format/2015-April/000189.html)) and incorporate the results into the your proposal if they look good.\r\n\r\n> I think the distinction between a `location` option and a `gps` option is important\r\n\r\nAs in \"we need to offer both types of option\" or as in \"the option should be called \"location\" rather than \"gps\", as it might not come from GPS or even from any of the satellite-based positioning systems\"?\r\n\r\n> and I used the wrong nomenclature before, the use case for me is to know from where the packet was observed (or created) regardless of the mechanism providing the location information.\r\n\r\nSo it sounds as if you mean \"\"the option should be called \"location\" rather than \"gps\"\"; if so, I agree.\r\n\r\n> Is the underlying mechanism relevant in the capture file\r\n\r\nI'll leave that for others to answer.\r\n\r\n> is the proposed Location Provider Block worth the complexity of having to deal with indexing as opposed to introducing additional option blocks?\r\n\r\nOptions in the IDB, like options in the LPB, can be thought of a a form of compression - instead of having to put values for those options in every EPB, if they'll be the same for every packet on a given interface, or for every packet geotagged by a given location provider, there can be one instance of them in the IDB or LPB and the EPB can just point to the IDB or LPB by ID.  You already have to do indexing to refer to the IDB to get, for example, the link-layer header type; similar code an do indexing to refer to an LPB, so I don't consider it an extreme amount of extra complexity.\r\n\r\nI guess the \"compressed\" options could be attached to an IDB, but if you have, for example, a laptop with two WI-Fi adapters and a GPS receiver, you have one location provider and two interfaces, so you conceptually have one location provider, so I could see having an LPB as being a bit cleaner in that sense.",
          "createdAt": "2017-12-02T05:21:27Z",
          "updatedAt": "2017-12-02T05:21:40Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> AFAIK it's currently coupled because the recommended way of getting location data into wireshark is wrapping whatever data you have in a radiotap header?\r\n\r\nThere are two ways to provide per-packet metadata: provide them in a link-layer-header-type-specific metadata header preceding the link-layer header, or provide them in pcapng options.\r\n\r\nThe first one has the advantages that:\r\n\r\n- they don't require pcapng - they can be used in pcap files as well;\r\n\r\n- if they're specific to a particular link-layer type, you don't have to deal with them in inappropriate link-layer types (so, for example, your code to handle `LINKTYPE_ETHERNET` doesn't have to figure out what to do with an Ethernet frame tagged with the number of spatial streams - display it or ignore it?)\r\n\r\nThe second one has the advantage that, if it's *not* specific to a particular link-layer type, you don't have to add it to N different link-layer types.\r\n\r\nThe location/angle/velocity information is definitely not link-layer specific, and strikes me as an obvious candidate for inclusion in pcapng (at the expense of it not being representable in pcap, but there's already information that's not representable in pcap).",
          "createdAt": "2017-12-02T08:07:47Z",
          "updatedAt": "2017-12-02T08:07:47Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@guyharris thanks for the responses! The discussion being all of the discussions in all the places ^_^\r\n\r\n> incorporate the results into the your proposal if they look good\r\n\r\nCool, and what format should the proposal be? Would a PR against the base [XML file](https://github.com/pcapng/pcapng/blob/master/draft-tuexen-opsawg-pcapng.xml) work?\r\n\r\n> the option should be called \"location\" rather than \"gps\"\r\n\r\nExactly.\r\n\r\n> Options in the IDB, like options in the LPB, can be thought of a a form of compression - instead of having to put values for those options in every EPB, if they'll be the same for every packet on a given interface, or for every packet geotagged by a given location provider, there can be one instance of them in the IDB or LPB and the EPB can just point to the IDB or LPB by ID. You already have to do indexing to refer to the IDB to get, for example, the link-layer header type; similar code an do indexing to refer to an LPB, so I don't consider it an extreme amount of extra complexity.\r\n\r\nIDK how much more it is for parsers, but, my suggestion is that putting these in the _IDB_ and _EPB_ is still simpler compared to introducing an _LPB_ as the _IDB_ lookup already exists.\r\n\r\nAs mentioned in the mailinglist adding the _LPB_ is also going to increase the complexity of merging captures, whereas the other approach should work as without modification to existing tools.\r\n\r\n> I guess the \"compressed\" options could be attached to an IDB, but if you have, for example, a laptop with two WI-Fi adapters and a GPS receiver, you have one location provider and two interfaces, so you conceptually have one location provider, so I could see having an LPB as being a bit cleaner in that sense.\r\n\r\nIt is probably cleaner, but for N adaptors in a static (not moving) configuration at the same location, in which case it's going to save N-1 location headers.\r\nThe other case is moving with N adaptors at the same location, in which case if packet rate >> location update rate it could save some, which might be more worthwhile.\r\nIn any other case, ie. different locations, packet rate << location update rate, there is going to be a ~1:1 correlation between _EPBs_ and _LPBs_ which will be like anti-compression.\r\n\r\nIMO it would be a mistake to end up allowing both, so, the to conclude this the options are either:\r\n\r\n- the addition of an _LPB_ containing location options as well as _LPB_ index options for the _IDB_ and _EPB_\r\n- the addition of location options for use in the _IDB_ and _EPB_\r\n\r\nThe former will (probably) result in better compression for some use cases, but requires modification of existing tools to support merging (and parsing?) pcap-ng files containing LPBs.\r\n\r\nThe latter may result in data duplication where N > 1 interfaces are used from the same place under certain conditions, but should not require any modification to support merging or splitting of files. IMO it's also easier to implement for parsing / encoding, but, that doesn't matter a lot.\r\n\r\nThat seems like a question of ethos as much as anything?\r\n\r\n> The location/angle/velocity information is definitely not link-layer specific, and strikes me as an obvious candidate for inclusion in pcapng (at the expense of it not being representable in pcap, but there's already information that's not representable in pcap).\r\n\r\nThat's why we're here ^_^ I couldn't quite stomach the thought of wrapping my 6lowpan packets in radiotap headers / writing more oddly specific encoders.\r\n",
          "createdAt": "2017-12-05T01:27:28Z",
          "updatedAt": "2017-12-05T01:27:28Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Cool, and what format should the proposal be? Would a PR against the base [XML file](https://github.com/pcapng/pcapng/blob/master/draft-tuexen-opsawg-pcapng.xml) work?\r\n\r\nIf there's a convenient way of formatting the *updated* XML file into the resulting HTML and viewing it, before the chances are merged, yes.  Not being able to preview the result would make it more difficult to comment on.",
          "createdAt": "2017-12-05T09:22:53Z",
          "updatedAt": "2017-12-05T09:22:53Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> The other case is moving with N adaptors at the same location, in which case if packet rate >> location update rate it could save some, which might be more worthwhile.\r\nIn any other case, ie. different locations, packet rate << location update rate, there is going to be a ~1:1 correlation between _EPBs_ and _LPBs_ which will be like anti-compression.\r\n\r\nI think there's some confusion here.  [Kenneth D. Renard's original proposal](https://www.winpcap.org/pipermail/pcap-ng-format/2015-March/000164.html) had  a Location Information Block (LIB), which provides location information.  I later proposed a [Location Provider Information Block](https://www.winpcap.org/pipermail/pcap-ng-format/2015-March/000169.html) (LPIB) which gives a description of a provider of location information.\r\n\r\nA capture would have one LPIB per source of location information, no matter how many interfaces or packets there are, or how fast the capturing machine moves.\r\n\r\nThe location update rate would control the number of LIBs, *not* the number of LPIBs.\r\n\r\nSo there are at least two questions:\r\n\r\n1. *If* we provide a description of the source of location information, should we do so by putting the description in an LPIB or in an IDB?\r\n\r\n1. Should location information be attached to an EPB or an LIB?\r\n\r\nI was mainly discussing the LPIB vs. IDB issue; you appear to be discussing the EPB vs. LIB issue.\r\n\r\nFor LPIB vs. IDB, as per my comments, I see having a separate LPIB as conceptually cleaner, even if it requires that the reader keep track of lists of location providers as well as lists of interfaces.\r\n\r\nFor location information in EPBs vs. location information in LIBs, *that's* where the packet rate and location update rate matter.  In the thread about Renard's proposal, I proposed per-EPB location information in [this message](https://www.winpcap.org/pipermail/pcap-ng-format/2015-March/000166.html):\r\n\r\n> If somebody's capturing while in motion, and we're not interested in position or orientation information when packets aren't arriving, we could have those options available for both LIBs and packet blocks, and say that the position/orientation information for a packet is unchanged from whatever the last values were for that interface if the options aren't present.  That might allow less stuff to be written if we're only interested in the position and orientation at the time packets are captured.\r\n\r\nand Renard responds in [this message](https://www.winpcap.org/pipermail/pcap-ng-format/2015-March/000168.html):\r\n\r\n> Agreed.  Frequency of location information is defined by the application/user.\r\n> Example use cases might be:\r\n> \r\n>   1.  Set location description each time I wake up my laptop\r\n>   2.  Synchronous stream from GPS:  Once per second, per interface.\r\n>   3.  Every N seconds or change in position more than M meters.\r\n> \r\n> Location information per-packet seems extreme, but certainly valid.\r\n\r\nI see the LIB as useful only if either 1) the machine is moving slowly enough, and capturing enough traffic, that you'd get less redundant location information (that's the packet rate >> location update case you mention) or 2) the user wants to know how the machine is moving even if it doesn't happen to be capturing any packets (that's *a* packet rate << location update rate case, but it's not necessarily *all* packet rate << location update rate cases - if the user doesn't care where the machine is when it's not seeing traffic, the extra LIBs aren't useful).  If the two rates are comparable, the LIB doesn't provide any compression.",
          "createdAt": "2017-12-05T09:57:06Z",
          "updatedAt": "2017-12-05T09:57:06Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "> I think there's some confusion here. Kenneth D. Renard's original proposal had a Location Information Block (LIB), which provides location information. I later proposed a Location Provider Information Block (LPIB) which gives a description of a provider of location information.\r\n\r\nYep, I somehow got the two of them mashed up in my head. s/LPB/LIB/g in my previous comment, and thanks for clearing that up!\r\n\r\n> _If_ we provide a description of the source of location information, should we do so by putting the description in an LPIB or in an IDB?\r\n\r\nIMO the mechanism of location capture is metadata that isn't particularly relevant to the captured packets, though it would make pcap files more standalone.\r\n\r\n> I see the LIB as useful only if either 1) the machine is moving slowly enough, and capturing enough traffic, that you'd get less redundant location information (that's the packet rate >> location update case you mention)\r\n\r\nI suspect given enough interfaces it's probably pretty easy to receive >> packets than location updates (GPS is usually ~10Hz which is /not very fast/).\r\n\r\n> 2) the user wants to know how the machine is moving even if it doesn't happen to be capturing any packets\r\n\r\nI don't think this is a use case for a pcap-ng file? If you want a GPS track you can save one using a format for that.\r\nThat said, if we're implementing a location information block (which has an interface as a parent) it's not a big deal to support it.\r\n\r\nI need to map out the implications of each approach again but it's way too late here. Will try and tabulate it tomorrow.\r\n\r\n> If there's a convenient way of formatting the updated XML file into the resulting HTML and viewing it, before the chances are merged, yes.\r\n\r\nIt's gotta be achievable, convenience though \ud83d\ude02\r\nWill have a look sometime this week into what can be done.",
          "createdAt": "2017-12-05T11:27:18Z",
          "updatedAt": "2017-12-05T11:27:34Z"
        },
        {
          "author": "taospartan",
          "authorAssociation": "NONE",
          "body": "Hi Guys,\r\n                Has there been any movement on this feature?\r\n\r\ncheers\r\n\r\ntao",
          "createdAt": "2018-01-15T08:53:29Z",
          "updatedAt": "2018-01-15T08:53:29Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Not yet, still need it / intending to work on it but buried under other things at the moment.",
          "createdAt": "2018-01-17T00:51:27Z",
          "updatedAt": "2018-01-17T00:51:27Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "After a long time of not having the time to think about this I had the idea that perhaps rather than building this to be location specific, it would make more sense to have a Capture Information Block (CIB) that we can extend with options for location or whatever else is required, and attach to interface description block(s) or refer to from packet block(s).\r\n\r\nSo, a draft of that idea is in progress in #51. It doesn't address all the questions here or in the mailing list yet (because tbqh I'm finding keeping track of all the discussion rather difficult), but, we'll get there hopefully.\r\n\r\nThe immediate questions I have are:\r\n- Does having a generic `Capture Information Block` make sense?\r\n- Does attaching these to IDBs and EPBs cover our intended use cases?\r\n  - Is the `epb_cib_id` option in EPBs a sensible way of linking to packets?\r\n  - Is the `cid_interface_id` option in CIBs a sensible way of linking to interfaces?\r\n- What is missing in the CIB?\r\n  - Timestamps\r\n  - RF info (though this needs more discussion)\r\n- Do we still need a `Location Provider Information Block (LPIB)` equivalent?\r\n  - I'm not convinced it offers a whole lot of utility if CIBs can be attached to IDBs or EPBs?\r\n\r\nWhat do y'all think?",
          "createdAt": "2018-06-15T02:49:59Z",
          "updatedAt": "2018-06-15T02:50:12Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> It doesn't address all the questions here or in the mailing list yet (because tbqh I'm finding keeping track of all the discussion rather difficult)\r\n\r\nSo we now have discussion on:\r\n\r\n1. the mailing list;\r\n1. this issue;\r\n1. the pull request.\r\n\r\nIt might be easier to keep track of it if it's all in one place; if so, where should that be?\r\n",
          "createdAt": "2018-06-15T04:49:00Z",
          "updatedAt": "2018-06-15T04:49:00Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "I think it would make sense to continue here?",
          "createdAt": "2018-06-17T04:26:39Z",
          "updatedAt": "2018-06-17T04:26:39Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think it would make sense to continue here?\r\n\r\nI'm fine with that so, unless somebody else objects, let's do that (and not further discuss this proposal on the mailing list or in comments on the pull request).",
          "createdAt": "2018-06-17T07:03:47Z",
          "updatedAt": "2018-06-17T07:03:47Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does having a generic Capture Information Block make sense?\r\n\r\nSo what does \"capture information\" refer to?  It's presumably not information about a particular packet, because that should be done as options for packet blocks of various sorts (Enhanced Packet Blocks or any future packet block types).\r\n\r\nSo it could be thought of as a form of compression for cases where the same information applies to multiple packets, under the assumption that the information in question changes rarely enough that you save space by not duplicating the information in multiple EPBs.\r\n\r\nThe current proposal has only position, orientation, and velocity information; presumably those change slowly enough that you *would* get sufficient compression by using CIBs (and so that, in a capture taken over a very long period of time, you don't get more than 2^32 changes of position, orientation, or velocity!).\r\n\r\nDo you foresee other forms of information where this putting the information in a CIB, rather than in per-packet options, would result in compression rather than expansion?",
          "createdAt": "2018-06-17T07:15:00Z",
          "updatedAt": "2018-06-17T07:15:00Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> - What is missing in the CIB?\r\n>   - Timestamps\r\n\r\nWhat sort of time stamps?  A time stamp of the time at which the information was determined?\r\n\r\n>   - RF info (though this needs more discussion)\r\n\r\nDoes that change infrequently enough that putting it in a CIB rather than in per-packet options would result in compression rather than expansion?  Does the answer depend on which particular RF information is being discussed?\r\n",
          "createdAt": "2018-06-17T07:18:39Z",
          "updatedAt": "2018-06-17T07:18:39Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does attaching these to IDBs and EPBs cover our intended use cases?\r\n\r\nIf the intent is to provide compression of per-packet information that changes sufficiently infrequently, attaching them to EPBs would cover that use case.  Attaching them to an IDB would presumably be useful for the case where the information never changes, e.g. a capture done on a machine that's not moving relative to the surface of the earth could have a CIB giving the position, orientation, and velocity of the device (the latter presumably being the zero vector, so maybe it needn't even be reported) attached to all of the IDBs for the capture.\r\n\r\nBTW, if an EPB has a CIB attached to it *and* is attached to an IPB with a CIB attached to it, if a given option is present in both CIBs, should the option value in the CIB attached to the EPB be the one used?",
          "createdAt": "2018-06-17T07:23:34Z",
          "updatedAt": "2018-06-17T07:23:34Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we still need a Location Provider Information Block (LPIB) equivalent? I'm not convinced it offers a whole lot of utility if CIBs can be attached to IDBs or EPBs?\r\n\r\nSo presumably you're proposing CIB options that could describe a location provider.  How often would that information change?  If it never changes, putting that in a CIB attached to the IDB would work, but if it can change occasionally, but changes more slowly than other CIB information, it'd be duplicated in all CIBs starting with the first change from values specified in the CIB attached to the IDB.\r\n\r\nA quick look at Wikipedia suggests that not all satellite-based navigation systems have global coverage yet, so it might be possible for a mobile device capturing packets to switch from one provider to another if the device moves out of the area covered by the nav system it's currently using.  By 2020 that might not be a problem (I don't know whether there would be other reasons, technical or political :-), for a device to change from one nav system with global coverage to another while in the process of doing a capture).",
          "createdAt": "2018-06-17T07:48:28Z",
          "updatedAt": "2018-06-17T07:48:28Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Given its absence from the proposal, presumably angular velocity (d{orientation}/dt) isn't of interest?",
          "createdAt": "2018-06-17T07:53:29Z",
          "updatedAt": "2018-06-17T07:53:29Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm fine with that so, unless somebody else objects, let's do that (and not further discuss this proposal on the mailing list or in comments on the pull request).\r\n\r\nExcept for obvious *editorial* changes (typoes, copy-and-pasteos, etc.), which are probably best done in comments on the pull request.",
          "createdAt": "2018-06-17T08:07:44Z",
          "updatedAt": "2018-06-17T08:07:44Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "### Updated Summary (TLDR)\r\n\r\nThanks for all the commends and feedback! On working through them I think there's a simpler approach, presented first so it's more obvious it's here.\r\n\r\n#### Overview\r\n- Propose the addition of a Capture Information Block (CIB)\r\n  - Attached to an Interface Description Block (IDB)\r\n  - Apply to all following packets until superseded\r\n  - Only contain location information (at the moment)\r\n  - Option for addition of RF or other information that applies to a sequential group of packets for a given interface\r\n- Separately propose the addition of RF options to EPBs\r\n  - RSSI, Channel (though this is complex as discussed above), etc.\r\n  - There are some cases this isn't optimal, but it supports all options (see discussion below)\r\n\r\nI can update the PR to reflect these changes if you like to see them, or wait until they've been further discussed.\r\n\r\n### Comments / Replies\r\n> So what does \"capture information\" refer to? It's presumably not information about a particular packet, because that should be done as options for packet blocks of various sorts (Enhanced Packet Blocks or any future packet block types).\r\n\r\nIt could be called \"Capture Metadata Block (CMB)\" or anything similar, I am open to alternate names if there is a more appropriate one. My original proposal was just to add options to the Enhanced Packet Block (EPB) or Interface Descriptor Block (IDB), however, I think it makes sense to use a separate block:\r\n- for compression as you mention\r\n- to allow the metadata to be reused against EPBs / IDBs (/ any future packet blocks)\r\n- so we have a mechanism to update metadata through time\r\n\r\n> Do you foresee other forms of information where this putting the information in a CIB, rather than in per-packet options, would result in compression rather than expansion?\r\n\r\nDefinitely more location-related ones, I'm not sure about other types of information. Some RF measurements (like RSSI) are definitely better per packet, some like channel bandwidth are per-interface and/or change with time, but this name supports it if we come up with other options.\r\n\r\n> What sort of time stamps? A time stamp of the time at which the information was determined?\r\n\r\nYeah, if we're using global lat/lng/alt from a GPS it'll probably be nice to have the GPS time along with it.\r\n\r\n> Does the answer depend on which particular RF information is being discussed?\r\n\r\nYep. Bandwidth / Frequency / Channel spacing are often per-interface for simple networks, but are not for wifi etc (as @kismetwireless [pointed out](https://github.com/pcapng/pcapng/issues/48#issuecomment-346529632)).\r\nIf you have a channel hopping interface and it receives > 1 packet per channel hop it might be useful to define the channel there. Except, you can also have wide-band interfaces listening on multiple channels at once, which is really only served by per-packet information.\r\nAlso, it makes no sense having something like RSSI in a reusable block because it only exists per packet.\r\n\r\n> If the intent is to provide compression of per-packet information that changes sufficiently infrequently, attaching them to EPBs would cover that use case. Attaching them to an IDB would presumably be useful for the case where the information never changes.\r\n\r\nI was thinking to link the information blocks to the interface blocks (rather than vice versa), so you can re-issue updates to an interface, and the latest CIB applies to all packets on that interface until the next one is read.\r\n\r\nThis also works kinda nicely from the writing side, if you're capturing packets you just have to interleave CIBs when you receive updated location information and they'll apply to everything until your next CIB, which also works nicely for the static case.\r\n\r\nIt does mean if you have multiple interfaces in the same place, you need multiple CIBs. We could allow them to be attached to N interfaces if that was desired, though it seems a little more complicated.\r\n\r\n> position, orientation, and velocity of the device (the latter presumably being the zero vector, so maybe it needn't even be reported).\r\n\r\nThe CIB is really just a list of options, so whatever is relevant can be reported and whatever is not can be elided.\r\n\r\n> BTW, if an EPB has a CIB attached to it and is attached to an IPB with a CIB attached to it, if a given option is present in both CIBs, should the option value in the CIB attached to the EPB be the one used?\r\n\r\nThe EPB attached block would override and of the same options specified in the IDB attached block, so the EPB version lets us override the IDB version.\r\n\r\nOn thinking more I'm not completely sure we need to be able to attach them to EPB at all, it might be better to rip out the strictly per-packet options like RSSI and channels as EPB options and remove the ability to link this with an EPB, which would vastly simplify the complexity of parsing logic.\r\n\r\n>  it might be possible for a mobile device capturing packets to switch from one provider to another if the device moves out of the area covered by the nav system it's currently using\r\n\r\nIn my experience, most multi-constellation systems still output lat/lng/alt, I don't think which system is providing the information is necessarily relevant. We could add an enum to support that identification, but, I don't know how much sense that makes when you're using a variety of networks.\r\n\r\nI'm not convinced this is a problem that should be solved within pcap.\r\n\r\n> Given its absence from the proposal, presumably angular velocity (d{orientation}/dt) isn't of interest?\r\n\r\nI'm not interested in it, but, once we have decided how we're going to do this / split up interface or packet related options, introducing new options is reasonably trivial.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2018-06-17T08:40:25Z",
          "updatedAt": "2018-06-17T08:40:25Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So, for the local location information, is there a need to specify where the origin is?",
          "createdAt": "2018-06-17T16:41:10Z",
          "updatedAt": "2018-06-17T16:41:10Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> My original proposal was just to add options to the Enhanced Packet Block (EPB) or Interface Descriptor Block (IDB), however, I think it makes sense to use a separate block:\r\n> - for compression as you mention\r\n> - to allow the metadata to be reused against EPBs / IDBs (/ any future packet blocks)\r\n\r\n\"Reused\" as in \"not having to separately define IDB and EPB options\"?\r\n\r\n> - so we have a mechanism to update metadata through time\r\n\r\nIf the metadata is per-packet, then there's nothing to update, so this appears to refer to updating values specified in an IDB.\r\n",
          "createdAt": "2018-06-17T20:42:02Z",
          "updatedAt": "2018-06-17T20:42:02Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> In my experience, most multi-constellation systems still output lat/lng/alt, I don't think which system is providing the information is necessarily relevant. We could add an enum to support that identification, but, I don't know how much sense that makes when you're using a variety of networks.\r\n> \r\n> I'm not convinced this is a problem that should be solved within pcap.\r\n\r\nSo let's not bother with providing a mechanism to identify the location provider until somebody requests it and gives a good argument why it's necessary.",
          "createdAt": "2018-06-17T20:49:26Z",
          "updatedAt": "2018-06-17T20:49:26Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "> So, for the local location information, is there a need to specify where the origin is?\r\n\r\nThe specific scenario I am thinking of is the arbitrary grid space of RF simulators, so, no I don't think so.\r\n\r\n> \"Reused\" as in \"not having to separately define IDB and EPB options\"?\r\n\r\nYeah, though I think the alternative [here](https://github.com/pcapng/pcapng/issues/48#issuecomment-397863816) is a simpler approach.\r\n\r\n> If the metadata is per-packet, then there's nothing to update, so this appears to refer to updating values specified in an IDB.\r\n\r\nNot specified in, but attached to?\r\n\r\n> So let's not bother with providing a mechanism to identify the location provider until somebody requests it and gives a good argument why it's necessary.\r\n\r\nAgreed.\r\n\r\n### So the options afaik now are:\r\n#### 1. Add a bunch of options to EPBs (and presumably other packet types in future)\r\n\r\nThis would seem to be the simplest option, though does require all metadata to be repeated every packet.\r\n\r\nAn example file would be:\r\n1. [IDB-1] defines interface 1\r\n3. [EPB-1] packet capture, contains metadata\r\n3. [EPB-2] packet capture, contains metadata\r\n\r\nIt's very easy, though not super efficient and does not support location sampling >> packet receipt rate.\r\n\r\n#### 2. Add a metadata block that EPBs can refer to\r\n\r\nCreate a metadata block and associated options that are linked to a given packet using an option in the EPB.\r\n\r\nThis would look something like:\r\n1. [IDB-1] defines interface 1\r\n2. [MDB-1] contains metadata\r\n3. [EPB-1] packet capture, linked to MDB-1\r\n3. [EPB-2] packet capture, linked to MDB-1\r\n4. [MDB-2] contains metadata\r\n3. [EPB-3] packet capture, linked to MDB-2\r\n\r\nThis requires some ordering rules (metadata defined before packet so the data is available when streaming), and tracking of metadata block IDs. The static case requires only one metadata block (per interface), however, packet block sizes will increase slightly with metadata link information.\r\n\r\nI don't think you can link the other way without introducing unique EPB IDs or an EPB ID counter, which generalises poorly for other packet types.\r\n\r\n#### 3. Add a metadata block that is associated with an IDB as well as options to EPBs where appropriate\r\n\r\nFor persistent metadata (eg. location), create a metadata block that is always applied to an interface and applies to any packets following it. For packet-related metadata (eg. RSSI), add options to EPBs.\r\nThis is what I proposed [here](https://github.com/pcapng/pcapng/issues/48#issuecomment-397863816), but, I may not have been clear enough about it.\r\n\r\nAn example file might look like:\r\n1. [IDB-1] defines interface 1\r\n2. [MDB-1] attached to IDB-1, sets location of interface 1\r\n3. [EPB-1] packet capture inherits metadata from MDB-1\r\n3. [EPB-2] packet capture inherits metadata from MDB-1\r\n4. [MDB-2] attached to IDB-1, updates location of interface 1\r\n4. [MDB-3] attached to IDB-1, updates location of interface 1\r\n3. [EPB-3] packet capture inherits metadata from MDB-3\r\n\r\nThis allows compression for the static use case (eg. where location doesn't change) and where packet rate >> change in metadata rate.  Where this is not true, up to one metadata block may be required per packet block. Persistent metadata is also generalized over all packet types, and interface location can be tracked at a higher rate than packet capture if required.\r\n\r\n### What now\r\nMy preference is for option three as I think it's reasonably simple/efficient/covers all use cases, or option one for simplicity, and I would be happy to go ahead and rework the PR to match either.\r\nAm I missing anything / are there any other approaches we should still be considering?\r\n\r\n",
          "createdAt": "2018-06-26T04:33:35Z",
          "updatedAt": "2018-06-26T04:33:35Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@guyharris any thoughts on these updates?",
          "createdAt": "2018-08-12T23:51:11Z",
          "updatedAt": "2018-08-12T23:51:11Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I was out of the discussion for a while for various reasons, including not being very familiar with all the WiFi stuff (which started the discussion). \r\n\r\nI think option three is the best, even though it adds the most complexity. \r\n\r\nDo I read the proposal correctly when I assume that MDBs are required when we introduce them (always having at least one MDB per IDB?) I haven't completely made up my mind about it but it may be desirable to still be able to write pcapng files with no MDBs at all. In which case the linking needs to be done via block options, which I would prefer anyway (compared to adding static link fields in the block headers).\r\n",
          "createdAt": "2018-08-13T13:37:00Z",
          "updatedAt": "2018-08-13T13:37:00Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "For option three, my suggestion is that the MDB includes the link to the interface it applies to (ie. contains the interface id), and if MDBs are available and the parser supports it, metadata gets applied, otherwise they're just another opaque block. That way there should be no compatibility issues (, and you can simply strip or merge pcap files and metadata if desired).",
          "createdAt": "2018-08-13T23:28:08Z",
          "updatedAt": "2018-08-13T23:28:08Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that sounds like the right way to do it.",
          "createdAt": "2018-08-14T08:18:34Z",
          "updatedAt": "2018-08-14T08:18:34Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Thanks for the feedback! I've update my [PR](https://github.com/pcapng/pcapng/pull/51/files) and the simplified proposal is viewable [here](https://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#rfc.section.4.7).\r\n",
          "createdAt": "2018-08-18T05:00:08Z",
          "updatedAt": "2018-08-18T05:00:08Z"
        },
        {
          "author": "b1tninja",
          "authorAssociation": "NONE",
          "body": "Please implement?",
          "createdAt": "2018-11-12T07:17:55Z",
          "updatedAt": "2018-11-12T07:17:55Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@packetfoo did you have a chance to look at #51? I guess the things left are:\r\n\r\nedit: todo list moved to #51 \r\n",
          "createdAt": "2018-11-12T20:22:49Z",
          "updatedAt": "2018-12-24T10:18:55Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \r\n> \r\n> @packetfoo did you have a chance to look at #51? I guess the things left are:\r\n> \r\n>     * [ ]  Should we call this `Capture Information Block (CIB)` or `MetaData Block (MDB)`?\r\n>     * [ ]  Examples (do we need them?)\r\n\r\nNo, I haven't, but I'll look at it this week in greater detail. I'm fighting with git and Github (the workflow concepts of Github refuse to get into my head, apparently), but I'll get there eventually...",
          "createdAt": "2018-11-12T21:20:33Z",
          "updatedAt": "2018-11-12T21:20:33Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Cool cool cool, if it'd be useful we could run through it in a skype call or something, just let me know if I can help (my email is my username at gmail.com if you'd like to get in contact that way) ^_^",
          "createdAt": "2018-11-28T00:29:42Z",
          "updatedAt": "2018-11-28T00:29:42Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "May I ask what happened to the proposed EPB RF options (RSSI, channel, freq, etc)?  The PR #51 only addresses the location information in a CIB and the per packet options have fallen by the wayside.\r\n\r\nI would like to also propose additional metadata for time slotted channel hopping radios which include an absolute slot number and start of slot timestamp (separate from start of frame).\r\n",
          "createdAt": "2018-12-20T00:45:02Z",
          "updatedAt": "2018-12-20T00:45:02Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "> May I ask what happened to the proposed EPB RF option\r\n\r\nIt turned out that there were a bunch of separate concerns with location information (which relates to interfaces) vs. rssi (which relates only to packets), so I decided to split the problem and attempt the location information in #51 and follow that up with another PR for the radio information.\r\n\r\nAs far as I can see, RSSI and Channel can just be added as fields on the [EPB](https://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#rfc.section.4.3), which I plan to propose once this has landed.",
          "createdAt": "2018-12-20T06:27:21Z",
          "updatedAt": "2018-12-20T06:27:21Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "Since PR #51 is created for the CIB options shall discussion on the EPB RF options continue in this issue? \r\n\r\nSome comments to those specific options.\r\n\r\n>     Channel / Medium options\r\n>     a. Frequency in Hz as 1x 32-bit float for EPB and IDB\r\n>     b. Channel Spacing in Hz as 1x 32-bit float for IDB or EPB\r\n>     c. Channel Bandwidth in Hz as 1x 32-bit float for IDB or EPB\r\n>     d. Channel encoding as string for IDB or EPB\r\n>     e. Channel name as string for IDB or EPB\r\n\r\na. 32-bit is insufficient - even as an unsigned integer it wouldn't represent frequency above ~4.295GHz (i.e. 5GHz band), perhaps an option in CIB/IDB for the multiplier factor for frequency values?\r\nb. are there sub-Hz channel spacing implementations?  Is 32-bit integer sufficient?\r\nc. is 32-bit integer sufficient?\r\nf. Data rate in bps or kbps as 32-bit integer for IDB/CIB, is a multiplier needed here as well?\r\n\r\n>     Capture / Measurement options\r\n>     a. RSSI in dBm as 1x 32-bit antenna index and 1x 32-bit float for EPB\r\n>     b. Channel index as 1x 16-bit uint for EPB\r\n\r\na. separate antennas could also be handled as separate interfaces but perhaps not for MIMO configuration?  So multiple instances of the RSSI option could appear in each EPB.\r\n\r\n> RSSI could be 2x 16-bit to save a 4 bytes, but, 32-bit floats are probably easier to deal with in most situations (unless you're missing an FPU). \r\n\r\nI agree with the first part... Is RSSI as float needed?\r\nDo any chipsets report RSSI in values other than integers?\r\nMost situations not involving low powered embedded network devices without an FPU.\r\nI would prefer to see values represented as integers where possible.\r\n\r\nAlso add for TDMA and TSCH channel access methods.\r\n1. slot number as 64-bit integer\r\n2. start of slot timestamp (separate from start of frame - which is packet timestamp) - same format an resolution as EPB timestamp (high & low).\r\n\r\n",
          "createdAt": "2018-12-20T19:40:07Z",
          "updatedAt": "2018-12-20T19:40:07Z"
        },
        {
          "author": "kismetwireless",
          "authorAssociation": "NONE",
          "body": "Re: per-antenna data and MIMO; we've already got 4 signal levels per packet\nfor some wifi cards now and it'll only get more complex.\n\nRight now, if I recall, radiotap handles this by appending additional\ncapabilities blocks w/ only the antenna signal filled out; generating\nmultiple records per packet in pcapng wouldn't be a problem.\n\nOn Thu, Dec 20, 2018 at 2:40 PM James Ko <notifications@github.com> wrote:\n\n> Since PR #51 <https://github.com/pcapng/pcapng/pull/51> is created for\n> the CIB options shall discussion on the EPB RF options continue in this\n> issue?\n>\n> Some comments to those specific options.\n>\n> Channel / Medium options\n> a. Frequency in Hz as 1x 32-bit float for EPB and IDB\n> b. Channel Spacing in Hz as 1x 32-bit float for IDB or EPB\n> c. Channel Bandwidth in Hz as 1x 32-bit float for IDB or EPB\n> d. Channel encoding as string for IDB or EPB\n> e. Channel name as string for IDB or EPB\n>\n> a. 32-bit is insufficient - even as an unsigned integer it wouldn't\n> represent frequency above ~4.295GHz (i.e. 5GHz band), perhaps an option in\n> CIB/IDB for the multiplier factor for frequency values?\n> b. are there sub-Hz channel spacing implementations? Is 32-bit integer\n> sufficient?\n> c. is 32-bit integer sufficient?\n> f. Data rate in bps or kbps as 32-bit integer for IDB/CIB, is a multiplier\n> needed here as well?\n>\n> Capture / Measurement options\n> a. RSSI in dBm as 1x 32-bit antenna index and 1x 32-bit float for EPB\n> b. Channel index as 1x 16-bit uint for EPB\n>\n> a. separate antennas could also be handled as separate interfaces but\n> perhaps not for MIMO configuration? So multiple instances of the RSSI\n> option could appear in each EPB.\n>\n> RSSI could be 2x 16-bit to save a 4 bytes, but, 32-bit floats are probably\n> easier to deal with in most situations (unless you're missing an FPU).\n>\n> I agree with the first part... Is RSSI as float needed?\n> Do any chipsets report RSSI in values other than integers?\n> Most situations not involving low powered embedded network devices without\n> an FPU.\n> I would prefer to see values represented as integers where possible.\n>\n> Also add for TDMA and TSCH channel access methods.\n>\n>    1. slot number as 64-bit integer\n>    2. start of slot timestamp (separate from start of frame - which is\n>    packet timestamp) - same format an resolution as EPB timestamp (high & low).\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pcapng/pcapng/issues/48#issuecomment-449113098>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AVScY_a6DglHyJQWS-gLUfSyQ0duZGSkks5u6-eZgaJpZM4QbL0b>\n> .\n>\n",
          "createdAt": "2018-12-20T19:58:45Z",
          "updatedAt": "2018-12-20T19:58:45Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Right now, if I recall, radiotap handles this by appending additional capabilities blocks w/ only the antenna signal filled out;\r\n\r\nYes.\r\n\r\n> generating multiple records per packet in pcapng wouldn't be a problem.\r\n\r\nPresumably, by analogy to what radiotap does, you mean \"generating multiple options per packet block in pcapng wouldn't be a problem\".",
          "createdAt": "2018-12-20T20:09:56Z",
          "updatedAt": "2018-12-20T20:09:56Z"
        },
        {
          "author": "kismetwireless",
          "authorAssociation": "NONE",
          "body": "Yep; sorry for being imprecise.  Appending an option block per antenna\nshould be fine.\n\nHaving an antenna number may be useful in each block, rather than iterating\nthem; I don't know of any cards currently which report non-sequential\nantennas but there's always surprises.\n\nOn Thu, Dec 20, 2018 at 3:09 PM Guy Harris <notifications@github.com> wrote:\n\n> Right now, if I recall, radiotap handles this by appending additional\n> capabilities blocks w/ only the antenna signal filled out;\n>\n> Yes.\n>\n> generating multiple records per packet in pcapng wouldn't be a problem.\n>\n> Presumably, by analogy to what radiotap does, you mean \"generating\n> multiple options per packet block in pcapng wouldn't be a problem\".\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pcapng/pcapng/issues/48#issuecomment-449121096>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AVScY9gaVDB9p-N-wdUQSVuzIwBPWjaqks5u6-6VgaJpZM4QbL0b>\n> .\n>\n",
          "createdAt": "2018-12-20T20:12:07Z",
          "updatedAt": "2018-12-20T20:12:07Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "I agree.. multiple rssi (antenna#/dBm) blocks rather than \"list\" of dBm with number of antennas derived from the option length.\r\n\r\nAdditionally, an End of Frame Timestamp (EOF) for time-slotted access methods is desirable since a packet transmission may overflow the timeslot length.",
          "createdAt": "2018-12-20T20:49:41Z",
          "updatedAt": "2018-12-20T20:49:41Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "On your first set of comments, for all of those I suggested using an [IEEE standard 32-bit float](https://en.wikipedia.org/wiki/Single-precision_floating-point_format#IEEE_754_single-precision_binary_floating-point_format:_binary32), not a 32-bit integer, which should comfortably store all the values we might require. \r\n\r\nI think given their prevalence even on embedded systems nowdays it makes sense to use an floats rather than come up with our value / exponent encoding. Should you not have an FPU many of these values could be pre-computed at startup or compile time.\r\n\r\nFor RSSI, if you're playing with localisation there's a big difference between -10dBm and -10.5dBm, and simulations can have arbitrary _accuracy_, so again I would personally rather see floats.\r\n\r\n> I agree.. multiple rssi (antenna#/dBm) blocks rather than \"list\" of dBm with number of antennas derived from the option length.\r\n\r\nSeems like a good approach ^_^ also means you can elide antennas if the packet wasn't seen on them.\r\n\r\n",
          "createdAt": "2018-12-24T10:14:06Z",
          "updatedAt": "2018-12-24T10:14:06Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "MDU6SXNzdWUyNzk4NzQyOTA=",
      "title": "Release the RFC into public domain",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/49",
      "state": "OPEN",
      "author": "KOLANICH",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hello. I'm creating a derivative work based on the RFC (more precisely I have translated most of the spec (not quite fully, some features are missing because of limitations of present KS) into Kaitai Struct language, but I wanna insert there the comments copied from the RFC and modify some of them to fit better). As I understand, the copyrights on the RFC make it illegal to insert and modify the quotes from it. So I wonder if copyright holders could release this into public domain, so it to be legal to do the needed things.",
      "createdAt": "2017-12-06T19:19:16Z",
      "updatedAt": "2020-02-10T11:01:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> As I understand, the copyrights on the RFC make it illegal to insert and modify the quotes from it.\r\n\r\nThe copyright notice says:\r\n\r\n> This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document.\r\n\r\nSo are you referring to the \"to copy, publish, display and distribute unmodified portions of IETF Contributions and IETF Documents and translations thereof\" part of the \"Licenses For Use Outside the IETF Standards Process.\" section of [version 5 of the Legal Provisions Relating to IETF Documents](https://trustee.ietf.org/documents/IETF-TLP-5_001.html), which allows stuff to be copied, but not modified?\r\n\r\nThe copyright is a bit strange because the document has not yet been made an Internet-Draft, so I'm not sure it's *really* copyright by the IETF Trust yet.\r\n\r\n> So I wonder if copyright holders could release this into public domain\r\n\r\nNot if we ever turn it into an Internet-Draft or an RFC, as I think the IETF Trust will insist on their legal provisions applying.\r\n\r\n> so it to be legal to do the needed things.\r\n\r\nI suspect you can figure out some other way to add the comments; \"fit better\" is different from \"fit at all\".  You may have to add additional framing information, but I think the KSL version will survive the process.",
          "createdAt": "2017-12-06T20:38:40Z",
          "updatedAt": "2017-12-06T20:38:40Z"
        },
        {
          "author": "q2dg",
          "authorAssociation": "NONE",
          "body": "Well...august is expiration time, so ...",
          "createdAt": "2020-02-10T11:01:35Z",
          "updatedAt": "2020-02-10T11:01:35Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWUzNDk2NDY4NzE=",
      "title": "Custom link-layer types, similar to custom blocks and options",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/52",
      "state": "OPEN",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There's at least one pcapng user who wants to be able to support proprietary fieldbus protocols in their captures but don't want to register them as official link-layer header types (apparently, that might involve revealing the *names* of the protocols, and the protocols are *so* proprietary that even *that's* not acceptable).\r\n\r\nAnd some vendors have their own protocols and resell equipment from vendors who have other such protocols, so they can't all be assigned, for example, `LINKTYPE_USER1`.\r\n\r\nI can see others wanting to have proprietary unregistered protocols and give them an identifier guaranteed to be unique.\r\n\r\nSo perhaps we should support custom link-layer types, identified, like custom blocks and options, by a Private Enterprise Number and a per-enterprise identifier.\r\n\r\nA couple of ways of implementing this are:\r\n\r\n1. Reserve a LinkType value of 0xFFFF in an IDB for custom link-layer types, and require an IDB with that link-layer type to have a new \"custom link-layer type\" option, containing a PEN and a 32-bit per-enterprise identifier.\r\n\r\n1. Add a new \"Custom Interface Description Block\" (name subject to revision if that's a stupid name), with most of the same fields, and all of the same options, as an IDB, but with the LinkType and Reserved fields replaced by a PEN and a 32-bit per-enterprise identifier.",
      "createdAt": "2018-08-10T20:26:03Z",
      "updatedAt": "2018-08-18T11:21:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both implementations are good ways to do this (\"Custom IDB\" sounds good, maybe \"Private IDB\" would work, too), but if I'd have to choose I'd slightly favor implementation 1 if only to keep the numbers of different block types small. But I'm also not against implementation 2. \r\n",
          "createdAt": "2018-08-18T11:21:44Z",
          "updatedAt": "2018-08-18T11:21:44Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWU0MDk2MzQ5OTI=",
      "title": "Many pcapng implementations got the bit order for epb_flags backwards",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/57",
      "state": "CLOSED",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[Section 4.3.1 \"Enhanced Packet Block Flags Word\" of the pcapng spec](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii#rfc.section.4.3.1) says:\r\n\r\n> The word is encoded as an unsigned 32-bit integer, using the endianness of the Section Header Block scope it is in. In the following table, the bits are numbered with 0 being the most-significant bit and 31 being the least-significant bit of the 32-bit unsigned integer.\r\n\r\nwith bits 0 and 1 being the packet direction.\r\n\r\nThat appears to indicate that the direction field is at the *top* of the flags word, so that, for example an inbound packet, with the FCS length field zero, the reception type unknown, and no link-layer-dependent error, would have a flags word of 0100 0000 0000 0000 0000 0000 0000 0000, or 0x40000000.\r\n\r\nHowever:\r\n\r\n- macOS treats the low-order bit as bit 0 in libpcap and tcpdump, so that such a packet would have a flags word of 0x00000001;\r\n- Wireshark's text2pcap program, which converts various text dumps to pcap or pcapng, can parse a \"packet preamble\" in which \"i\" or \"I\" stands for \"incoming\" and \"o\" or \"O\" stands for \"outgoing, and it treats the low-order bit as bit 0, so such a packet would have a flags word of 0x00000001;\r\n- Wireshark's pcapng-reading code assumes the FCS is in bits 8-5, with bit 0 being the low-order bit;\r\n\r\nso there are, depending on whether you consider the two pieces of Wireshark code as one implementation or two (they were done by different people, but maybe the person who made the text2pcap changes was influenced by my screwup in the pcapng reading code), two or three implementations of pcapng that treat bit 0 as the low-order bit.\r\n\r\nThere may be, or have been, *another* implementation that did so; the capture attached to [Wireshark bug 11665](https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=11665) has ISDN LAPD packets in it, and the direction field at the bottom of the flags field has a value of 1 for network->user packets and 2 for user->network packets, which would make sense if the machine on which the capture was being done was \"terminal equipment\" (or whatever the right ISDN term is), i.e. if it's the \"user\".\r\n\r\nI don't know whether there are any implementations that treat bit 0 as the high-order bit.  None of the pcapng files I have on hand appear to do so - they all seem to have that information in the low-order bits.\r\n\r\nSo, whilst I *really* hate to do this, would the least bad solution be to change the spec to say that bit 0 is the *low*-order bit?\r\n\r\nIf there truly are *no* implementations that treated it as the high-order bit, that would work, with the risk that somebody develops a 0-is-the-high-order-bit implementation based on the current or earlier state of the specification.\r\n\r\nIf there are only *private, internal* implementations that do so, that would cause pain to some unknown number of implementors, but they wouldn't have to worry about the general user base of programs that handle (or that will handle in the future) the flags field.\r\n\r\nIf there are *public* implementations that do so, we may be stuck with heuristics, as there are also public implementations that treat bit 0 as the low-order bit; as long as nobody used the \"link-layer-dependent flags\" part of the flags field, we could treat any flags word with the upper 16 bits non-zero as coming from a \"bit 0 as the high-order bit\" implementation and any flags word with the lower 16 bits non-zero as coming from a \"bit 0 as the low-order bit\" implementation.  If both are zero, it obviously doesn't matter; if both are non-zero, that'll need more heuristics, and they'd be more likely to fail.",
      "createdAt": "2019-02-13T05:34:53Z",
      "updatedAt": "2019-03-02T07:45:36Z",
      "closedAt": "2019-03-02T07:45:36Z",
      "comments": [
        {
          "author": "AndersBroman",
          "authorAssociation": "NONE",
          "body": "I'd vote for changing the spec at this stage.",
          "createdAt": "2019-02-13T06:13:03Z",
          "updatedAt": "2019-02-13T06:13:03Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Note, for what it's worth, that:\r\n\r\n- The only instruction sets I could find in the set of common instruction sets supporting UN\\*X for which the documentation numbers the high-order bit as bit 0 are PowerPC/Power ISA, System/3x0-and-z/Architecture,  and PA-RISC - the documentation for x86, ARM, SPARC, MIPS, Alpha, Itanium, and 68k all number the low-order bit as bit 0.  Thus, if you miss the explicit \"bit 0 is the high-order bit\" note, you might think of bit 0 as being the low-order bit.\r\n\r\n- The C bit-shifting operators fit a bit more cleanly with the low-order bit being 0 - if you want to extract a field in bits *M* through *N* (*M* <= *N*) using shifts and masks, if the low-order bit is 0, you shift right *M* bits and then mask, but if the high-order bit is 0, you shift a *K*-bit word right *K* - *M* - 1 bits.  This might also contribute to assuming that bit 0 is the low-order bit.\r\n\r\n- The implementations that got the bit numbering backwards may have been done independently. The first such implementation that I know of was the one I put into pcapng to extract the FCS length field; that was the only field it extracted, so, unless you were looking at the \"fetch the FCS length\" code *and* extrapolated from there to \"the reception type is below that, and the direction is below *that*\", you probably didn't get \"the direction is in the lower 2 bits\" from there.\r\n\r\nSo this *somewhat* suggests that it's not inconceivable that still others may have made the same error.",
          "createdAt": "2019-02-13T06:37:45Z",
          "updatedAt": "2019-02-13T06:37:45Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "A quick look at the [pktdump](https://launchpad.net/pktdump) source (I'm not sure how to get the full source, but I managed to see a code diff that showed code looking at the EPB flags field) indicates that it also treats bit 0 as the low-order bit.",
          "createdAt": "2019-02-14T05:53:20Z",
          "updatedAt": "2019-02-14T05:53:20Z"
        },
        {
          "author": "grimbeaver",
          "authorAssociation": "NONE",
          "body": "For what it's worth I can tell you that when I implemented the (limited) support of pcapng in Viavi Solutions Observer I know I did not implement the epb_flags and I doubt anyone has gone back and added it since I left.",
          "createdAt": "2019-02-14T12:19:33Z",
          "updatedAt": "2019-02-14T12:19:33Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just checked the TraceWrangler pcapng loading code, and I do a \"AND 0x03\" operation to get the direction flags, so if I'm not mistaken I do the same as the others, meaning 0x00000001 for an inbound packet. \r\n\r\nI say let's do the spec change,  as the risk of breaking existing other implementation seems low, especially since packet those flags are not mission critical under most circumstances I guess. \r\n\r\nGood job spotting this, @guyharris !",
          "createdAt": "2019-02-14T17:04:13Z",
          "updatedAt": "2019-02-14T17:04:13Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, changed the spec in 3c35b6abf9171e767e4b2470e691c22346b7105e to match reality.",
          "createdAt": "2019-03-02T03:05:16Z",
          "updatedAt": "2019-03-02T03:05:16Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU0MTAxMzUwMTI=",
      "title": "Some issues with the Interface Statistics Block",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/58",
      "state": "OPEN",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue 1:\r\n\r\nThe ISB has a time stamp, but it just says that it's the \"time this statistics refers to\", without indicating in what way a set of statistics refers to a particular time.\r\n\r\nI *suspect* the intent was \"the time as of which these values were current\", i.e. that a program writing a capture would fetch statistics it hasn't been maintaining itself and would then write out an ISB with the current date/time as the time stamp.\r\n\r\nIssue 2:\r\n\r\nThere are options in the ISB for the capture start and end time.  If you have an ISB with a capture start and end time, followed by more packet blocks, what does that mean?  If there are more packets, obviously either 1) the capture hasn't stopped on the interface in question or 2) somebody added more packets to the end.\r\n\r\nWe might want to indicate that only an ISB that follows all packet blocks for the interface in question should have the end time specified - and that, if you write out ISBs before the capture stops on that interface, if any of them have a capture start time, all the capture start time values should be the same for that interface.",
      "createdAt": "2019-02-14T05:31:14Z",
      "updatedAt": "2019-02-14T05:31:14Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWU0MTY0OTk1ODg=",
      "title": "Is the if_fcslen option in the Interface Description Block in units of bits or bytes?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/60",
      "state": "OPEN",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[The Interface Description Block description in the pcapng specification](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii#rfc.section.4.2) says that the `if_fcslen` option's value for the FCS length is in units of bits.\r\n\r\nWireshark, however, treats it as if it's in units of bytes.\r\n\r\nAre there any programs that write out an `if_fcslen` option in the Interface Description Block?  If so, does they write it out in units of bits or bytes?",
      "createdAt": "2019-03-03T10:25:53Z",
      "updatedAt": "2023-11-09T08:48:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "antcodd",
          "authorAssociation": "NONE",
          "body": "There is some code in Wireshark erf.c that sets OPT_IDB_FCSLEN from ERF Provenance metadata to the number of bits, but it doesn't look like Wireshark actually writes this option out to PCAPNG. The only place it is currently displayed is in capinfos output. I was surprised to see that wireshark doesn't actually use the if_fcslen for setting the linktype's FCS automatically for non-pcap(ng), might explain why we've had trouble with detecting FCS in ERF in the past.\r\n\r\nIs there any code that writes if_fcslen for Wireshark to have read? It looks like neither Wireshark nor libpcap do. Endace's dagconvert pcapng I/O module also currently doesn't. Libtrace (which doesn't seem to be in the known implementations list) only recently added PCAPNG write support and it appears to currently be passed through, although they're working on a metadata api. Not familiar with the other implementations. I would have thought specifying FCS would have been one of the most common options to specify after name and timestamp resolution since it affects the way the file is read, rather than guesswork.",
          "createdAt": "2019-03-04T00:47:48Z",
          "updatedAt": "2019-03-04T00:47:48Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> There is some code in Wireshark erf.c that sets OPT_IDB_FCSLEN from ERF Provenance metadata to the number of bits, but it doesn't look like Wireshark actually writes this option out to PCAPNG.\r\n\r\nCurrently, it doesn't.\r\n\r\n> The only place it is currently displayed is in capinfos output. I was surprised to see that wireshark doesn't actually use the if_fcslen for setting the linktype's FCS automatically for non-pcap(ng), might explain why we've had trouble with detecting FCS in ERF in the past.\r\n\r\nIt saves if_fcslen in the per-file private structure - it's initialized to -1 and set if there's an if_fcslen option - and, for an EPB or PB, it starts out assuming the FCS is the value of if_fcslen and, if there's an epb_flags of pack_flags option with a non-zero FCS length, overrides the default with that value.\r\n\r\nThat value is set in the pseudo-header structure for WTAP_ENCAP_ETHERNET, and that value is used; it's not provided for any other link-layer type.\r\n\r\n> Is there any code that writes if_fcslen for Wireshark to have read? It looks like neither Wireshark nor libpcap do.\r\n\r\n*Shark don't; tcpdump.org libpcap doesn't write pcapng files, and I don't see any code in the last open-source version of Apple's libpcap to indicate that it writes any IDB options.\r\n\r\n> Endace's dagconvert pcapng I/O module also currently doesn't. Libtrace (which doesn't seem to be in the known implementations list) only recently added PCAPNG write support and it appears to currently be passed through, although they're working on a metadata api.\r\n\r\nI couldn't see anything in libtrace that would write it.\r\n\r\n> Not familiar with the other implementations. I would have thought specifying FCS would have been one of the most common options to specify after name and timestamp resolution since it affects the way the file is read, rather than guesswork.\r\n\r\nUnfortunately, it won't affect Wireshark correctly if it's written according to the current spec - the value from if_fcslen isn't divided by 8 to convert from bits to bytes, and it's provided as the FCS length in the Ethernet pseudo-header, but the Ethernet dissector expects it to be in units of bytes, not bits.\r\n",
          "createdAt": "2019-03-04T10:20:13Z",
          "updatedAt": "2019-03-04T10:20:13Z"
        },
        {
          "author": "Qtsho",
          "authorAssociation": "NONE",
          "body": "Hello everyone,\r\nare there any updates on this concern? \r\nwe also have a commercial tool that export pcapng file and write the if_fcslen block in IDB as bit unit. This would cause problem at Wireshark side at ethernet dissector.\r\n\r\n",
          "createdAt": "2023-06-27T14:20:53Z",
          "updatedAt": "2023-06-29T11:02:56Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Code that reads pcapng files can probably infer whether a given FCS length value makes sense as a value in bits or a value in bytes, so perhaps:\r\n\r\n- the spec should say that readers SHOULD treat obviously-too-small FCS length values as if they are in bytes;\r\n- Wireshark should be changed to do that and treat other values is being in bits, and that change should be backported to Wireshark releases going back to 3.6.",
          "createdAt": "2023-11-01T19:09:28Z",
          "updatedAt": "2023-11-01T19:09:28Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> There is some code in Wireshark erf.c that sets OPT_IDB_FCSLEN from ERF Provenance metadata to the number of bits\r\n\r\nSo ERF_META_TAG_fcs_len is in units of bits?\r\n\r\n(And how can I get a copy of EDM04-42 Provenance Guide, so that I don't have to ask about Provenance metadata tags?)",
          "createdAt": "2023-11-01T23:42:23Z",
          "updatedAt": "2023-11-01T23:42:23Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Wireshark should be changed to do that and treat other values is being in bits, and that change should be backported to Wireshark releases going back to 3.6.\r\n\r\nDone.",
          "createdAt": "2023-11-09T08:48:12Z",
          "updatedAt": "2023-11-09T08:48:12Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWU0Mjk2OTUwNzY=",
      "title": "question how to timestamp end of packet",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/61",
      "state": "OPEN",
      "author": "horsth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there a way in the pcapng format to provide a second timestamp for a packet?\r\nI am looking at an RS485 UART serial protocol. Packets can have different BAUD rates and different delays between single Bytes. For analysing the protocol it is important to know the time gap between the end of one packet and the start of the next packet. So my question is whether a standard way exists in pcapng to have a second timestamp in a packet for the end of transmission.\r\n",
      "createdAt": "2019-04-05T10:49:10Z",
      "updatedAt": "2019-04-07T04:13:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "There isn't a standard way to do that.\r\n\r\nThe pcapng format doesn't explicitly indicate what the timestamp represents; it just speaks of it as a timestamp.\r\n\r\nAnd many of the capture mechanisms that provide packets to put into pcapng files don't specify that, either; packets are typically captured on network interfaces managed by the host OS's networking stack, and the timestamp of a packet is the time at which the part of the network interface that adds timestamps to packets sees the packet.  This can be - and usually *is* - some unknown amount of time after the last bit of the packet reached the network adapter when receiving packets.  When the packet is sent by the host doing the packet capture, it's some unknown amount of time *before* the first bit of the packet is transmitted by the network adapter.\r\n\r\nIf your protocol will require a new LINKTYPE_/DLT_ value to put it in a pcapng (or pcap) file, I would suggest having the packets begin with a pseudo-header giving *both* the start time *and* the end time of the packet, unless you choose to make one of those times be the timestamp in the pcapng EPB.",
          "createdAt": "2019-04-07T04:13:21Z",
          "updatedAt": "2019-04-07T04:13:21Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWU0NzczMTk0NTY=",
      "title": "SHB: replace byte order magic with two different block-IDs",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/63",
      "state": "CLOSED",
      "author": "prauscher",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I might miss something here, but the parsing of an SHB is specifically hard due to the byte order being contained after the block length.\r\nSo how about we introduce two new BlockTypes, such as LitteEndianSectionHeaderBlock (0x0a1b2c3d) and BigEndianSectionHeaderBlock (0x3d2c1b0a). Both Blocks would have the same design as the current SHB, but without the byte order magic.",
      "createdAt": "2019-08-06T11:14:04Z",
      "updatedAt": "2019-08-06T18:31:27Z",
      "closedAt": "2019-08-06T18:28:02Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Unfortunately, any file written by a program using the new block types would be unreadable by all versions of 1) programs using libpcap, 2) any of the programs shipped with Wireshark that read capture files, or 3) any *other* code reading pcapng files, until new versions of that software is released, and even *then* the software would have to be upgraded to the new version.\r\n\r\nThat would be an *extremely* disruptive change from the point of view of users.\r\n\r\nIt's not *that* painful to read an SHB.\r\n\r\nIf you're reading the first SHB in order to determine whether the file is a pcapng file or not, note that an SHB must be at least 12 bytes long.  Try to read the first 12 bytes; if the file doesn't have 12 bytes, it's not a pcapng file.  Otherwise, if the first 4 bytes are an SHB block type, and the third 4 bytes are a valid value of the byte-order magic number, it looks like an SHB; you now know the byte order, so you can convert the second 4 bytes to a block length.  If it's < 16, it's invalid, so it's either not an SHB, hence it's not a pcapng file, or it's a bad SHB, in which case it's an error; if it's >= 16, it's a valid SHB, so read the rest of the block.  Otherwise, it's not an SHB, so it's not a pcapng file.\r\n\r\nFor reading subsequent SHBs, you do the same, but treat \"not an SHB\" as an error.  You have to treat SHBs specially in any case, given that a section has its own byte order and its own set of interfaces.",
          "createdAt": "2019-08-06T18:28:02Z",
          "updatedAt": "2019-08-06T18:31:27Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "MDU6SXNzdWU1ODkwMjUxNTQ=",
      "title": "Questions about pcap draft",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/68",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`Major Version [...] The value for the current version of the format is 4.`\r\nWhy not current value `2` ?\r\n`Minor Version [...] The value is for the current version of the format is 0.`\r\nWhy not current value `4` ?\r\n",
      "createdAt": "2020-03-27T10:12:57Z",
      "updatedAt": "2020-03-27T10:53:25Z",
      "closedAt": "2020-03-27T10:53:25Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Copy-and-pasteo plus editing error.\r\n\r\nFixed in 82af116637539f30c40ac368d8a9e7141134d556.",
          "createdAt": "2020-03-27T10:48:35Z",
          "updatedAt": "2020-03-27T10:48:35Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "MDU6SXNzdWU1ODkwNTIzOTk=",
      "title": "Question about pcap draft",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/71",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Same URI two times in the generated text and pdf (not in html).\r\nShould be avoided?\r\n```\r\n11.2.  URIs\r\n\r\n   [1] http://www.tcpdump.org/linktypes.html\r\n\r\n   [2] http://www.tcpdump.org/linktypes.html\r\n```",
      "createdAt": "2020-03-27T10:59:59Z",
      "updatedAt": "2023-08-23T08:04:45Z",
      "closedAt": "2023-08-23T08:04:44Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I didn't see anything obvious in [RFC 7991](https://tools.ietf.org/html/rfc7991) to give an eref a name and to refer indirectly to a named eref; what you've come up with in #73 may be the best that can be done.",
          "createdAt": "2020-03-27T17:16:46Z",
          "updatedAt": "2020-03-27T17:16:46Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it solves also the problem of missing URIs references in generated HTML.",
          "createdAt": "2020-03-27T17:49:31Z",
          "updatedAt": "2020-03-27T17:49:31Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The generated HTML for pcapng draft has also missing URIs references like pcap one had before xref use.",
          "createdAt": "2020-03-27T19:21:41Z",
          "updatedAt": "2020-03-27T19:21:41Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> The generated HTML for pcapng draft has also missing URIs references like pcap one had before xref use.\r\n\r\nAs with pcap, so with pcapng; time for another pull request.",
          "createdAt": "2020-03-27T19:24:06Z",
          "updatedAt": "2020-03-27T19:24:06Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So is [the current generated HTML](https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html), as produced from extended Markdown, fixed, or does it still have those issues?",
          "createdAt": "2020-12-21T22:52:56Z",
          "updatedAt": "2020-12-21T22:52:56Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\r\n> So is [the current generated HTML](https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html), as produced from extended Markdown, fixed, or does it still have those issues?\r\n\r\nThe markdown generator has now fixed the hangIndent issue, if that's what you\r\nare referring to.\r\n\r\n",
          "createdAt": "2020-12-21T23:04:27Z",
          "updatedAt": "2022-03-05T23:17:14Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU1ODkzMTM5ODc=",
      "title": "About links \"View the pcapng draft\" as ...",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/76",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The last merge has removed :\r\n```\r\nThe Latest Draft\r\n\r\n    View the pcapng draft as HTML.\r\n\r\n    View the pcapng draft as Text.\r\n\r\n    View the pcapng draft as PDF.\r\n```\r\nfor pcapng in README.md.\r\n\r\nExpected?",
      "createdAt": "2020-03-27T18:08:21Z",
      "updatedAt": "2020-04-09T07:24:20Z",
      "closedAt": "2020-04-09T07:24:20Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I put those links back.",
          "createdAt": "2020-03-27T18:21:13Z",
          "updatedAt": "2020-03-27T18:21:13Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU1OTIzNzc0MTA=",
      "title": "Stale references to old repo location mcr/pcapng",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/83",
      "state": "CLOSED",
      "author": "lukem",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There's a few stale references to https://github.com/mcr/pcapng and https://mcr.github.io/pcapng in the tree.\r\nThe former can be replaced with https://github.com/pcapng/pcapng\r\nNot sure what to do about the latter.",
      "createdAt": "2020-04-02T05:56:03Z",
      "updatedAt": "2020-12-21T22:08:01Z",
      "closedAt": "2020-12-21T22:08:00Z",
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Partial fix with 19019ea6338099c7e75c125e789b8033dba7c62b.",
          "createdAt": "2020-04-09T09:34:51Z",
          "updatedAt": "2020-04-09T09:34:51Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be fixed now.\r\n",
          "createdAt": "2020-12-21T22:08:00Z",
          "updatedAt": "2020-12-21T22:08:00Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "MDU6SXNzdWU1OTczNzg2Mzg=",
      "title": "About PR #67 and files added",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/92",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The merge of PR #67 has added the files `draft-tuexen-opsawg-pcapng.txt` and `draft-tuexen-opsawg-pcapng.html`.\r\n\r\nExpected ?\r\n",
      "createdAt": "2020-04-09T15:49:25Z",
      "updatedAt": "2020-04-09T16:37:36Z",
      "closedAt": "2020-04-09T16:34:01Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Expected ?\r\n\r\nNo - I didn't even notice that.  I'll remove them.",
          "createdAt": "2020-04-09T16:34:01Z",
          "updatedAt": "2020-04-09T16:34:01Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in d6779400a3bbbdde77909e038c403128c5856eb7.",
          "createdAt": "2020-04-09T16:37:36Z",
          "updatedAt": "2020-04-09T16:37:36Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "MDU6SXNzdWU2MDI1OTE2OTc=",
      "title": "Current Committed Specs Links Broken",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/93",
      "state": "CLOSED",
      "author": "shaggygi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Are others seeing this?  Try link from main README...\r\n\r\nhttp://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=txt/pdf&type=ascii\r\n",
      "createdAt": "2020-04-19T01:16:32Z",
      "updatedAt": "2020-04-19T12:11:22Z",
      "closedAt": "2020-04-19T12:11:22Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "xml2rfc.tools.ietf.org appears to be down; we'll wait to see if it comes back up again.",
          "createdAt": "2020-04-19T03:10:29Z",
          "updatedAt": "2020-04-19T03:10:29Z"
        },
        {
          "author": "shaggygi",
          "authorAssociation": "NONE",
          "body": "Okay.  Looks like they are back online.  Thx",
          "createdAt": "2020-04-19T12:11:22Z",
          "updatedAt": "2020-04-19T12:11:22Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "MDU6SXNzdWU3NjgzNTY3NzY=",
      "title": "Stale document - https://pcapng.github.io/pcapng/",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/97",
      "state": "CLOSED",
      "author": "bubbasnmp",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Lazy googling \"pcapng file format\" returns https://pcapng.github.io/pcapng/ which is beautifully formatted and easy to read but out of date.",
      "createdAt": "2020-12-16T01:13:32Z",
      "updatedAt": "2020-12-21T22:51:17Z",
      "closedAt": "2020-12-21T22:51:17Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "@mcr, can we somehow arrange to have the Markdown converted either to RFC XML that we can feed to the RFC XML to xxx converters, or converted directly to HTML, so people who want to read the spec can get to a formatted document?",
          "createdAt": "2020-12-16T01:21:56Z",
          "updatedAt": "2020-12-16T01:21:56Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\n    > @mcr, can we somehow arrange to have the Markdown converted either to\n    > RFC XML that we can feed to the RFC XML to xxx converters, or converted\n    > directly to HTML, so people who want to read the spec can get to a\n    > formatted document?\n\nkramdown | xml2rfc -html\nis as easy as just \"xml2rfc -html\", so if we are actively doing something\nthen, we can just actively use markdown.\n\nIf you are asking if we can regularly commit a .html file, I do not object to\nthat at all.  That's trivial, but people hate having \"output\" in .github.\n\nThere is a github webhook that can be setup to have travis/circleci update the\ngh-pages branch which feeds the github.io.\nI can try to set that up next time I edit.\n\n\n",
          "createdAt": "2020-12-16T05:16:37Z",
          "updatedAt": "2020-12-16T05:16:37Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> There is a github webhook that can be setup to have travis/circleci update the\r\ngh-pages branch\r\n\r\n(Sigh, why did my parents give me the same initials as GitHub? :-))\r\n\r\n> which feeds the github.io.\r\n\r\nSo does that mean that the gh-pages branch of the pcapng/pcapng repository is a [\"publishing source\"](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites) for pcapng.github.io?\r\n\r\nAnd does that web hook mean that a CI run, done whenever something's committed to the pcapng/pcapng repository, would run kramdown | xml2rfc -html to generate HTML, and then commit that HTML to the gh-pages branch, or something such as that?\r\n\r\nOr does it do something else?",
          "createdAt": "2020-12-16T08:40:46Z",
          "updatedAt": "2020-12-16T08:40:46Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, so @mcr has set up the webhook, and the current version of the pcapng draft is [here](https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html).",
          "createdAt": "2020-12-21T22:51:17Z",
          "updatedAt": "2020-12-21T22:51:17Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "MDU6SXNzdWU3NzI0NTUxMTI=",
      "title": "broken links from pcapng README.md",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/98",
      "state": "CLOSED",
      "author": "laf0rge",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Most of the links linking to rendered versions of the draft fail:\r\n\r\n* \"Editor's Copy\" (https://mcr.github.io/pcapng/#go.draft-tuexen-opsawg-pcapng.html) is a 404\r\n* \"Current committed version as HTML\" (http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/pcapng/pcapng/master/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii) is 404\r\n* \"Currnet committed version as PDF\" and as Text equally are 404",
      "createdAt": "2020-12-21T20:53:16Z",
      "updatedAt": "2020-12-21T22:07:37Z",
      "closedAt": "2020-12-21T22:07:37Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think @mcr is working on some changes so that HTML pages (or XML pages that we can shove through xml2rfc.tools.ietf.org) can be generated from the now-in-extended-Markdown source for the draft.  I think the pages will end up on [GitHub Pages](https://pages.github.com).",
          "createdAt": "2020-12-21T21:48:10Z",
          "updatedAt": "2020-12-21T21:48:10Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "okay, circleci magic invoked, and it should rebuild everything now.\r\nThe pcap (legacy) hasn't been reposted to the IETF datatracker yet, so the diff links won't work yet.\r\n",
          "createdAt": "2020-12-21T22:07:37Z",
          "updatedAt": "2020-12-21T22:07:37Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU3NzQ5NDQxODA=",
      "title": "Current pcap draft doesn't include the link-type descriptions from https://www.tcpdump.org/linktypes/",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/101",
      "state": "OPEN",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some link-layer header types have descriptions that point to pages not hosted on www.tcpdump.org, e.g. the IEEE 802 specifications.  We can (and should) link to those in the table without problems.\r\n\r\nOthers have link-type descriptions that are currently hosted on www.tcpdump.org at https://www.tcpdump.org/linktypes/.  We can either 1) continue to provide them, and link to them, or 2) turn them into appendices of the specification and refer to them internally.",
      "createdAt": "2020-12-26T22:48:15Z",
      "updatedAt": "2020-12-26T22:48:15Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 102,
      "id": "MDU6SXNzdWU3NzQ5NDY5MjU=",
      "title": "Current pcap draft doesn't include all the link types",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/102",
      "state": "CLOSED",
      "author": "kayoub5",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current list of link types contains about 128 link types, unfortunately the list there is incomplete.\r\n* The link on [tcpdump website](https://www.tcpdump.org/linktypes.html) defines around 113 link types\r\n* [pcap-common.c](https://github.com/the-tcpdump-group/libpcap/blob/master/pcap-common.c) defines around 205 link types\r\n\r\nThe additional 90 or so link types already defined in `pcap-common.c` needs to be taken into consideration to prevent conflict.\r\n",
      "createdAt": "2020-12-26T23:17:04Z",
      "updatedAt": "2020-12-27T22:55:22Z",
      "closedAt": "2020-12-27T02:53:23Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> The additional 90 or so link types already defined in pcap-common.c needs to be taken into consideration to prevent conflict.\r\n\r\nValues in the range `DLT_MATCHING_MIN` to `DLT_MATCHING_MAX`, from `pcap/dlt.h`, are not available for assignment.\r\n\r\nWe can add \"reserved for\" entries for the ones that don't have specifications.",
          "createdAt": "2020-12-26T23:35:54Z",
          "updatedAt": "2020-12-26T23:35:54Z"
        },
        {
          "author": "kayoub5",
          "authorAssociation": "NONE",
          "body": "Sounds good.\r\n\r\nOne small detail, `DLT_MATCHING_MAX` will soon change due to https://github.com/the-tcpdump-group/libpcap/pull/934",
          "createdAt": "2020-12-27T00:06:46Z",
          "updatedAt": "2020-12-27T00:06:46Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "They should be there now.  Some ranges *are* marked as \"not to be used\".",
          "createdAt": "2020-12-27T02:52:38Z",
          "updatedAt": "2020-12-27T02:52:38Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "So, please don't stress about getting everything perfect.\nWe have to get the document adopted (or sponsored), and then have a\nconversation with IANA about how to transfer this large table.\n(They may prefer another format)\nNot that good data isn't better than bad data, I'm just saying: let's get the\nformat right.\n\n",
          "createdAt": "2020-12-27T22:55:22Z",
          "updatedAt": "2020-12-27T22:55:22Z"
        }
      ]
    },
    {
      "number": 104,
      "id": "MDU6SXNzdWU4NjMyNzM5MTA=",
      "title": "Change the type/code request point of contact?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/104",
      "state": "CLOSED",
      "author": "geraldcombs",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current pcapng specification tells users to request new block types, block option codes, and decryption secrets types from pcap-ng-format@winpcap.org. That's the last active mailing list on a server that's otherwise inactive and doesn't get much administrative attention.\r\n\r\nWould it make sense to change the point of contact to this repository, e.g. by telling users to create an issue or open a pull request?",
      "createdAt": "2021-04-20T21:53:46Z",
      "updatedAt": "2021-04-24T00:00:10Z",
      "closedAt": "2021-04-24T00:00:10Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.",
          "createdAt": "2021-04-20T23:38:52Z",
          "updatedAt": "2021-04-20T23:38:52Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "MDU6SXNzdWU5MDM4MTE2ODM=",
      "title": "pcap figure 1 --- Link Type",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/106",
      "state": "CLOSED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\n> I think bytes 20 through 24 of the File Header (Fig 1) are incorrect.  Perhaps you meant to have the LinkType field come first, at least for a little-endian machine?\r\n\r\nThe upper 32 bits of what was originally a 32-bit link-layer type field were stolen for FCS information (and, originally, other purposes that NetBSD had, but it no longer seems to use them for that purpose).\r\n\r\nSo if you view that field as a 32-bit value, with the bit on the right being the least-significant bit, and the bit on the left being the most-significant bit, that figure is correct.\r\n\r\nI.e., it's correct after the field is converted to host byte order.  In the file, that's not the case.\r\n\r\nIt should probably be described as a 32-bit link-layer type plus additional information field, so people know that it has to be converted to host byte order as a 32-bit quantity, with the subfields described below that.\r\n",
      "createdAt": "2021-05-27T14:05:46Z",
      "updatedAt": "2021-10-05T07:56:35Z",
      "closedAt": "2021-10-05T07:56:35Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by commit bdd3d5ba51a722bde4372c5f57c1dc29b02b4348.",
          "createdAt": "2021-10-05T07:56:35Z",
          "updatedAt": "2021-10-05T07:56:35Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "MDU6SXNzdWU5Mzk0NzUzNjA=",
      "title": "Pcapng Clarification question - is end of option need to be when there are no options",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/108",
      "state": "OPEN",
      "author": "rluvaton",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "If the option list is empty does code that writes pcapng files MUST put an `opt_endofopt` anyway?\n\n> The option list is terminated by a option which uses the special 'End of Option' code (opt_endofopt). Code that writes pcapng files MUST put an opt_endofopt option at the end of an option list. Code that reads pcapng files MUST NOT assume an option list will have an opt_endofopt option at the end; it MUST also check for the end of the block, and SHOULD treat blocks where the option list has no opt_endofopt option as if the option list had an opt_endofopt option at the end.\n>\n> from [Pcapng specification- options](https://www.ietf.org/id/draft-tuexen-opsawg-pcapng-03.html#name-options)",
      "createdAt": "2021-07-08T05:09:29Z",
      "updatedAt": "2023-01-22T21:18:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "If we have to write code that deals with the lack of an end of option, maybe we should just obsolete opt_endofopt?\r\n",
          "createdAt": "2021-07-08T15:11:45Z",
          "updatedAt": "2021-07-08T15:11:45Z"
        },
        {
          "author": "rluvaton",
          "authorAssociation": "NONE",
          "body": "I agree, I don't see additional value added to that option",
          "createdAt": "2021-07-08T16:14:25Z",
          "updatedAt": "2021-07-08T16:14:25Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I agree, I don't see additional value added to that option\r\n\r\nThat's because there is none.  At least for all existing blocks that support options, the options are at the end of the block, so the end of the options occurs when you run out of remaining data in the block, and there's no need for an end-of-options marker.  Furthermore, the spec explicitly says that *all* blocks must be structured that way:\r\n\r\n> A block that may contain options must be structured so that the number of octets of data in the Block Body that precede the options can be determined from that data; that allows the beginning of the options to be found. That is true for all standard blocks that support options; for Custom Blocks that support options, the Custom Data must be structured in such a fashion. This means that the Block Length field (present in the General Block Structure, see Section 3.1) can be used to determine how many octets of optional fields, if any, are present in the block. That number can be used to determine whether the block has optional fields (if it is zero, there are no optional fields), to check, when processing optional fields, whether any optional fields remain, and to skip all the optional fields at once.\r\n\r\nThe spec says\r\n\r\n> The option list is terminated by a option which uses the special 'End of Option' code (opt_endofopt). Code that writes pcapng files MUST put an opt_endofopt option at the end of an option list. Code that reads pcapng files MUST NOT assume an option list will have an opt_endofopt option at the end; it MUST also check for the end of the block, and SHOULD treat blocks where the option list has no opt_endofopt option as if the option list had an opt_endofopt option at the end.\r\n\r\nThe intent behind\r\n\r\n> Code that reads pcapng files MUST NOT assume an option list will have an opt_endofopt option at the end; it MUST also check for the end of the block, and SHOULD treat blocks where the option list has no opt_endofopt option as if the option list had an opt_endofopt option at the end.\r\n\r\nis to keep readers from doing something blatantly stupid such as running past the end of the block if the writer didn't put an end-of-option marker in the block.\r\n\r\nThe intent behind\r\n\r\n> Code that writes pcapng files MUST put an opt_endofopt option at the end of an option list.\r\n\r\nis to avoid having readers that would do something blatantly stupid such as running past the end of the block if the writer didn't put an end-of-option marker in the block actually *do* something stupid.  \"[Belt and suspenders](https://www.merriam-webster.com/dictionary/belt-and-suspenders)\", as the saying goes.\r\n\r\nAt least some software that writes blocks does not add an end-of-option marker if there are no options in the first place.  For example, neither Wireshark nor the pcapng-writing code in the macOS libpcap does so.\r\n\r\nAs such, it may be that, when reading a block with no options, some blatantly stupid code might well process the non-existent options until it either 1) gets a SIGSEGV, 2) scribbles on memory (by byte-swapping in place) that causes sufficient damage to cause a crash, or 3) hits a random blob of memory with 4 bytes of zero so that it looks like an end-of-option marker.\r\n\r\nHowever, there might be other code that's careful enough to find out how many bytes of option there are (which is enough information to prevent that form of blatant stupidity) but not careful enough to do anything with it other than\r\n\r\n    if (total_option_length != 0)\r\n        process_options(...);\r\n\r\nand then, in `process_options()`, assumes that there's an end-of-option marker.\r\n\r\nSo perhaps what we should do is change\r\n\r\n> Code that writes pcapng files MUST put an opt_endofopt option at the end of an option list.\r\n\r\nto\r\n\r\n> Code that writes pcapng files MAY put an opt_endofopt option at the end of an option list, to defend against careless code assuming that there's always an opt_endofopt option at the end of an option list.  If there are no options in a block, no opt_endofopt option need be written.\r\n\r\nWe'll continue to write it in Wireshark, at least for now, if any options are present.  If any pcapng-writing code is added to libpcap, should it write it, or is it time to flush out blatantly stupid code, and not put that into libpcap and eventually remove it from Wireshark?\r\n\r\nEDIT: Fixed 2023-01-22 to say \"is to avoid having *readers* that would do something blatantly stupid such as running past the end of the block if the writer didn't put an end-of-option marker in the block actually *do* something stupid\" rather than \"is to avoid having *writers* that would do something blatantly stupid such as running past the end of the block if the writer didn't put an end-of-option marker in the block actually *do* something stupid\".",
          "createdAt": "2021-07-08T17:59:21Z",
          "updatedAt": "2023-01-22T21:18:17Z"
        },
        {
          "author": "rluvaton",
          "authorAssociation": "NONE",
          "body": "Wow @guyharris, very comprehensive explanation.\n\nAfter what you said, I don't think you should remove the _end of options_ option if the option list isn't empty as it could potentially break parsing libraries that assume it exist.",
          "createdAt": "2021-07-08T22:47:46Z",
          "updatedAt": "2021-07-08T22:47:46Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "I_kwDOAU54e8479LNZ",
      "title": "Proposal to facilitate localization",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/109",
      "state": "OPEN",
      "author": "SxN02",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I would like to suggest an addition to _pcapng_, in the form of an IETF language tag, where it is applicable. First it came to mind to have it associated with the field _opt_comment_ (section 3.5), but then I realized that it may add value elsewhere too, so it should be, perhaps, part of block headers if it is relevant in blocks.\r\n\r\nThe reason for this addition is to point to the original language, giving (to applications rendering _pcapng_) information for on-the-fly translation. The language tags can be recognized as strings starting with a letter, ending in a letter and, optionally, having between start and end letters and/or dashes, but not consecutive dashes. A \"smart\" application may be capable of indexing and searching in both the original language and the target language.\r\n\r\nI believe it to be a very small addition and yet have an important contribution to future-proofing the format. Please share your thought on it.",
      "createdAt": "2021-09-23T22:16:55Z",
      "updatedAt": "2021-09-25T00:08:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "This would not apply to packet data, as the language that it's in is, from the point of view of pcapng, called \"raw binary\".\r\n\r\n*Some* data might *happen* to be text, but that data might carry its *own* language tags, such as [HTML language tags](https://www.w3.org/2005/05/font-size-test/starhtml-test.html).  *Those* tags, not any tag in the capture file, should indicate the language from which to translate.\r\n\r\nSo this would apply only to data defined as text *in the pcapng specification itself*.  Thus, it would currently apply to the opt_comment, custom string, shb_hardware, shb_os, shb_userappl, if_description, if_os, and if_hardware options.  It would *not* apply to:\r\n\r\n- the if_name option, as those are identifiers provided by or to the software to indicate an interface (\"en0\" is barely even in English - yes, \"en\" stands for \"Ethernet\", but I'm not even sure whether \"Ethernet\" is written in other languages as anything other than \"Ethernet\");\r\n- the if_filter option, as, if it's a pcap filter expression, it's a string supplied to libpcap, which requires \"port\" and \"host\" and \"and\" and \"or\" and... to be in English;\r\n- the ns_dnsname option, as it might not be in any human natural language either (\"foobar.dyndns.net\"?).\r\n\r\nNote also that there is no guarantee that all options in a block are in the *same* language; you might have an interface whose description was written in Simplified Chinese, with a hardware description in Traditional Chinese, about which comments in the capture file have been written in English and Russian.\r\n\r\nSo this might take the form of an option that, if it appears before another option, indicates the language of that option (doing nothing if the option is not one that's *in* a language).  I.e., it's a non-locking shift; a locking shift is another possibility.",
          "createdAt": "2021-09-23T22:38:02Z",
          "updatedAt": "2021-09-23T22:38:02Z"
        },
        {
          "author": "SxN02",
          "authorAssociation": "NONE",
          "body": "In terms of which text field would be a good candidate to localization and which not, with how I understand this format I would agree with the list above. Where I think we see it differently is in the language declaration via an HTML tag, which is useful in the complex example provided, but otherwise largely optional. Having a language declaration as a field would force writers to honour it accordingly, so, what a Canadian writer honours, an American reader can render as \"honors\", reliably, on the fly. HTML tags, of course, can override the field.",
          "createdAt": "2021-09-24T23:41:18Z",
          "updatedAt": "2021-09-24T23:41:18Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Where I think we see it differently is in the language declaration via an HTML tag, which is useful in the complex example provided, but otherwise largely optional.\r\n\r\nI didn't propose HTML tags for anything other than HTML data in packets in the capture, and all I noted there is that 1) it makes no sense to have a language tag for packet data, as the packet data is what it is, and it's either identified as such  in the data, in which case *that's* what should be used *if* an application translates HTML text in packets, or it's not identified as such, in which case it's not clear how it would be identified by options in the packet, especially given that a given Web page in a capture might be in *more than one language*.\r\n\r\nHTML tags simply wouldn't apply to text options in a pcapng block; there's no HTML there to even *contain* them, unless there's HTML in the capture, and even there, whatever random Web traffic you might have captured should not have any effect on a pcapng reader's notion of what language a comment attached to a packet is in.",
          "createdAt": "2021-09-25T00:08:40Z",
          "updatedAt": "2021-09-25T00:08:40Z"
        }
      ]
    },
    {
      "number": 113,
      "id": "I_kwDOAU54e85FKQDp",
      "title": "Is there any need to do CircleCI testing?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/113",
      "state": "OPEN",
      "author": "guyharris",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We have a GitHub action that builds the drafts and updates the corresponding GitHub Pages; does the CircleCi testing provide any benefits not provided by the GitHub action?\r\n\r\nCurrently, that action is failing with\r\n\r\n```\r\ngit -C /tmp/ghpages236 push -qf https://github.com/pcapng/pcapng gh-pages\r\nPassword for 'https://****************************************@github.com': make: *** [lib/ghpages.mk:123: ghpages] Hangup\r\n\r\nToo long with no output (exceeded 10m0s): context deadline exceeded\r\n```\r\n\r\nwhich looks suspiciously as if the command\r\n\r\n```\r\ngit -C $(GHPAGES_ROOT) push -qf https://$(GITHUB_PUSH_TOKEN)@github.com/$(GITHUB_REPO_FULL) gh-pages >/dev/null 2>&1\r\n```\r\n\r\nin lib/ghpages.mk is timing out because it's asking for a password and nobody supplies it with one.  This may be due to the push token being bogus, or something such as that.\r\n\r\nIt appears that the GitHub Pages *are* getting updated by the GitHub action, so having CircleCI doesn't appear to be necessary, unless I'm missing something.",
      "createdAt": "2022-03-05T10:55:02Z",
      "updatedAt": "2022-03-06T14:33:07Z",
      "closedAt": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Guy,\r\n\r\nI think it is only historic because there is no GitHub Actions on the origin of this repo...",
          "createdAt": "2022-03-06T14:33:07Z",
          "updatedAt": "2022-03-06T14:33:07Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOAU54e85FLPjw",
      "title": "Q: The FCS information in the PCAP file header in draft-ietf-opsawg-pcap-00",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/114",
      "state": "CLOSED",
      "author": "noriov",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hello,\r\n\r\nI'm new to PCAP and PCAPNG.  I'm writing a small routine to save\r\npackets in the PCAP file format.  I have a question regarding to\r\nthe FCS information in the PCAP file header described in\r\ndraft-ietf-opsawg-pcap-00.\r\n\r\nAccording to draft-ietf-opsawg-pcap-00, the FCS information is\r\nencoded as following.\r\n\r\n~~~~\r\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n    20 | FCS |f|0 0 0 0 0 0 0 0 0 0 0 0|         LinkType              |\r\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n~~~~\r\n\r\nBut, according to comments in wireshark/wiretap/libpcap.c (L.362-399),\r\nthe same field is encoded as following.\r\n\r\n~~~~\r\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n    20 |  FCS  |0|f|       Class       |         LinkType              |\r\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n~~~~\r\n\r\nThe macros and comments in libpcap/pcap/pcap.h (L.217 - 225) and\r\nlibpcap/pcap/dlt.h (L.1593 - 1610) also assumes the same format.\r\n\r\nI guess the authors and the working group decided not to describe the\r\n10-bit class field as some other fields are described as \"reserved\".\r\nSo, my question is about the format of the FCS information.\r\n\r\nIf my understanding above is correct, there are two formats to encode\r\nthe FCS information (i.e., 3-bit + 1-bit or 4-bit + 1-bit).  Is the\r\nformat being changed?  If so, is there a method to distinguish the\r\ndifference?  Is it possible to just ignore the existence of the FCS\r\ninformation?\r\n\r\nThank you.\r\n\r\n\r\np.s. References: (as of March 4, 2022)\r\nhttps://github.com/wireshark/wireshark/blob/master/wiretap/libpcap.c#L362\r\nhttps://github.com/the-tcpdump-group/libpcap/blob/master/pcap/pcap.h#L217\r\nhttps://github.com/the-tcpdump-group/libpcap/blob/master/pcap/dlt.h#L1593\r\nhttps://www.ietf.org/archive/id/draft-ietf-opsawg-pcap-00.txt\r\n",
      "createdAt": "2022-03-06T10:35:04Z",
      "updatedAt": "2022-03-06T20:59:01Z",
      "closedAt": "2022-03-06T20:57:55Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm new to PCAP and PCAPNG. I'm writing a small routine to save packets in the PCAP file format. I have a question regarding to the FCS information in the PCAP file header described in draft-ietf-opsawg-pcap-00.\r\n> \r\n> According to draft-ietf-opsawg-pcap-00, the FCS information is encoded as following.\r\n> \r\n> ```\r\n>        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>     20 | FCS |f|0 0 0 0 0 0 0 0 0 0 0 0|         LinkType              |\r\n>        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n\r\nThat is incorrect.  I have just checked in [a change to the spec to reflect reality](https://github.com/pcapng/pcapng/commit/4c281b0f5e2fa6d1bc8ad40af6e62af904e793ff).\r\n\r\n> But, according to comments in wireshark/wiretap/libpcap.c (L.362-399), the same field is encoded as following.\r\n> \r\n> ```\r\n>        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>     20 |  FCS  |0|f|       Class       |         LinkType              |\r\n>        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n> \r\n> The macros and comments in libpcap/pcap/pcap.h (L.217 - 225) and libpcap/pcap/dlt.h (L.1593 - 1610) also assumes the same format.\r\n\r\nThat is correct, except that the Class field no longer applies.  It was put in there for the benefit of something NetBSD was doing, where they had at least one link-layer type corresponding to \"raw\" link types, with the Class value being 0x224 and, if that's the Class value, the LinkType being a NetBSD `AF_` value.\r\n\r\nNetBSD appear to have dropped that notion, *and* pcapng has only a 16-bit LinkType field and no provision for those \"raw\" link types.  (If an option were added to the pcapng IDB to indicate a Class value, old code that doesn't know about the option will neither correctly interpret the LinkType value based on the Class value nor reject the file as having an unknown link-layer type; adding support for it would have to involve something such as an \"IDB for non-standard LinkType values\", so older software can at least reject it rather than misdissecting it.)\r\n\r\nSo...\r\n\r\n> I guess the authors and the working group decided not to describe the 10-bit class field as some other fields are described as \"reserved\".\r\n\r\n...I just marked that as reserved; it will probably remain reserved forever.  (Or, at least, until 2038, at which point pcap can't handle current time stamps.)\r\n\r\n> So, my question is about the format of the FCS information.\r\n> \r\n> If my understanding above is correct, there are two formats to encode the FCS information (i.e., 3-bit + 1-bit or 4-bit + 1-bit).\r\n\r\nThere's a format in a document that I constructed and misdescribed the FCS in, and there's a format that code actually uses, and that I updated the document on the GitHub site to describe.\r\n\r\nThe 3-bit + 1-bit is the first of those; the 4-bit + 1-bit is the one that code actually uses.\r\n\r\nIgnore the first of those, and follow the second of those.\r\n\r\n> Is the format being changed?\r\n\r\nNo, the document is being fixed.  The page at https://pcapng.github.io/pcapng/draft-ietf-opsawg-pcap.html now reflects the fix.\r\n\r\n> If so, is there a method to distinguish the difference?\r\n\r\nNo, but I know of no cases where the incorrect format is used, and the libpcap code for DAG cards uses the correct format (and at some point I'll probably check in a change to Wireshark to use the correct format - currently, Wireshark doesn't look at the FCS stuff in that field at all), so any code that uses the incorrect format will have to be fixed.\r\n\r\n> Is it possible to just ignore the existence of the FCS information?\r\n\r\nAs a reader, or as a writer?\r\n\r\nAs a writer, the correct way to ignore its existence is to make the upper 16 bits of that field zero; that means that the presence bit is 0, and readers will assume the FCS information isn't available.  That's also the correct thing to do if you truly don't know whether the packets have an FCS or not, or if, for example, incoming packets have them but outgoing packets don't.  (For a case such as that, you'd need to use pcapng - or, as with pcap, just rely on the dissector to try to guess whether there's an FCS or not, as Wireshark does.)",
          "createdAt": "2022-03-06T19:27:50Z",
          "updatedAt": "2022-03-06T19:27:50Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Note also that the draft you mentioned has a worse problem.  See #106, which was filed in response to some private email, the first message of which said:\r\n\r\n> Hi Guy and Michael,\r\n> \r\n> thanks for writing this draft, it will be good to finally have an RFC for this format.   A couple of comments below. \r\n> \r\n> I think bytes 20 through 24 of the File Header (Fig 1) are incorrect.  Perhaps you meant to have the LinkType field come first, at least for a little-endian machine?   Example:\r\n> \r\n> ```\r\n> # hexdump of little endian PCAP using Figure 1 formatting:\r\n> d4 c3 b2 a1\r\n> 02 00 04 00\r\n> 00 00 00 00\r\n> 00 00 00 00\r\n> ff ff 00 00\r\n> 00 00 01 00 \r\n> \r\n> # hexdump of little endian PCAP using https://wiki.wireshark.org/Development/LibpcapFileFormat formatting:\r\n> d4 c3 b2 a1\r\n> 02 00 04 00\r\n> 00 00 00 00\r\n> 00 00 00 00\r\n> ff ff 00 00\r\n> 01 00 00 00\r\n> ```\r\n\r\nand my response was:\r\n\r\n> > thanks for writing this draft, it will be good to finally have an RFC for this format.   A couple of comments below. \r\n> > \r\n> > I think bytes 20 through 24 of the File Header (Fig 1) are incorrect.  Perhaps you meant to have the LinkType field come first, at least for a little-endian machine?\r\n> \r\n> The upper 32 bits of what was originally a 32-bit link-layer type field were stolen for FCS information (and, originally, other purposes that NetBSD had, but it no longer seems to use them for that purpose).\r\n> \r\n> So if you view that field as a 32-bit value, with the bit on the right being the least-significant bit, and the bit on the left being the most-significant bit, that figure is correct.\r\n> \r\n> I.e., it's correct after the field is converted to host byte order.  In the file, that's not the case.\r\n> \r\n> It should probably be described as a 32-bit link-layer type plus additional information field, so people know that it has to be converted to host byte order as a 32-bit quantity, with the subfields described below that.\r\n\r\nwhich Michael quoted in the issue.\r\n\r\n[I changed the document to fix that](https://github.com/pcapng/pcapng/commit/bdd3d5ba51a722bde4372c5f57c1dc29b02b4348), but got it wrong, as you noticed.  It's good that the first token of the document's name is \"draft\". :-)",
          "createdAt": "2022-03-06T19:35:07Z",
          "updatedAt": "2022-03-06T19:35:07Z"
        },
        {
          "author": "noriov",
          "authorAssociation": "NONE",
          "body": "Thank you very much for your kind reply.\r\n\r\nI clearly understand the format of the FCS information.  And,\r\nthank you for the change.  I read your detailed description at\r\nhttps://github.com/pcapng/pcapng/commit/4c281b0f5e2fa6d1bc8ad40af6e62af904e793ff\r\n\r\nI think it was a hard task to describe the specification of the\r\nPCAP file format, because it has a long history and many variants.\r\nThank you very much for your incredible efforts.\r\n\r\nBecause I am new to the PCAP file format, what I can contribute\r\nto your work might be comments from newcomer's point of view.\r\nSo, here are three comments.\r\n\r\n * * *\r\n\r\n(1) Abbreviation and expanded form\r\n\r\nIn the current version in Github (as of March 4, 2022),\r\nthe abbreviation \"FCS\" appears\r\nwithout its expanded form \"Frame Cyclic Sequence\".\r\n\r\nIt would be helpful for readers to change the first use of\r\n\"FCS\" to \"Frame Cyclic Sequence (FCS)\".\r\n\r\n * * *\r\n\r\n(2) Supplementary figure\r\n\r\nAs you suggested in the second e-mail, endianness is often a source of\r\ncareless bugs.  To my shame, in an early version of my PCAP writer,\r\nI declared \"LinkType and additional information (32 bits)\" as\r\ntwo uint16 fields and got unexpected results.  (I'm using X86_64).\r\n\r\nAs a non-native English user, I should carefully read figures, bit\r\nnumbers, adjectives, prepositions, etc., to avoid misunderstanding.\r\nA couple of years ago, I wrote the following figure to understand\r\na format correctly.  This figure was a great help for me.\r\n\r\n~~~~\r\n * Segment Descriptor (64 bit)\r\n *\r\n * Format in LSB first (lower address first / lower bit first):\r\n *\t 0 1 2 3 4 5 6 7 8 9 A B C D E F 0 1 2 3 4 5 6 7 8 9 A B C D E F\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *\t|  Segment Limit (Bit 0 - 15)   |   Base Address (Bit 0 - 15)   |\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *\t| Base(16 - 23) | Type  |Flags_L|L 16-19|Flags_H| Base(24 - 31) |\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *\r\n * Format in MSB first (higher address first / higher bit first):\r\n *\t F E D C B A 9 8 7 6 5 4 3 2 1 0 F E D C B A 9 8 7 6 5 4 3 2 1 0\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *\t| Base(31 - 24) |Flags_H|L 19-16|Flags_L| Type  | Base(23 - 16) |\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n *\t|   Base Address (Bit 15 - 0)   |  Segment Limit (Bit 15 - 0)   |\r\n *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n~~~~\r\n\r\n(ref. https://en.wikipedia.org/wiki/Segment_descriptor )\r\n\r\nSo, I think a supplementary figure like following might be\r\na good help for non-native English speakers.\r\n\r\n~~~~\r\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n    |  FCS  |0|f|0 0 0 0 0 0 0 0 0 0|         LinkType              |\r\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n~~~~\r\n\r\n * * *\r\n\r\n(3) No padding\r\n\r\nTo my another shame, in an early version of my PCAP writer,\r\nI mistakenly put padding to a 32-bit boundary, and got unexpected\r\nresults.  The reason of my mistake was that my memory confused\r\nthe PCAP packet record format with the PCAPNG EPB format.\r\nPadding alignment is often an another source of careless bugs.\r\n\r\nIt may be a help for careless readers like me to add a note\r\nsaying \"no padding\" to the description of the Packet Data field\r\nin the packet record section.\r\n\r\n * * *\r\n\r\nThank you.\r\n",
          "createdAt": "2022-03-06T20:12:03Z",
          "updatedAt": "2022-03-06T20:12:03Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> (1) Abbreviation and expanded form\r\n> \r\n> In the current version in Github (as of March 4, 2022), the abbreviation \"FCS\" appears without its expanded form \"Frame Cyclic Sequence\".\r\n> \r\n> It would be helpful for readers to change the first use of \"FCS\" to \"Frame Cyclic Sequence (FCS)\".\r\n\r\nFrame Check Sequence, at least according to IEEE 802.3-2018, not Frame Cyclic Sequence (most Frame Check Sequences happen to be Cyclic Redundancy Check values, but that's not an absolute requirement for arbitrary FCSes, it's just how various protocols specify that an FCS is computed).\r\n\r\nI've added that in 19119c9d2d0b6441045fe52fbd3ce2b01c9e49dd.\r\n\r\n> (2) Supplementary figure\r\n> \r\n> As you suggested in the second e-mail, endianness is often a source of careless bugs. To my shame, in an early version of my PCAP writer, I declared \"LinkType and additional information (32 bits)\" as two uint16 fields and got unexpected results. (I'm using X86_64).\r\n> \r\n> As a non-native English user, I should carefully read figures, bit numbers, adjectives, prepositions, etc., to avoid misunderstanding. A couple of years ago, I wrote the following figure to understand a format correctly. This figure was a great help for me.\r\n> \r\n> ```\r\n>  * Segment Descriptor (64 bit)\r\n>  *\r\n>  * Format in LSB first (lower address first / lower bit first):\r\n>  *\t 0 1 2 3 4 5 6 7 8 9 A B C D E F 0 1 2 3 4 5 6 7 8 9 A B C D E F\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>  *\t|  Segment Limit (Bit 0 - 15)   |   Base Address (Bit 0 - 15)   |\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>  *\t| Base(16 - 23) | Type  |Flags_L|L 16-19|Flags_H| Base(24 - 31) |\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n\r\nThanks for cutting the field up like that, Intel! :-)\r\n\r\n>  ```\r\n>  * Format in MSB first (higher address first / higher bit first):\r\n>  *\t F E D C B A 9 8 7 6 5 4 3 2 1 0 F E D C B A 9 8 7 6 5 4 3 2 1 0\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>  *\t| Base(31 - 24) |Flags_H|L 19-16|Flags_L| Type  | Base(23 - 16) |\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>  *\t|   Base Address (Bit 15 - 0)   |  Segment Limit (Bit 15 - 0)   |\r\n>  *\t+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n> \r\n> (ref. https://en.wikipedia.org/wiki/Segment_descriptor )\r\n> \r\n> So, I think a supplementary figure like following might be a good help for non-native English speakers.\r\n> \r\n> ```\r\n>     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n>     |  FCS  |0|f|0 0 0 0 0 0 0 0 0 0|         LinkType              |\r\n>     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n\r\nI've done that in 3b121bcfe57918ef66202a7a5cd2b340d5433426; with the version of RFC markdown and XML we're using, we can't put that in the bulleted list of fields in the file header and, if we replaced the \"LinkType and additional information\" with that figure, we'd be back to where we were, when people could interpret the last 4 bytes of the file header as two 16-bit fields, so it took a bit of additional surgery, done in several commits.\r\n\r\n(The process of doing `make` on my machine required me to update some tools, and then failed with the same problem that the GitHub Actions for this repository were getting and that prevented the formatted versions of the drafts from getting updated.  I filed an issue cabo/kramdown-rfc#163 on kramdown-rfc, one of the tools I updated, and the maintainer filed pull request #112 to work around the kramdown-rfc issue and to remove some unneeded empty strings in the Markdown; the issue was that we needed to stop doing\r\n\r\n```\r\n   author:\r\n   - ins: ''\r\n     name: ''\r\n     org: The Tcpdump Group\r\n```\r\n\r\nand, instead, do\r\n\r\n```\r\n   author:\r\n   - org: The Tcpdump Group\r\n```\r\n\r\n.That, plus 914c61122df2fbee7dc502e66652f164bae30293, fixed the two problems that were causing the GitHub Action to fail, so the formatted versions of the draft are now getting updated again.\r\n\r\nThe problem with kramdown-rfc is that it crashes inside Ruby rather than telling the user what to fix in YAML in their Markdown document.  They fixed that, making kramdown-rfc print a warning rather crashing, in what will presumably be kramdown-rfc-1.6.4.  See cabo/kramdown-rfc@548db413004a0ce73da9afda77670c4da65cd1bc.\r\n\r\nThe CircleCI builds are still failing, probably because, when they attempt to push the documents to GitHub Pages, they run a Git command that includes a token that doesn't work, for some reason, so Git asks for a password but never gets it, so it eventually times out.\r\n\r\nI've filed an issue, #113, asking whether we need the CircleCI testing for any reason.)\r\n\r\n> (3) No padding\r\n> \r\n> To my another shame, in an early version of my PCAP writer, I mistakenly put padding to a 32-bit boundary, and got unexpected results. The reason of my mistake was that my memory confused the PCAP packet record format with the PCAPNG EPB format. Padding alignment is often an another source of careless bugs.\r\n> \r\n> It may be a help for careless readers like me to add a note saying \"no padding\" to the description of the Packet Data field in the packet record section.\r\n\r\nDone in 98a1e0567c24c396d08dc465a66f920c57e0c48e, with additional work in 776d05df20ed1cc15915fc6f37015a717e8fc693.\r\n",
          "createdAt": "2022-03-06T20:50:02Z",
          "updatedAt": "2022-03-06T20:57:11Z"
        },
        {
          "author": "noriov",
          "authorAssociation": "NONE",
          "body": "Thank you very much for all the changes you made to draft-ietf-opsawg-pcap,\r\nwireshark and libpcap.",
          "createdAt": "2022-03-06T20:59:01Z",
          "updatedAt": "2022-03-06T20:59:01Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOAU54e85Feyur",
      "title": "Possible typos (a -> an) in draft-ietf-opsawg-pcapng.md",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/115",
      "state": "CLOSED",
      "author": "noriov",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I found following three possible typos (a -> an).\r\nI'm sorry if I misunderstand English grammar.\r\n\r\n```\r\ndiff --git a/draft-ietf-opsawg-pcapng.md b/draft-ietf-opsawg-pcapng.md\r\nindex 3558bf7..166dd7d 100644\r\n--- a/draft-ietf-opsawg-pcapng.md\r\n+++ b/draft-ietf-opsawg-pcapng.md\r\n@@ -468,7 +468,7 @@ Block can give multiple IPv4 or IPv6 addresses for the\r\n interface if it has multiple IPv4 or IPv6 addresses assigned to\r\n it.  Other options may appear at most once in a given block.\r\n \r\n-The option list is terminated by a option which uses the\r\n+The option list is terminated by an option which uses the\r\n special 'End of Option' code (opt_endofopt).  Code that\r\n writes pcapng files MUST put an opt_endofopt option at the end\r\n of an option list.  Code that reads pcapng files MUST NOT assume\r\n@@ -898,7 +898,7 @@ file does not contain any blocks that use an Interface ID, then the\r\n file does not need to have any IDBs.\r\n \r\n An Interface Description Block is valid only inside the section\r\n-to which it belongs. The structure of a Interface Description Block is\r\n+to which it belongs. The structure of an Interface Description Block is\r\n shown in {{format_idb}}.\r\n \r\n \r\n@@ -1995,7 +1995,7 @@ The following is a list of Secrets Types.\r\n   little endian format. The PANID is followed by the 2 octet (16 bit)\r\n   short addresses, in little endian format, of the nodes to which\r\n   the APS Key applies. The numerically lower short address shall come\r\n-  first. There is a APS Key DSB for each node pair for which the\r\n+  first. There is an APS Key DSB for each node pair for which the\r\n   Link Key is known. As new links are formed, new DSBs contain the\r\n   new Keys. If the APS Key changes for an existing link, it is\r\n   contained in a new DSB with the new APS Key.\r\n```\r\n",
      "createdAt": "2022-03-10T20:45:02Z",
      "updatedAt": "2022-03-10T20:58:27Z",
      "closedAt": "2022-03-10T20:58:27Z",
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you. In the future, you can turn this into a pull request...",
          "createdAt": "2022-03-10T20:53:42Z",
          "updatedAt": "2022-03-10T20:53:42Z"
        }
      ]
    },
    {
      "number": 116,
      "id": "I_kwDOAU54e85JnYTE",
      "title": "IDB: Can it appear anywhere within a section?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/116",
      "state": "CLOSED",
      "author": "daviessm",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "From reading the spec I can't see whether all IDBs must appear immediately after the SHB or whether they can occur anywhere within a section. Can this be made explicit?",
      "createdAt": "2022-05-13T10:37:16Z",
      "updatedAt": "2022-05-13T11:15:50Z",
      "closedAt": "2022-05-13T11:15:50Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "[Section 3.4 \"Physical File Layout\"](https://pcapng.github.io/pcapng/draft-ietf-opsawg-pcapng.html#name-physical-file-layout) in [Figure 6](https://pcapng.github.io/pcapng/draft-ietf-opsawg-pcapng.html#fssample-full) gives as an example a file with an IDB that does *not* appear immediately after the SHB or after another IDB.\r\n\r\nI will add text to [section 4.2 \"Interface Description Block\"](https://pcapng.github.io/pcapng/draft-ietf-opsawg-pcapng.html#name-interface-description-block) text to explicitly indicate that the only restriction, within a section, on the location of IDBs is that an IDB for an interface must occur before any blocks that refer to that interface.",
          "createdAt": "2022-05-13T10:50:00Z",
          "updatedAt": "2022-05-13T10:50:34Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I will add text to [section 4.2 \"Interface Description Block\"](https://pcapng.github.io/pcapng/draft-ietf-opsawg-pcapng.html#name-interface-description-block) text to explicitly indicate that the only restriction, within a section, on the location of IDBs is that an IDB for an interface must occur before any blocks that refer to that interface.\r\n\r\nDone in 96a3afd74773307ca1892e87954891bd177ecd3f.",
          "createdAt": "2022-05-13T11:15:50Z",
          "updatedAt": "2022-05-13T11:15:50Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "I_kwDOAU54e85LbrPY",
      "title": "Clarification: Purpose of if_tsresol to support powers or 2",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/117",
      "state": "CLOSED",
      "author": "unmanned-player",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The interface description block has an option (`if_tsresol`) that lets you set timestamp resolution. That value seems to be quite involved. In that, it can also support timestamps as powers of 2.\r\n\r\nAre there any operating systems, devices or clocks that can produce timestamps in powers of 2? I reckon, RFC document could benefit from clear rationale for rare resolutions like these.",
      "createdAt": "2022-06-09T03:32:53Z",
      "updatedAt": "2022-06-10T04:27:49Z",
      "closedAt": "2022-06-10T04:27:49Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "[The earliest pcapng draft I can find](https://web.archive.org/web/20050430075233/http://www.tcpdump.org/pcap/pcap.html) - dated April 2004, although it's from an April 2005 Wayback Machine archive - has both power-of-10 and power-of-2 time stamp support, but gives no rationale.\r\n\r\nIt may have been a \"just in case, so that, if we ever need it, we don't have to introduce a feature that older code doesn't support and ''couldn't'' support as it didn't exist before we introduced it\" idea.  I can see if any of the original developers of pcapng know what the rationale was.\r\n\r\n> Are there any operating systems, devices or clocks that can produce timestamps in powers of 2?\r\n\r\nEndace's DAG API, for their DAG cards, appears to provide a 64-bit time stamp in units of 2^-32 seconds.",
          "createdAt": "2022-06-09T06:16:45Z",
          "updatedAt": "2022-06-09T06:16:45Z"
        },
        {
          "author": "unmanned-player",
          "authorAssociation": "NONE",
          "body": "Thanks for the quick response.",
          "createdAt": "2022-06-10T04:27:49Z",
          "updatedAt": "2022-06-10T04:27:49Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOAU54e85NxMX3",
      "title": "Section 4.5 (Name Res. Block) - MAC/EUI address to name mapping?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/118",
      "state": "OPEN",
      "author": "eqvinox",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi all,\r\n\r\nvery simple question: is there any plan/possibility to create a NRB option for MAC/EUI-48 (and for completeness EUI-64) to name mappings?\r\n\r\nPresumably it'd just be `'02 ca ff ee f0 0d'\"teapot under test\"` for the data contents; is it possible to \"pre-allocate\" two (48/64 bit) record types for this?",
      "createdAt": "2022-07-14T12:49:51Z",
      "updatedAt": "2022-07-14T18:10:38Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "It sure would be welcome.  At this point, what we really need is more conversation on opsawg@ietf.org to get the documents actually, and clearly adopted.  ",
          "createdAt": "2022-07-14T18:10:38Z",
          "updatedAt": "2022-07-14T18:10:38Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "I_kwDOAU54e85V6OA6",
      "title": "Documentation: are Option Code and Option Type both needed?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/124",
      "state": "CLOSED",
      "author": "bubbasnmp",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I would expect the text description (Option Type) and the field in the diagram (Option Code) to have the same name.\r\n\r\n> Options are a list of Type - Length - Value fields, each one\r\n   containing a single value:\r\n\r\n   *  Option Type (16 bits): an unsigned value that contains the code\r\n      that specifies the type of the current TLV record.  Option types\r\n      whose Most Significant Bit is equal to one are reserved for local\r\n      use; therefore, there is no guarantee that the code used is unique\r\n      among all capture files (generated by other applications), and is\r\n      most certainly not portable.  For cross-platform globally unique\r\n      vendor-specific extensions, the Custom Option MUST be used\r\n      instead, as defined in [Section 3.5.1](https://datatracker.ietf.org/doc/html/draft-tuexen-opsawg-pcapng#section-3.5.1)).\r\n\r\n   *  Option Length (16 bits): an unsigned value that contains the\r\n      actual length of the following 'Option Value' field without the\r\n      padding octets.\r\n\r\n   *  Option Value (variable length): the value of the given option,\r\n      padded to a 32-bit boundary.  The actual length of this field\r\n      (i.e. without the padding octets) is specified by the Option\r\n      Length field.\r\n\r\n```\r\n                          1                   2                   3\r\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n     |      Option Code              |         Option Length         |\r\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n     /                       Option Value                            /\r\n     /              variable length, padded to 32 bits               /\r\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n     /                                                               /\r\n     /                 . . . other options . . .                     /\r\n     /                                                               /\r\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n     |   Option Code == opt_endofopt |   Option Length == 0          |\r\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n\r\n                          Figure 7: Options Format\r\n```",
      "createdAt": "2022-11-09T03:53:48Z",
      "updatedAt": "2022-11-09T10:07:24Z",
      "closedAt": "2022-11-09T10:07:24Z",
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> are Option Code and Option Type both needed?\r\n\r\nNo, they aren't.  It's two names for the same field, which is a bug.  I'd vote for \"Option Type\", as people seem to say \"TLV\" more often than they say \"CLV\".",
          "createdAt": "2022-11-09T04:32:41Z",
          "updatedAt": "2022-11-09T04:32:41Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Somebody push a fix ?",
          "createdAt": "2022-11-09T09:20:05Z",
          "updatedAt": "2022-11-09T09:20:05Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOAU54e85XQkcz",
      "title": "The length of Custom Block's Custom Data?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/125",
      "state": "OPEN",
      "author": "winking324",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi, \r\n\r\nI wrote a simple ntar reader in C++, and how to directly get the length of custom data when parsing the Custom Block?\r\n\r\nMy repo: [ntar-reader](https://github.com/winking324/ntar-reader) and this part of the parsing code is in `ntar-reader/src/block_custom.cpp`.",
      "createdAt": "2022-11-25T02:27:22Z",
      "updatedAt": "2022-11-25T22:11:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "If a block supports options, you cannot have the length of the non-options part of the block contents be derived solely from the block total length, as that length includes the length of the options - you must have some other mechanism that allows the length of the non-options part of the block to be determined.\r\n\r\nThus, the format for a given PEN's custom block must either:\r\n\r\n1. not support *any* options, including OPT_COMMENT, so that the length of the Custom Data field is (block total length - 16) or\r\n2. be in a format that contains data allowing, for *all* blocks for that PEN, the length of the Custom Data field to be computed.\r\n\r\nThis means that readers will not be able to process *arbitrary* custom blocks unless they provide a plugin mechanism that allows, for an arbitrary PEN value, a plugin to be provided that understands the custom block formats for that PEN.  That also means that if such a plugin is provided, it must be updated whenever the format of its PEN's custom block is extended to, for example, add a new subtype of custom block.\r\n\r\n(And, yes this means that, given that Wireshark does not provide such a plugin mechanism, Wireshark, \"out of the box\", cannot process *arbitrary* custom blocks; it can only process custom blocks for which code in wiretap/pcapng.c includes support code.\r\n\r\nAnd, yes, that needs to be fixed.)",
          "createdAt": "2022-11-25T06:48:20Z",
          "updatedAt": "2022-11-25T06:48:20Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris ***@***.***> wrote:\n    > If a block supports options, you cannot have the length of the\n    > non-options part of the block contents be derived solely from the block\n    > total length, as that length includes the length of the options - you\n    > must have some other mechanism that allows the length of the\n    > non-options part of the block to be determined.\n\nIck.\nCan we deprecate custom blocks with options, and create something new that\ndoesn't suck?\n\n",
          "createdAt": "2022-11-25T15:35:23Z",
          "updatedAt": "2022-11-25T15:35:23Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Ick.\r\n\r\nThat was my reaction when I realized this.  I wish I'd realized it when it was first proposed.\r\n\r\n> Can we deprecate custom blocks with options, and create something new that\r\ndoesn't suck?\r\n\r\nOr, at least, that has fewer problems.\r\n\r\nIf we insist that \"Custom Blocks Done Right Blocks\" pick a standard byte order for multi-byte integral and floating-point fields, and go with IEEE 754 for floating-point fields (VAX is dead, Data General is dead, 36-bit and 48-bit mainframes have other problems in a power-of-2-word-size world, and IBM mainframes now do IEEE 754), that should, I think, make it possible for code that knows nothing about the innards of a given Custom Blocks Done Right Block pass it through even if it's running on a machine with the opposite byte order from the machine that last wrote the file.",
          "createdAt": "2022-11-25T20:02:11Z",
          "updatedAt": "2022-11-25T20:02:11Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris ***@***.***> wrote:\n    > If we insist that \"Custom Blocks Done Right Blocks\" pick a standard\n    > byte order for multi-byte integral and floating-point fields, and go\n\nSounds good to me.\n\n",
          "createdAt": "2022-11-25T22:11:28Z",
          "updatedAt": "2022-11-25T22:11:28Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "I_kwDOAU54e85czWb0",
      "title": "should we reserve a bit in BLOCK TYPES for do-not-copy?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/126",
      "state": "OPEN",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "   [Open issue: reserve 0x40000000-0x7FFFFFFF for do-not-copy-bit range\r\n   of base types?]\r\n",
      "createdAt": "2023-01-25T16:47:59Z",
      "updatedAt": "2023-01-25T16:47:59Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 129,
      "id": "I_kwDOAU54e85ksWPF",
      "title": "Physical layer packet type differentation",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/129",
      "state": "OPEN",
      "author": "alexforencich",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "For Ethernet, the physical layer only encodes the beginning and end of frames, all of the details about the frame can be determined from looking at data within the frame itself.  However, other protocols do not necessarily work like this.  For example, PCIe has both transaction layer packets and link layer packets, and they are differentiated by using different start control characters at the physical layer.  Additionally, different encodings are used depending on the link speed (gen 1/2 vs gen 3 use totally different methods for framing).  Technically, the framing method is not part of the link layer or transaction layer frame and as such it doesn't really make sense to capture this in the pcap, similar to how the preamble and start/terminate control characters are not captured alongside Ethernet frames.\r\n\r\nWhat is the best way to handle this in the pcap format?  Perhaps via some sort of per-packet option in the enhanced packet block?  Or should the link layer framing information be included in the pcap, perhaps translated to the \"lowest common denominator?\"",
      "createdAt": "2023-04-29T03:43:29Z",
      "updatedAt": "2023-04-30T17:11:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Alex Forencich ***@***.***> wrote:\n    > What is the best way to handle this in the pcap format?  Perhaps via\n    > some sort of per-packet option in the enhanced packet block?  Or should\n    > the link layer framing information be included in the pcap, perhaps\n    > translated to the \"lowest common denominator?\"\n\nEither you create a meta-link-layer header and you include information in it,\nsuch as the PCIe transaction layer framing information, or you allocate\nmultiple link-layer headers.\n\nIn general, you'd want to do this with PCAP(NG), not PCAP.\n\n",
          "createdAt": "2023-04-30T17:11:03Z",
          "updatedAt": "2023-04-30T17:11:03Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "I_kwDOAU54e85spty1",
      "title": "re-synchronize linktypes and document at WGLC",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/135",
      "state": "OPEN",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mcr"
      ],
      "labels": [],
      "body": "1. move any additional linktypes into IETF document at WGLC.\r\n2. mark linktypes.html proceedure as deprecated at start of WGLC.\r\n\r\n",
      "createdAt": "2023-07-26T17:39:44Z",
      "updatedAt": "2023-07-26T17:39:44Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 136,
      "id": "I_kwDOAU54e85spui-",
      "title": "write designated expert guidance for linktypes",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/136",
      "state": "OPEN",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\n1. FCFS might need only a review that it is not a duplicate.\r\n2. Specification Required just needs some clarify in the document.\r\n\r\n",
      "createdAt": "2023-07-26T17:42:20Z",
      "updatedAt": "2023-07-26T17:42:20Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 137,
      "id": "I_kwDOAU54e85tO1Pv",
      "title": "About colon in md files",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/137",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Example in draft-ietf-opsawg-pcap.md\r\n```\r\nMagic Number (32 bits):\r\n: an unsigned magic number, whose value is either the hexadecimal number\r\n```\r\nThere are two colons.\r\nThis gives, displayed on github:\r\n```\r\nMagic Number (32 bits): : an unsigned magic number, whose [...] \r\n```\r\nWhy this formating?",
      "createdAt": "2023-08-02T07:29:04Z",
      "updatedAt": "2023-08-02T11:22:43Z",
      "closedAt": "2023-08-02T11:22:43Z",
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems it is from kramdown syntax for a definition list.",
          "createdAt": "2023-08-02T11:22:43Z",
          "updatedAt": "2023-08-02T11:22:43Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "I_kwDOAU54e85ucSNv",
      "title": "Should we avoid a mix of 'time stamp' and  'timestamp'?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/139",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are many  'timestamp(s)', a few 'time stamp(s)' with mixed cases.\r\n\r\n$ git grep -c -i  'time stamp' *.md\r\ndraft-ietf-opsawg-pcap.md:2\r\ndraft-ietf-opsawg-pcaplinktype.md:1\r\n\r\n$ git grep -c -i  'timestamp' *.md\r\ndraft-ietf-opsawg-pcap.md:5\r\ndraft-ietf-opsawg-pcapng.md:27\r\ndraft-richardson-opsawg-pcapng-extras.md:2\r\n\r\nShould we use only [tT]imestamp(s)?",
      "createdAt": "2023-08-16T10:00:01Z",
      "updatedAt": "2023-08-17T11:01:39Z",
      "closedAt": "2023-08-17T10:56:57Z",
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "> Should we use only [tT]imestamp(s)?\r\n\r\ndefinitely a +1",
          "createdAt": "2023-08-16T10:17:09Z",
          "updatedAt": "2023-08-16T10:17:09Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the RFCs, there are 23 times more `timestamp` than `time stamp`.",
          "createdAt": "2023-08-16T12:18:42Z",
          "updatedAt": "2023-08-16T13:02:13Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If agreed, there is the PR #141.",
          "createdAt": "2023-08-17T10:46:04Z",
          "updatedAt": "2023-08-17T10:46:04Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> In the RFCs, there are 23 times more timestamp than time stamp.\r\n\r\n\"The RFCs\" as in \"all RFCs as of some recent date\"?",
          "createdAt": "2023-08-17T10:55:34Z",
          "updatedAt": "2023-08-17T10:55:34Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "In any case, +1.\r\n\r\nPull request #141 merged.",
          "createdAt": "2023-08-17T10:56:57Z",
          "updatedAt": "2023-08-17T10:56:57Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All RFCs retrieved a few months ago:\r\n```\r\n$ grep -i -r 'timestamp' $(find ../RFC-all -iname '*.txt')|wc -l\r\n12636\r\n$ grep -i -r 'time stamp' $(find ../RFC-all -iname '*.txt')|wc -l\r\n543\r\n```\r\n",
          "createdAt": "2023-08-17T11:00:14Z",
          "updatedAt": "2023-08-17T11:01:39Z"
        }
      ]
    },
    {
      "number": 149,
      "id": "I_kwDOAU54e856lFpQ",
      "title": "Any reason to use octet and byte? consistency?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/149",
      "state": "OPEN",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "$ git grep -c octet '*.md'                                                      \r\ndraft-ietf-opsawg-pcap.md:13\r\ndraft-ietf-opsawg-pcaplinktype.md:4\r\ndraft-ietf-opsawg-pcapng.md:70\r\ndraft-richardson-opsawg-pcapng-extras.md:5\r\n\r\n$ git grep -c byte '*.md'                                      \r\ndraft-ietf-opsawg-pcap.md:2\r\ndraft-ietf-opsawg-pcaplinktype.md:11\r\ndraft-ietf-opsawg-pcapng.md:9\r\n",
      "createdAt": "2023-12-26T16:23:22Z",
      "updatedAt": "2023-12-26T18:13:43Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> draft-ietf-opsawg-pcap.md:2\r\n\r\nOne is in the phrase \"byte order\"; that's a sufficiently commonly-used phrase that using it rather than \"octet order\" might be justified.\r\n\r\nThe other is in the phrase \"magic bytes\", referring to the magic number at the beginning of the file. That should probably just refer, as is done elsewhere, to the Magic Number field in the File Header; fixed in 83a26b05e2f3384e2aeaeceeb38b9ca62de18deb",
          "createdAt": "2023-12-26T17:28:50Z",
          "updatedAt": "2023-12-26T17:28:50Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> One is in the phrase \"byte order\"; that's a sufficiently commonly-used phrase that using it rather than \"octet order\" might be justified.\r\n\r\nIn RFCs there are 1597 `byte order` and 32 `octet order`. Less use indeed but not unused. Thus why not change to `octet order`?\r\n\r\n> ... Magic Number ...\r\n\r\n+1",
          "createdAt": "2023-12-26T17:53:17Z",
          "updatedAt": "2023-12-26T17:53:17Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> draft-ietf-opsawg-pcapng.md:9\r\n\r\nMany of those are in the phrase \"byte order\" or the field name \"Byte-Order Magic\"; the suggestion made for \"byte order\" in the pcap format applies here as well. (I hyphenated one case where that field was referred to as the \"Byte Order Magic\" field rather than the \"Byte-Order Magic\" field.)\r\n\r\nOne other is in the phrase \"magic bytes\"; for pcapng files, that refers to the Block Type and Byte-Order Magic fields in the Section Header Block at the beginning of the file, so I've updated that in the pcapng spec, in a fashion similar to the way I updated the similar text in the pcap format I-D, in efeca01485ef19744d923495f2cbd7c943005bcf.\r\n\r\nOthers are just cases where \"byte\" means \"octet\"; I've changed those in efeca01485ef19744d923495f2cbd7c943005bcf.",
          "createdAt": "2023-12-26T17:53:41Z",
          "updatedAt": "2023-12-26T17:53:41Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> draft-ietf-opsawg-pcapng.md\r\n\r\nA mix of \"byte order\" and other text using \"byte\" I've changed the latter in c2a09853c130058499c15349fea865ca5f6956f8.  (This includes \"byte-stuffed\"; [RFC 1662](https://datatracker.ietf.org/doc/html/rfc1662) uses \"octet-stuffed\", so, now, so do we.)",
          "createdAt": "2023-12-26T18:10:10Z",
          "updatedAt": "2023-12-26T18:10:10Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> In RFCs there are 1597 byte order and 32 octet order. Less use indeed but not unused. Thus why not change to octet order?\r\n\r\nAnd then there's https://developers.google.com/nearby/fast-pair/specifications/introduction#OctetOrder, which says\r\n\r\n> Octet order\r\n> \r\n> Wherever a field consists of multiple bytes, the byte ordering is big-endian, that is, network byte order (most-significant octet to least-significant octet).\r\n> \r\n> Note that while this is standard for bytes transferred over networks, it is different from the byte ordering for multi-byte fields in Bluetooth SIG specifications (for example, a service UUID in an advertisement is little-endian).\r\n\r\nso Google can't make up their mind. :-)",
          "createdAt": "2023-12-26T18:13:42Z",
          "updatedAt": "2023-12-26T18:13:42Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOAU54e858N9tX",
      "title": "Should we keep the two texts '32-bit' versus '32 bits'? (and others 16, 64, ... )",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/151",
      "state": "OPEN",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`git grep -nE '([0-9]-bit|[0-9] bit)' '*.md'` shows them.\r\n\r\n",
      "createdAt": "2024-01-16T14:03:12Z",
      "updatedAt": "2024-01-16T14:19:52Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 152,
      "id": "I_kwDOAU54e858gbgE",
      "title": "Order of options in a block with respect to option code?",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/152",
      "state": "OPEN",
      "author": "daluu",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I was looking at the spec, https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/blob/master/draft-ietf-opsawg-pcapng.md, let me know if I'm viewing the wrong/outdated version.\r\n\r\nI didn't find any mention on ordering of options within the options section of a block. Does/should order matter (in terms of order by option code)? Does the spec offer any guidance on this matter?\r\n\r\nI'm assuming that this currently is open ended, and readers should be able to handle processing options in any order and writers can write the options in any order. I did some tests in this area and found that Wireshark seems to be able to handle options in any order.\r\n\r\nPersonally though, for readability, and in cases of working with unit tests around pcapng read/write of options, I'd prefer to write options ordered by option code, and if the reader code were to display/visualize them, I'd also sort and order them (if not needing to render the data as it is exactly written). It's easier to read/skim/look them over in (ascending) order than some undefined order.\r\n\r\nI just wanted to pose this question to get the matter clarified. If the spec does mention ordering, please point me to it. Thanks.",
      "createdAt": "2024-01-18T18:54:31Z",
      "updatedAt": "2024-01-18T20:09:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I didn't find any mention on ordering of options within the options section of a block. Does/should order matter (in terms of order by option code)?\r\n\r\nNo/no.\r\n\r\n> I'm assuming that this currently is open ended,\r\n\r\nYes.\r\n\r\n> and readers should be able to handle processing options in any order\r\n\r\nYes.\r\n\r\n> and writers can write the options in any order. \r\n\r\nYes.\r\n\r\n> Personally though, for readability, and in cases of working with unit tests around pcapng read/write of options, I'd prefer to write options ordered by option code,\r\n\r\nYou're welcome to do so, but other writers are not and will not be required to do so.\r\n\r\nNote that, as option codes are assigned sequentially, that order has no significance other than the oder in which options happened to be assigned.\r\n\r\n> and if the reader code were to display/visualize them, I'd also sort and order them.\r\n\r\nYour reader is welcome to do so, but other readers are not and will not be required to do so. A reader may, for example, group them as it chooses, or treat some as more likely to be interesting and put those first, etc..",
          "createdAt": "2024-01-18T20:09:33Z",
          "updatedAt": "2024-01-18T20:09:33Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "I_kwDOAU54e858jWQv",
      "title": "PCAPNG specification document formatting question, maybe some issues found",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/issues/153",
      "state": "OPEN",
      "author": "daluu",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is the current [document](https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/blob/master/draft-ietf-opsawg-pcapng.md) using special markdown formatting like some kind of extensions to markdown, or is it other formatting to be applied when rendered  into other document formats (e.g. HTML)?\r\n\r\nAsking because I notice what I view in github here for that document, or downloading and viewing with a markdown viewer like Marko for macOS, not all the formatting seems to be applied, when compared to an older draft copy like this one: https://www.ietf.org/staging/draft-tuexen-opsawg-pcapng-02.html. Particularly section headings and like the tables for the options for each block type.\r\n\r\nOr did the document formatting get malformed/corrupted since the older draft was revised?",
      "createdAt": "2024-01-19T05:49:26Z",
      "updatedAt": "2024-01-19T06:11:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is the current [document](https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/blob/master/draft-ietf-opsawg-pcapng.md) using special markdown formatting like some kind of extensions to markdown,\r\n\r\nTo quote [the README.md file in this repository](https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/blob/master/README.md):\r\n\r\n> The pcap and pcapng specifications are written using the [kramdown](https://kramdown.gettalong.org) superset of [Markdown](https://daringfireball.net/projects/markdown/syntax) and the [kramdown-rfc2629](https://github.com/cabo/kramdown-rfc2629) extensions to kramdown.  This allows [xml2rfc](https://xml2rfc.tools.ietf.org)-format RFCs and I-Ds to be written in extended Markdown and converted to xml2rfc.  Xml2rfc was originally defined in [RFC 2629](https://tools.ietf.org/html/rfc2629); version 2 is documented in [RFC 7749](https://tools.ietf.org/html/rfc7749), and version 3 is documented in [RFC 7991](https://tools.ietf.org/html/rfc7991).",
          "createdAt": "2024-01-19T06:11:11Z",
          "updatedAt": "2024-01-19T06:11:11Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAyOTc2OTY=",
      "title": "Replace \"dump\" with \"capture\" or \"capture file\"",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/1",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The word \"dump\" is not a standard term. Using \"capture\" is more universal.\n",
      "createdAt": "2015-07-18T20:07:06Z",
      "updatedAt": "2015-08-21T19:39:38Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "ba2c6b2d564c1492088ff5bd69afc1a5244c3cbe",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "replace_dump",
      "headRefOid": "63dce0cdb00e60a88e8f4369839ad58e64a5ccda",
      "closedAt": "2015-08-19T18:09:15Z",
      "mergedAt": "2015-08-19T18:09:15Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "30eec5f700f03915e2ddb085ccfeb85e01a27ffa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAyOTkwNTM=",
      "title": "Cleanup tables of options",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/2",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-07-18T21:44:45Z",
      "updatedAt": "2015-08-21T19:39:37Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "ba2c6b2d564c1492088ff5bd69afc1a5244c3cbe",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "rd_cleanup_tables",
      "headRefOid": "bd7f083e18430eb3b8335749df1a0787e7e85b0c",
      "closedAt": "2015-08-19T18:12:10Z",
      "mergedAt": "2015-08-19T18:12:10Z",
      "mergedBy": "alagoutte",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA0MTY5NjQ=",
      "title": "Fix some more errors, nits, and xml2rfc warning",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/3",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See commit message.\n",
      "createdAt": "2015-07-21T02:24:32Z",
      "updatedAt": "2015-08-21T19:39:36Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "ba2c6b2d564c1492088ff5bd69afc1a5244c3cbe",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "rd_cleanup_tables_nits",
      "headRefOid": "c0e73004b6f0b54beb128917780721628d474337",
      "closedAt": "2015-08-19T18:13:22Z",
      "mergedAt": "2015-08-19T18:13:22Z",
      "mergedBy": "alagoutte",
      "mergeCommit": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Hadriel,\n\nYou don't need to make a PR (Pull Request) from each change..\nYou can directly push a branch on one PR and if you need to update, you need only to edit your branch (and the PR will be update too)\n\ni will look your change after (my first time to mark review on Github...)\n",
          "createdAt": "2015-07-21T09:48:53Z",
          "updatedAt": "2015-07-21T09:48:53Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did it that way so you could choose not to pull/merge any specific change commit. (could you selectively choose if they were one pull request?)\n",
          "createdAt": "2015-07-21T11:51:19Z",
          "updatedAt": "2015-07-21T11:51:19Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You need to make a branch by commit (but may be commit are related ?)\n",
          "createdAt": "2015-07-22T12:54:30Z",
          "updatedAt": "2015-07-22T12:54:30Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did do a branch for each commit - but they were a chain of branches - i.e., one was branched off of master, the second was branched off of the first, and the third was branched off the second. That way I could see the changes my previous commits had done. I do that frequently in wireshark changes. But I hadn't tried that before on github.\n",
          "createdAt": "2015-07-22T13:09:18Z",
          "updatedAt": "2015-07-22T13:09:18Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hm how do I work on this, too? I have no GIT skills yet :-)\n",
          "createdAt": "2015-07-22T13:26:51Z",
          "updatedAt": "2015-07-22T13:26:51Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think with the Github GUI apps you don't really need to know Git - though I could be wrong because I use normal git. But you can try out the GUI apps: for Windows use https://windows.github.com, and for Mac use https://mac.github.com.  You'll need to create a Github account, which you can do inside those GUI apps or on the website; then you'll need to fork this pcapng repository, which I think you can also do from within the apps (although it's trivial to do from Github's web interface instead).\n",
          "createdAt": "2015-07-22T14:25:46Z",
          "updatedAt": "2015-07-22T14:25:46Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alexis: are you able to merge these, or do I need to re-do the pull request as one branch?\n",
          "createdAt": "2015-07-24T11:35:40Z",
          "updatedAt": "2015-07-24T11:35:40Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have no yet looking your patch...\n",
          "createdAt": "2015-07-24T14:31:10Z",
          "updatedAt": "2015-07-24T14:31:10Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ping\n",
          "createdAt": "2015-08-17T20:42:32Z",
          "updatedAt": "2015-08-17T20:42:32Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry.. i will try to look this week !\n",
          "createdAt": "2015-08-18T15:42:10Z",
          "updatedAt": "2015-08-18T15:42:10Z"
        },
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No warning for me also with this change ! \n\nThanks\n",
          "createdAt": "2015-08-19T18:13:19Z",
          "updatedAt": "2015-08-19T18:13:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 5,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwMzkyNjI=",
      "title": "remove old xml file",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/5",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-08-21T13:47:18Z",
      "updatedAt": "2015-08-21T19:51:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8fc7fac9491e6cf229456dfc3a9f577a0ae7fc75",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "master",
      "headRefOid": "35d96b2b8f1ff9df411df7672403c6f2abd65467",
      "closedAt": "2015-08-21T19:51:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Hadriel,\n\nCan you \"rebase\" ?\nand there is 2 change\n(also Make the IDB Optionnal...)\n",
          "createdAt": "2015-08-21T19:14:35Z",
          "updatedAt": "2015-08-21T19:14:35Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> and there is 2 change\n> (also Make the IDB Optionnal...)\n\nYes, those should really be two separate changes.\n",
          "createdAt": "2015-08-21T19:36:50Z",
          "updatedAt": "2015-08-21T19:36:50Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "what's weird is I issued the pull request when I did the first change, and then I made my second change (to the same branch) but did not manually issue another pull request - I guess it must update them automatically.\n",
          "createdAt": "2015-08-21T19:47:05Z",
          "updatedAt": "2015-08-21T19:47:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwNzQ3OTM=",
      "title": "Remove old XML file",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/6",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove the old PCAP-DumpFileFormat.xml.\n",
      "createdAt": "2015-08-21T19:54:29Z",
      "updatedAt": "2015-08-22T03:24:29Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8fc7fac9491e6cf229456dfc3a9f577a0ae7fc75",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "remove_old_xml_file",
      "headRefOid": "f9e61bc2f0f413c97698a4e57b0cfe4e3e9c7971",
      "closedAt": "2015-08-22T00:53:31Z",
      "mergedAt": "2015-08-22T00:53:31Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm.\n\nAnother possibility would be to take all of the commits of the _new_ XML file, including the initial commit, turn them into commits to the old file (if that can be done in a way that not only preserves the committer, which Git supports, but also preserves the date and time of the commit), remove the old file, and then rename the old file to the new one, so that we can preserve the entire history.\n\nOr, given that Git doesn't treat renames as VCS operations on the file being renamed, so you'd have to use --follow to get the full history following a rename, perhaps there's some other way to join the histories of the two files.\n",
          "createdAt": "2015-08-21T20:32:59Z",
          "updatedAt": "2015-08-21T20:35:23Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe 'git merge-file' would do it... I'll try \n",
          "createdAt": "2015-08-21T20:53:17Z",
          "updatedAt": "2015-08-21T20:53:17Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually the draft-tuexen one already had the history of the PCAP-dump one. If you run \"git log --follow -p -- draft-tuexen-opsawg-pcapng.xml\" on the branch with the PCAP-dump file deleted, git will show the history all the way back to, and including, the PCAP-dump file's history.\n",
          "createdAt": "2015-08-21T21:11:39Z",
          "updatedAt": "2015-08-21T21:11:39Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the trick there is `--follow` - that might make `git log` decide that the last version of PCAP-DumpFileFormat.xml and the first version of draft-tuexen-opsawg-pcapng.xml are the same file, as they're similar enough to each other.\n",
          "createdAt": "2015-08-21T21:45:47Z",
          "updatedAt": "2015-08-21T21:45:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwNzUwMjc=",
      "title": "Make the IDB optional",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/7",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on discussions on the mailing list, make the IDB only required\nif there are other blocks which need it.\n",
      "createdAt": "2015-08-21T19:56:46Z",
      "updatedAt": "2015-08-22T03:06:45Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8fc7fac9491e6cf229456dfc3a9f577a0ae7fc75",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "make_idb_optional",
      "headRefOid": "67915e6704e5b283e28b63f9d0957374f7241b0a",
      "closedAt": "2015-08-22T03:05:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "This deletes a file that was already deleted by merging #6, and doesn't change draft-tuexen-opsawg-pcapng.xml to make the IDB optional.\n",
          "createdAt": "2015-08-22T00:57:26Z",
          "updatedAt": "2015-08-22T00:57:26Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Crap. I must have done something wrong - I'm using the Github app and am not used to it (I'm more used to command-line).  I'll try again in a new pull request.\n",
          "createdAt": "2015-08-22T03:05:16Z",
          "updatedAt": "2015-08-22T03:05:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwODYwNzk=",
      "title": "Move the obsolete Packet Block section to an Appendix",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/8",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since the Packet Block is obsolete, it should not be in the main body of the\ndraft document among the others. Move it to the appendix instead. Also update\nplaces which incorrectly refer to it, to refer to the Enhanced Packet Block\ninstead.\n",
      "createdAt": "2015-08-21T22:08:56Z",
      "updatedAt": "2015-08-22T19:51:38Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "0eb0e71fbab300988e60c590b55eb7888cd6d97b",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "move_pb_to_appendix",
      "headRefOid": "857d485f9cabd724e2a7727dd717cc3549d6fb75",
      "closedAt": "2015-08-22T18:06:17Z",
      "mergedAt": "2015-08-22T18:06:17Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I made the change you suggested, and this commit reflects that - though somehow I succeeded in wiping out your comment. I guess I'm too used to gerrit's workflow. :)\n",
          "createdAt": "2015-08-22T03:33:09Z",
          "updatedAt": "2015-08-22T03:33:09Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rebased to Guy's latest changes.\n",
          "createdAt": "2015-08-22T12:04:05Z",
          "updatedAt": "2015-08-22T12:04:05Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Not having seen any objections, here we go....\n",
          "createdAt": "2015-08-22T18:06:13Z",
          "updatedAt": "2015-08-22T18:06:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwOTY1ODM=",
      "title": "Make the IDB optional",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/9",
      "state": "CLOSED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The IDB is optional - it's only mandatory if an EPB, SPB, or ISB is in\nthe file.\n",
      "createdAt": "2015-08-22T03:16:59Z",
      "updatedAt": "2015-08-22T03:24:20Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8e8aa5ca789cf09fa7dbbfd1eaadfeeac5e2897c",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "make_idb_optional_again",
      "headRefOid": "9799ffc7933e8301d2aa6d2d7ecb36abd283f52f",
      "closedAt": "2015-08-22T03:19:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ARGH. The Github app is a useless piece of *@#$%&.\n",
          "createdAt": "2015-08-22T03:19:50Z",
          "updatedAt": "2015-08-22T03:20:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 10,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMwOTY2OTA=",
      "title": "Make the IDB optional",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/10",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The IDB is optional - it's only mandatory if an EPB, SPB, or ISB is in\nthe file.\n\n(Hopefully the third time's the charm!)\n",
      "createdAt": "2015-08-22T03:26:02Z",
      "updatedAt": "2015-08-22T12:04:37Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8e8aa5ca789cf09fa7dbbfd1eaadfeeac5e2897c",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "make_idb_optional_again",
      "headRefOid": "f539f886982f6c22b4956f15f3ab11753acd996b",
      "closedAt": "2015-08-22T06:47:23Z",
      "mergedAt": "2015-08-22T06:47:23Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.\n",
          "createdAt": "2015-08-22T04:02:33Z",
          "updatedAt": "2015-08-22T04:02:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 16,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMxMDc5ODc=",
      "title": "Add Custom Block and Custom Option types",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/16",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on the mailing list in July, 2015, add Custom Block and Custom\nOption types. Also fill out the \"vendor-specific\" section, and move it before\nthe file extension section, since the former is about the file contents (like\nthe previous sections), whereas the latter is not.\n",
      "createdAt": "2015-08-22T18:34:49Z",
      "updatedAt": "2015-08-22T19:51:39Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "fd9d2973a44756e20611e29516ff0234e8d0724e",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "add_custom_options",
      "headRefOid": "8920eb62dcd29e87acff2646e72b984b02f64bf0",
      "closedAt": "2015-08-22T18:57:59Z",
      "mergedAt": "2015-08-22T18:57:59Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMxMTA3NjA=",
      "title": "Re-indent the XML structure",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/19",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Before more word-smithing occurs, it would be ncie to be able to\nsee changes on github, which is hard with very long single lines.\nSo re-indent the XML to fit the ruler. Also remove spaces at end of\nlines.\n",
      "createdAt": "2015-08-22T21:38:57Z",
      "updatedAt": "2015-08-23T13:05:10Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "4063fab11f1124eec4b61b59631dd801790e90ad",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "reindent_xml",
      "headRefOid": "82ce0486693d1c128fe3517c3453665ec127e850",
      "closedAt": "2015-08-22T21:46:55Z",
      "mergedAt": "2015-08-22T21:46:55Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "...although people using XML editing tools other than low-level text editors (and even people using some low-level text editors) might end up undoing that.\n",
          "createdAt": "2015-08-22T21:47:59Z",
          "updatedAt": "2015-08-22T21:47:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 20,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMxMjA5NTU=",
      "title": "Clean up xml even more",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/20",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Remove default XML attributes - since they're default we don't need to specify\nthem, and it makes the text easier to read without them. Also change anchor\nnames to underscore_separators, and fix minor typo's and nits.\n",
      "createdAt": "2015-08-23T13:03:54Z",
      "updatedAt": "2015-08-23T18:00:29Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "5a3afa20365b499c8ac88f2d2112c56b2c5e30d4",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "cleanup_more_xml",
      "headRefOid": "848761ca1c1e3159b3e808b3424e4636f4ec2822",
      "closedAt": "2015-08-23T18:00:29Z",
      "mergedAt": "2015-08-23T18:00:29Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I wonder whether those were added by an XML eiditor.\n",
          "createdAt": "2015-08-23T18:00:26Z",
          "updatedAt": "2015-08-23T18:00:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMxMzA3NDU=",
      "title": "Clarify NRB specs and add open issues",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/22",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolve issue #21 by calrifying NRB stuff. Also add some more open issues\ninline, move Custom Options to be under Options, and move the appendices for\nEPB flag word and assigned Block Types to the main body. (normative things\nsuch as assigned codes don't go in appendices in IETF docs, afaik) I put the\nBlock Types in the IANA section for now, under the presumption they will\nbecome the initial values for an IANA registry. (another open issue :)\n",
      "createdAt": "2015-08-23T23:14:37Z",
      "updatedAt": "2015-08-26T15:13:47Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c560519fbb663f2e889e1bd0644de2b6cce9ec13",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "clarify_nrb",
      "headRefOid": "d4a4032e07322cf436823789c3ef1c2394623e17",
      "closedAt": "2015-08-26T15:09:44Z",
      "mergedAt": "2015-08-26T15:09:44Z",
      "mergedBy": "packetfoo",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ping.\n\nI don't think there's anything contentious in this pull request, is there?\n",
          "createdAt": "2015-08-26T15:03:54Z",
          "updatedAt": "2015-08-26T15:03:54Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hm, maybe I was too fast merging this... wanted to try and see if I could, sorry Alexis! :-)\n",
          "createdAt": "2015-08-26T15:12:55Z",
          "updatedAt": "2015-08-26T15:12:55Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No worries - I'll create a fix.\n",
          "createdAt": "2015-08-26T15:13:47Z",
          "updatedAt": "2015-08-26T15:13:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMyMjk3NDk=",
      "title": "Create a README file for github",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/25",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This includes links that auto-generate the doc! And thus fixes #4.\n",
      "createdAt": "2015-08-24T22:28:21Z",
      "updatedAt": "2015-08-25T01:01:53Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c560519fbb663f2e889e1bd0644de2b6cce9ec13",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "create_readme",
      "headRefOid": "b18eecd6bb70fd201d6f1838af6f8c863319c216",
      "closedAt": "2015-08-25T01:01:53Z",
      "mergedAt": "2015-08-25T01:01:53Z",
      "mergedBy": "guyharris",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "BTW, if you want to see what this README looks like, either click the \"view\" button when viewing the change diff, or go to my repo's branch for it:\nhttps://github.com/hadrielk/pcapng/tree/create_readme\n",
          "createdAt": "2015-08-24T22:35:33Z",
          "updatedAt": "2015-08-24T22:35:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0MTYxODk=",
      "title": "Add implementations link.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/30",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Also fix typo in NRB section.\n",
      "createdAt": "2015-08-26T15:32:18Z",
      "updatedAt": "2015-08-26T20:10:53Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "0426cf8b9153418e790dc1e99dc44bd68dbb127c",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "implementations_url",
      "headRefOid": "75f21a405e8854121e0ddcb846eba3479bda21dc",
      "closedAt": "2015-08-26T20:10:53Z",
      "mergedAt": "2015-08-26T20:10:53Z",
      "mergedBy": "packetfoo",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "closes #29 \n",
          "createdAt": "2015-08-26T17:44:57Z",
          "updatedAt": "2015-08-26T17:44:57Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I've added a pile of comments.\n",
          "createdAt": "2015-08-26T18:25:11Z",
          "updatedAt": "2015-08-26T18:25:11Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you want the changes for those comments in this pull change, or can you accept this one, and I'll create another for the changes?\n",
          "createdAt": "2015-08-26T18:30:44Z",
          "updatedAt": "2015-08-26T18:30:44Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you want the changes for those comments in this pull change, or can you accept this one, and I'll create another for the changes?\n\nI'd say the typo fixes, such as \"inidicated\" -> \"indicated\", should be added to this pull change.  The suggested wordsmithing could go into another change.\n",
          "createdAt": "2015-08-26T19:14:29Z",
          "updatedAt": "2015-08-26T19:14:29Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated with typos being fixed.\n",
          "createdAt": "2015-08-26T19:42:26Z",
          "updatedAt": "2015-08-26T19:42:26Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe I read the diff wrong, but isn't \"flags\" now misspelled as \"falgs\"? :-)\n",
          "createdAt": "2015-08-26T19:51:58Z",
          "updatedAt": "2015-08-26T19:51:58Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Bleh. Google docs would be a lot easier than this process. :smirk_cat: \n",
          "createdAt": "2015-08-26T20:05:04Z",
          "updatedAt": "2015-08-26T20:05:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0MTg1NzQ=",
      "title": "Update README with travis build status and implementations link",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/31",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-08-26T15:51:16Z",
      "updatedAt": "2015-08-26T19:56:52Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6095b91cb0ffabfe0ced8d839b0157a83dac665f",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "update_readme",
      "headRefOid": "5d2e7c0962e2bb2fb412825419c02267d5e700d9",
      "closedAt": "2015-08-26T19:56:52Z",
      "mergedAt": "2015-08-26T19:56:52Z",
      "mergedBy": "packetfoo",
      "mergeCommit": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Travis build is no yet ready... but ok with this PR ;-)\n",
          "createdAt": "2015-08-26T18:06:33Z",
          "updatedAt": "2015-08-26T18:06:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0NDc5MjQ=",
      "title": "Word smithing",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/33",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addressed comments for word-smithing/corrections, in a previously merged pull request. Also fixed more typos.\n",
      "createdAt": "2015-08-26T20:28:45Z",
      "updatedAt": "2015-08-26T20:35:09Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "b6e347b67b891ab3126e5b1a6e27347d52b80d2e",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "word_smithing",
      "headRefOid": "740daab6b2f562e1133ac91cfb6a1cba42a401b1",
      "closedAt": "2015-08-26T20:35:09Z",
      "mergedAt": "2015-08-26T20:35:09Z",
      "mergedBy": "packetfoo",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0NTQzMzM=",
      "title": "Make it clear that IPv4 is encoded as four bytes, not a uint32 word",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/34",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm nto sure this is the right phrasing to use, but something along these lines...\n",
      "createdAt": "2015-08-26T21:28:17Z",
      "updatedAt": "2015-08-26T22:56:19Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "87101545e2ecd56a576528fef10c2186c3cea76c",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "ipv4_bytes",
      "headRefOid": "1e237554a4071f59b31719afd0d06b0559bedfe5",
      "closedAt": "2015-08-26T22:56:19Z",
      "mergedAt": "2015-08-26T22:56:19Z",
      "mergedBy": "hadrielk",
      "mergeCommit": null,
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Makes sense, even though this'll mean that my code for reading IPv4 addresses is turned \"bad\" by this, as I'm currently considering endianess. But I can live with that if nobody else has a problem with it.\n",
          "createdAt": "2015-08-26T21:47:43Z",
          "updatedAt": "2015-08-26T21:47:43Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wireshark has been writing them as four separate bytes (well... it's\nwriting a uint32 but in big-endian/network-order, so it's the same result\nas four separate bytes).\n-hadriel\n\nOn Wed, Aug 26, 2015 at 5:47 PM, Jasper Bongertz notifications@github.com\nwrote:\n\n> Makes sense, even though this'll mean that my code for reading IPv4\n> addresses is turned \"bad\" by this, as I'm currently considering endianess.\n> But I can live with that if nobody else has a problem with it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pcapng/pcapng/pull/34#issuecomment-135179691.\n",
          "createdAt": "2015-08-26T22:04:53Z",
          "updatedAt": "2015-08-26T22:04:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQxNDY1NTM=",
      "title": "Fix wording based on Jim Young's email",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/36",
      "state": "MERGED",
      "author": "hadrielk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: http://www.winpcap.org/pipermail/pcap-ng-format/2015-September/000320.html\n",
      "createdAt": "2015-09-03T19:23:34Z",
      "updatedAt": "2015-09-03T20:53:35Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "0e5b643e354664cc6c4aede140cbd4c3c3dde11e",
      "headRepository": "hadrielk/pcapng",
      "headRefName": "jyoung_comments",
      "headRefOid": "9e88e05d5d50610559e897f20cfb43b4eb3dcd34",
      "closedAt": "2015-09-03T20:25:00Z",
      "mergedAt": "2015-09-03T20:25:00Z",
      "mergedBy": "hadrielk",
      "mergeCommit": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oups... comment after the merge..\n\nDo you have check other RFC about using bytes/octets (There is a rules ?)\n",
          "createdAt": "2015-09-03T20:38:03Z",
          "updatedAt": "2015-09-03T20:38:03Z"
        },
        {
          "author": "hadrielk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't know if there's a hard and fast rule really, but yes in my\nexperience IETF RFC's generally use the term \"octet\" for on-the-wire\nencoding stuff.\n\n-hadriel\n\nOn Thu, Sep 3, 2015 at 4:38 PM, Alexis La Goutte notifications@github.com\nwrote:\n\n> Oups... comment after the merge..\n> \n> Do you have check other RFC about using bytes/octets (There is a rules ?)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pcapng/pcapng/pull/36#issuecomment-137567862.\n",
          "createdAt": "2015-09-03T20:42:35Z",
          "updatedAt": "2015-09-03T20:42:35Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't know if there's a hard and fast rule really, but yes in my\n> experience IETF RFC's generally use the term \"octet\" for on-the-wire\n> encoding stuff.\n\nFor what it's worth, [RFC 7322, the RFC Style Guide](http://tools.ietf.org/html/rfc7322) doesn't say anything about it, and neither does [the \"Table of decisions on consistent usage in RFCs\"](http://www.rfc-editor.org/rfc-style-guide/terms-online.txt).\n",
          "createdAt": "2015-09-03T20:53:35Z",
          "updatedAt": "2015-09-03T20:53:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgzOTc5MzA=",
      "title": "I have a very few changes to the spelling and grammar.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/37",
      "state": "MERGED",
      "author": "ElderDelp",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": " Committer: Gary Delp delp.gary@mayo.edu\n",
      "createdAt": "2015-10-21T22:44:25Z",
      "updatedAt": "2015-10-21T23:03:51Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "f69ca23d622cb1ad8d46634235ff230bd2959312",
      "headRepository": "ElderDelp/pcapng",
      "headRefName": "master",
      "headRefOid": "b1e69340e487766fa91871cd126ae5250e3f280a",
      "closedAt": "2015-10-21T23:01:20Z",
      "mergedAt": "2015-10-21T23:01:20Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "4f95eed705527fcb6d8763ca5dc736a4fb41ca65"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!\n",
          "createdAt": "2015-10-21T23:01:31Z",
          "updatedAt": "2015-10-21T23:01:31Z"
        },
        {
          "author": "ElderDelp",
          "authorAssociation": "NONE",
          "body": "You bet!\n\nFrom: Guy Harris [mailto:notifications@github.com]\nSent: Wednesday, October 21, 2015 6:02 PM\nTo: pcapng/pcapng\nCc: Delp, Gary S.\nSubject: Re: [pcapng] I have a very few changes to the spelling and grammar. (#37)\n\nThanks!\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/pcapng/pcapng/pull/37#issuecomment-150048262.\n",
          "createdAt": "2015-10-21T23:03:50Z",
          "updatedAt": "2015-10-21T23:03:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAzMzQ5MTQ=",
      "title": "Updates to IANA registries",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/38",
      "state": "CLOSED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This pull request suggests some changes to the IANA registries, and changes the format of the encryption block.\n",
      "createdAt": "2015-11-11T01:00:00Z",
      "updatedAt": "2018-11-02T10:41:54Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "bca3d706d798735e33fbb2c92f029f12466a55a4",
      "headRepository": "mcr/pcapng",
      "headRefName": "master",
      "headRefOid": "6bb6d775c07b137d9893e147b959cc4132f11321",
      "closedAt": "2018-11-02T10:41:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi,\n\nAny news?\n",
          "createdAt": "2016-07-25T08:32:10Z",
          "updatedAt": "2016-07-25T08:32:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzg1NzA4MzQ=",
      "title": "Typos and other minor changes",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/39",
      "state": "MERGED",
      "author": "jpoliv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-07-23T12:09:00Z",
      "updatedAt": "2016-07-25T20:30:17Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "e820ddaa28e266355245be004a8a9ee26677572b",
      "headRepository": "jpoliv/pcapng",
      "headRefName": "typos",
      "headRefOid": "1549678cf87afe4db327f343e2622680fc213087",
      "closedAt": "2016-07-25T08:31:38Z",
      "mergedAt": "2016-07-25T08:31:38Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "547a1d407eeeced701402659faffcc09b8eb4179"
      },
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks !\n",
          "createdAt": "2016-07-25T08:31:33Z",
          "updatedAt": "2016-07-25T08:31:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 40,
      "id": "MDExOlB1bGxSZXF1ZXN0ODE0NjE4NDI=",
      "title": "Add Alternative Packet Block",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/40",
      "state": "OPEN",
      "author": "saleyn",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This PR is based on proposal submitted to the pcap-ng-format mailing list. It introduces two new features:\n- Alternative Packet Block\n- Simple Option Type\n\nSee [formatted version](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/saleyn/pcapng/apb/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii&type=ascii#section_apb) of the document that includes the proposed changes.\n",
      "createdAt": "2016-08-16T12:21:09Z",
      "updatedAt": "2023-07-23T19:17:47Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "547a1d407eeeced701402659faffcc09b8eb4179",
      "headRepository": "saleyn/pcapng",
      "headRefName": "apb",
      "headRefOid": "e6bd08284245c6a3864877bbae8d9e0c0a5af48c",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 50,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYzNzczOTQ0",
      "title": "Correct SHB block type.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/50",
      "state": "MERGED",
      "author": "Flameeyes",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\\r is 0x0D, \\n is 0x0A.\r\n\r\n0x0A0D0D0A is \\n\\r\\r\\n, no matter the endianness.",
      "createdAt": "2018-01-18T17:27:02Z",
      "updatedAt": "2018-01-18T18:29:51Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c0dd7a7391f707bf20174932c1608c30729642e3",
      "headRepository": "Flameeyes/pcapng",
      "headRefName": "master",
      "headRefOid": "b697f9d1f7d8763255acef396f50c8f300959d53",
      "closedAt": "2018-01-18T18:29:51Z",
      "mergedAt": "2018-01-18T18:29:51Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "f1f622a1cf5b852e5aed64296014d94538860f46"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 51,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MDM1NzMz",
      "title": "Capture Information Block (CIB) addition",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/51",
      "state": "OPEN",
      "author": "ryankurte",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Adds a Capture Information Block (CIB) with global location/orientation/velocity vectors. CIBs are associated with an IDB using the interface number. It is intended that this will be extended with other useful fields in the future.\r\n\r\nThis began in #48, which has now been split into two components. \r\n- The CIB (this PR) for appending information to a capture interface (that applies to all packets captured after the CIB, until the next CIB).\r\n- New EPB options (#56), for appending RSSI etc. to EPBs.\r\n\r\nThe proposal with changes is viewable [here](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#rfc.section.4.7) (thanks @guyharris!). \r\n\r\n*Please read the RFC or check out the diff for an up to date view of the changes*",
      "createdAt": "2018-06-14T22:33:16Z",
      "updatedAt": "2023-07-23T19:20:55Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "bf17d7fe42e9c2b4a695bf816cae27be4c9c978a",
      "headRepository": "ryankurte/pcapng",
      "headRefName": "proposed-wireless-fields",
      "headRefOid": "5df4b9d9f6b4d7e902517a6e2c917479e8b02556",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "~~~I was hoping this would be viewable [here](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://github.com/ryankurte/pcapng/blob/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii), but there seems to be something wrong with my formatting at the moment :-(~~~\r\nSee [here](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#rfc.section.4.7) for the RFC with proposed changes.",
          "createdAt": "2018-06-14T22:55:45Z",
          "updatedAt": "2018-06-15T02:34:08Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I was hoping this would be viewable [here](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://github.com/ryankurte/pcapng/blob/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii), but there seems to be something wrong with my formatting at the moment :-(\r\n\r\nIt's not the formatting, it's the URL.\r\n\r\nNeither the URL `https://github.com/ryankurte/pcapng/blob/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii` nor the URL `https://github.com/ryankurte/pcapng/blob/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml`, when handed to curl, download an XML document in the form of the pcapng spec with your changes.  The first of those produces a 404; the second of those produces a display of the modified pcapng spec, with line numbers and a whole bunch of GitHub decoration around it.\r\n\r\nIf I go to the [proposed-wireless-fields](https://github.com/ryankurte/pcapng/tree/proposed-wireless-fields) branch of your pcapng repository, click on [draft-tuexen-opsawg-pcapng.xml](https://github.com/ryankurte/pcapng/blob/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml), and then click the \"Raw\" button, I get the XML *without* the GitHub decoration, with the URL https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml.\r\n\r\nSo [this url](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii) gives you the draft, with your changes, formatted as HTML.",
          "createdAt": "2018-06-15T02:00:41Z",
          "updatedAt": "2018-06-15T02:03:26Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I've added some copy editor's notes as comments.",
          "createdAt": "2018-06-15T02:17:38Z",
          "updatedAt": "2018-06-15T02:17:38Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Awesome, thanks! Plan to look at it again tomorrow and fix them up.",
          "createdAt": "2018-06-15T02:26:33Z",
          "updatedAt": "2018-06-15T02:26:33Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "More copy-and-pasteos indicated in comments.",
          "createdAt": "2018-06-17T07:58:26Z",
          "updatedAt": "2018-06-17T07:58:26Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Outstanding questions / tasks:\r\n- [x] Should we call this `Capture Information Block (CIB)` or `MetaData Block (MDB)`?\r\n- [x] Examples (do we need them?)",
          "createdAt": "2018-12-24T10:19:19Z",
          "updatedAt": "2019-02-25T21:17:55Z"
        },
        {
          "author": "b1tninja",
          "authorAssociation": "NONE",
          "body": "Ok I had deleted my comment, but I'm gonna go ahead and potentially look stupid.\r\n\r\nI guess I like CIB when the data is associated with the particular packet/interface.\r\n\r\nI was thinking the GPS/location information probably is going to be polled not directly associated with each packet, perhaps a periodic standalone \"packet\" of sorts, metadata block, would be more practical instead of duplicating the loc with each packet? Of course the trade off is then, if interested in location information have to kind of maintain state as parsing chronologically\r\n\r\nThat being said, I imagin esome people still have a use for vectors/location information with their antennas, i'm imagining some sort of spinning directional antenna or something.",
          "createdAt": "2018-12-31T06:42:36Z",
          "updatedAt": "2018-12-31T06:44:00Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "Will the CIB options also be permitted in the EPB?  i.e. Options appearing in an EPB override the values in a CIB?  For a wireless capture device which is in motion it may be better/simpler to attach location information to every EPB instead of preceding every EPB with a new CIB.",
          "createdAt": "2018-12-31T07:56:02Z",
          "updatedAt": "2018-12-31T07:56:02Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Will the CIB options also be permitted in the EPB?\r\n\r\nOnly if you assign them different numbers, otherwise some of the option numbers given for the CIB collide with already-assigned numbers for EPB options.\r\n\r\nOtherwise...\r\n\r\n> i.e. Options appearing in an EPB override the values in a CIB?\r\n\r\n...I don't see any problem with allowing them in either type of block.\r\n",
          "createdAt": "2018-12-31T08:04:04Z",
          "updatedAt": "2018-12-31T08:04:04Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Adds a Capture Information Block (CIB) with global location/orientation/velocity vectors, as proposed in #48. CIBs are associated with an IDB (via an optional interface id field) or with an EPB through the addition of a CIB ID option to the EPB.\r\n> \r\n> It is intended that the CIB will be extended to provide further useful capture metadata within PCAP files (for example, wireless channels, frequencies, and received RSSIs).\r\n\r\nPresumably the CIB is useful only for information that could change over time; otherwise, you'd just attach it to the IDB.\r\n\r\nWould the RSSI be better as an option for an EPB?  Would the same apply to channel/frequency options?",
          "createdAt": "2018-12-31T08:13:25Z",
          "updatedAt": "2018-12-31T08:13:25Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "I'm thinking of a mobile multi-channel wireless sniffer (one IDB per channel) which could be used to survey channels and relative signal strength at given locations.   Additionally, in my case one set of location details could apply to multiple interfaces and RSSI would be per actual EPB received.\r\n\r\nSpeaking of conflicting option codes, the \"global\" comment option code (1) should still be permitted in a CIB so other options should start at 2 or other non-conflicting offset.",
          "createdAt": "2018-12-31T08:23:22Z",
          "updatedAt": "2018-12-31T08:24:48Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have no problem with overriding options in the EPB if that's helpful. But I agree with Guy that the option numbers must be unique in that case. It's too confusing if the same option has a different number for the same thing when present both in CIB and EPB - even if that means we skip some option numbers in the CIB options spec.\r\n\r\nAlso, regarding CIB vs. MDB - I say let's call it CIB, because MDB is too generic and people might want to try and add tons of non-related-to-capture (but still \"meta\") information to that block. As an example I can think of storing data like pre-computed endpoint/conversation values found in the capture file, and we'll end up with a monster \"block-of-all-trades\" :-)",
          "createdAt": "2018-12-31T12:06:27Z",
          "updatedAt": "2018-12-31T12:06:27Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "\"CIBs are associated with an IDB (via an optional interface id field) or with an EPB through the addition of a CIB ID option to the EPB.\"\r\nif we can overload options of a CIB in an EPB then we don't need addition of a CIB ID option to the EPB.  Otherwise that sounds like a CIB would have either an Interface ID or other unique ID which the option could reference.  The packet already has an Interface ID.  I'm sure we don't want a CIB to have unique ID numbers of their own.\r\n\r\nAlso, what was the objection, if any, to allowing these options in the IDB itself and perhaps having the CIB as an overloaded/update IDB options block? (IOB)\r\n\r\nToo bad IDBs are sequential in order of appearance the pcapng doesn't allow updating an IDB and keeping the same interface number.\r\n\r\nAlso, would an overloaded CIB option appearing in an EPB apply to just that packet or that and all subsequent packets until further update.  I figure the latter makes sense.",
          "createdAt": "2019-01-01T09:43:00Z",
          "updatedAt": "2019-01-01T09:43:00Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Alright, there appears to be some confusion arising as I hadn't updated the PR description with all the changes from the discussion here and in #48. \r\n\r\nAs a quick overview (correct me if you disagree): \r\n- we decided that RSSI etc. are better as EPB options, and that Location etc. work well attached to an interface.\r\n- this PR is the addition of CIBs that are associated with an interface ID for attaching location information and other interface-specific options that are not synchronized with packet receipt\r\n- i just opened a new PR for the additional EPB options (#56)\r\n\r\n@b1tninja \r\n> I guess I like CIB when the data is associated with the particular packet/interface.\r\n\r\nThis is the only case in the current PR, sorry I had not updated the PR description.\r\n\r\n@guyharris \r\n> Only if you assign them different numbers, otherwise some of the option numbers given for the CIB collide with already-assigned numbers for EPB options.\r\n\r\nRight, I'll re-assign the option numbers to be non-colliding?\r\n\r\n> ...I don't see any problem with allowing them in either type of block.\r\n\r\nIt seems simpler to only allow the options in the EPB or CIB depending on their relevance to the interface or captured packet / removes the need for us to describe a heirachy and support overriding. I would prefer exclusive options personally.\r\n\r\n>  Presumably the CIB is useful only for information that could change over time; otherwise, you'd just attach it to the IDB.\r\n\r\nYep, except it's simpler to have one-true-way than define and handle levels of inheritance for options imo.\r\n\r\n> Would the RSSI be better as an option for an EPB? Would the same apply to channel/frequency options?\r\n\r\nYep\r\n\r\n@jkcko \r\n\r\n> Speaking of conflicting option codes, the \"global\" comment option code (1) should still be permitted in a CIB so other options should start at 2 or other non-conflicting offset.\r\n\r\nDefinitely makes sense to re-index the options to be globally unique.\r\n\r\n> Also, what was the objection, if any, to allowing these options in the IDB itself and perhaps having the CIB as an overloaded/update IDB options block? (IOB)\r\n\r\nSee above, that is the approach i initially proposed, but imo it's preferable to have one (simple) way of doing things and not impose parsing / encoding complexity.\r\n\r\n> Also, would an overloaded CIB option appearing in an EPB apply to just that packet or that and all subsequent packets until further update. I figure the latter makes sense.\r\n\r\nThe latter, check the diff or the rendered RFC for more information.\r\n",
          "createdAt": "2019-01-05T22:18:56Z",
          "updatedAt": "2019-01-05T22:19:55Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "The CIB block type code in Figure 15 is incorrect.  It is showing the same number as the EPB.\r\nThe CIB block type code should also be added to the list in 11.1. Standardized Block Type Codes.",
          "createdAt": "2019-01-18T20:02:35Z",
          "updatedAt": "2019-01-18T20:02:35Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@jkcko thanks for catching that ^_^\r\n\r\nI re-indexed the options to be unique within the CIB, do we need them to be globally unique given they can only occur in the CIB / having the CIB as the only mechanism for attaching that information simplifies encoding and parsing?",
          "createdAt": "2019-01-23T20:58:27Z",
          "updatedAt": "2019-01-23T20:58:27Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "@guyharris merged and re-indexed to avoid the new journal block\r\n\r\nare there any outstanding things you need resolved to get this merged?",
          "createdAt": "2019-02-12T21:49:19Z",
          "updatedAt": "2019-02-12T21:49:19Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> are there any outstanding things you need resolved to get this merged?\r\n\r\nSee comments.",
          "createdAt": "2019-02-12T22:19:57Z",
          "updatedAt": "2019-02-12T22:19:57Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Presumably if a measurement option is present, but the corresponding error option isn't present, the error is unknown?\r\n\r\nPresumably if a measurement option is *absent*, but the corresponding error option *is* present, whoever decided (directly, or indirectly by writing software to write a CIB) to provide an error estimate for a non-existent measurement is confused (i.e., ignore the error option)?",
          "createdAt": "2019-02-12T22:34:49Z",
          "updatedAt": "2019-02-12T22:34:49Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "[This link will get you to the CIB section of the modified spec](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-wireless-fields/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#rfc.section.4.9).",
          "createdAt": "2019-02-13T01:52:59Z",
          "updatedAt": "2019-02-13T01:52:59Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "> See comments.\r\n\r\nthanks! resolved all of those i think, and added options examples. a couple more questions:\r\n\r\n~- [ ] do we want globally unique indicies on the CIB options? (and if so, at what number should I start?)~\r\n- [ ] would it make more sense for orientations to be represented as euler angles..?",
          "createdAt": "2019-02-13T02:16:16Z",
          "updatedAt": "2019-02-14T22:05:07Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> * [ ]  do we want globally unique indicies on the CIB options? (and if so, at what number should I start?)\r\n\r\nI would say \"no\", because 1) if the idea is that we'd want to be able to add that information to packet blocks as well, assigning separate option numbers for the EPB versions of the various information items isn't a huge problem in code reading pcapng files and 2) the second question you ask is a reason why it's a pain to pick globally unique option numbers  - you have to pick a number that's larger than the maximum option number for all blocks to which the option would apply, and now you have holes in the available option number space for some of those block types.",
          "createdAt": "2019-02-14T05:16:56Z",
          "updatedAt": "2019-02-14T05:16:56Z"
        },
        {
          "author": "b1tninja",
          "authorAssociation": "NONE",
          "body": "Came across a blackhat presentation where they had implemented similar functionality, posting here so that people might consider various facets https://media.blackhat.com/bh-us-11/Cache/BH_US_11_Cache_PPI-Geolocation_WP.pdf",
          "createdAt": "2019-03-02T19:24:44Z",
          "updatedAt": "2019-03-02T19:24:44Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "hey hey, are there any other things i can do to help get this merged?",
          "createdAt": "2019-10-29T05:45:54Z",
          "updatedAt": "2019-10-29T05:45:54Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> hey hey, are there any other things i can do to help get this merged?\r\n\r\nWell, step 1 would be to change it to update the Markdown file rather than the XML file; @mcr converted the spec to extended Markdown - it's at draft-tuexen-opsawg-pcapng.md now.  See [cabo/kramdown-rfc2629](https://github.com/cabo/kramdown-rfc2629) for the extensions.",
          "createdAt": "2020-12-21T22:41:52Z",
          "updatedAt": "2020-12-21T22:41:52Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm converting the pcap file now, but I think you are referring to a merge\nrequest against the pcapng.  yes, so it needs to get re-edited, sorry.\n\n",
          "createdAt": "2020-12-21T23:05:29Z",
          "updatedAt": "2020-12-21T23:05:29Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "@ryankurte can you rebase?  I know this is years old, but sometimes it takes awhile for the IETF to get its ducks into the right geometric pattern.",
          "createdAt": "2023-07-23T19:20:55Z",
          "updatedAt": "2023-07-23T19:20:55Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1MDky",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:07:23Z",
          "updatedAt": "2018-06-15T02:07:24Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "No need to change the indentation - it just adds extra noise to the diff.",
              "createdAt": "2018-06-15T02:07:23Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1MzQ0",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:09:27Z",
          "updatedAt": "2018-06-15T02:09:27Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Same here - and use the same indentation for the line you added.",
              "createdAt": "2018-06-15T02:09:27Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1NDI4",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:10:17Z",
          "updatedAt": "2018-06-15T02:10:17Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Should \"rf\" be capitalized (it's an initialism for \"radio frequency\", and I generally see it capitalized)?",
              "createdAt": "2018-06-15T02:10:17Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1NDg3",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:10:45Z",
          "updatedAt": "2018-06-15T02:10:46Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "There should be a period at the end of the sentence.",
              "createdAt": "2018-06-15T02:10:46Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1NzY0",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:13:14Z",
          "updatedAt": "2018-06-15T02:13:15Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "\"affects\", not \"effects\".",
              "createdAt": "2018-06-15T02:13:15Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1OTMw",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:14:46Z",
          "updatedAt": "2018-06-15T02:14:46Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Needs a period at the end of the sentence, and the comma after \"location capture\" should probably be a semicolon.",
              "createdAt": "2018-06-15T02:14:46Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI1OTkx",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:15:15Z",
          "updatedAt": "2018-06-15T02:15:16Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "Needs a period at the end of the sentence, and the comma after \"orientation capture\" should probably be a semicolon.",
              "createdAt": "2018-06-15T02:15:16Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI2MDUz",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:15:52Z",
          "updatedAt": "2018-06-15T02:15:52Z",
          "comments": [
            {
              "originalPosition": 207,
              "body": "Needs a period at the end of the sentence, and the comma after \"velocity capture\" should probably be a semicolon.",
              "createdAt": "2018-06-15T02:15:52Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI2OTgx",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:24:51Z",
          "updatedAt": "2018-06-15T02:24:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Ahh yeah, I tried to fix that but git on my side doesn't say anything is different.\r\nWill debug and revert this when I can work out why it's happening.",
              "createdAt": "2018-06-15T02:24:51Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MDI3MDc1",
          "commit": {
            "abbreviatedOid": "ef54275"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-15T02:25:47Z",
          "updatedAt": "2018-06-15T02:25:47Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Probably should be in `Radio Frequency (RF)` as this is the first use?",
              "createdAt": "2018-06-15T02:25:47Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgxOTEw",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T07:55:23Z",
          "updatedAt": "2018-06-17T07:55:23Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "\"...specifies the *orientation* of the packet capture or interface...\".",
              "createdAt": "2018-06-17T07:55:23Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgxOTE0",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T07:55:39Z",
          "updatedAt": "2018-06-17T07:55:40Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "\"...*orientation* is stored...\".",
              "createdAt": "2018-06-17T07:55:39Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgxOTIw",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T07:56:00Z",
          "updatedAt": "2018-06-17T07:56:01Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "\"...specifies the *velocity*...\"",
              "createdAt": "2018-06-17T07:56:00Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgxOTUz",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T07:57:43Z",
          "updatedAt": "2018-06-17T07:57:44Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "\"*velocity* is stored as three 32-bit floats representing *the rates of change of latitude and longitude in degrees per second, and the rate of change of altitude in metres/second*.\"",
              "createdAt": "2018-06-17T07:57:43Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgzMTM5",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T08:47:30Z",
          "updatedAt": "2018-06-17T08:47:30Z",
          "comments": [
            {
              "originalPosition": 180,
              "body": "Hmm with lat/lng in degrees it probably makes more sense for this to be degrees with yaw corresponding to compass angle?",
              "createdAt": "2018-06-17T08:47:30Z",
              "updatedAt": "2019-02-13T02:16:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5MzgzNDE0",
          "commit": {
            "abbreviatedOid": "7608aa6"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T08:59:04Z",
          "updatedAt": "2018-06-17T08:59:05Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "I think it makes more sense for velocity to be in meters per second against a global reference frame (orientation zero, Y facing north, -Z down). It's easier to compare and use in calculations, and works for non-global locations (see PR update introducing local locations too).",
              "createdAt": "2018-06-17T08:59:05Z",
              "updatedAt": "2019-02-13T02:16:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyOTM1NjE4",
          "commit": {
            "abbreviatedOid": "da11baa"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T22:13:14Z",
          "updatedAt": "2019-02-12T22:13:14Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "That needs to be\r\n\r\n    <c>0x0000000B</c>\r\n\r\nThere's a missing `<` before the `/c>`",
              "createdAt": "2019-02-12T22:13:14Z",
              "updatedAt": "2019-02-13T02:16:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyOTM2NzQz",
          "commit": {
            "abbreviatedOid": "da11baa"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T22:16:00Z",
          "updatedAt": "2019-02-12T22:16:00Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "\"in {backslash} metres\"?  That looks incomplete; is there supposed to be something before or after the backslash, or is the backslash not supposed to be there, i.e. it should be \"offsets in metres\"?",
              "createdAt": "2019-02-12T22:16:00Z",
              "updatedAt": "2019-02-13T02:16:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyOTM2ODYz",
          "commit": {
            "abbreviatedOid": "da11baa"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T22:16:19Z",
          "updatedAt": "2019-02-12T22:16:19Z",
          "comments": [
            {
              "originalPosition": 180,
              "body": "Extra indentation there?",
              "createdAt": "2019-02-12T22:16:19Z",
              "updatedAt": "2019-02-13T02:16:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAyOTM3ODY5",
          "commit": {
            "abbreviatedOid": "da11baa"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-12T22:18:58Z",
          "updatedAt": "2019-02-12T22:18:58Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Why insert this blank line?",
              "createdAt": "2019-02-12T22:18:58Z",
              "updatedAt": "2019-02-13T02:16:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzNTcyNDEw",
          "commit": {
            "abbreviatedOid": "5df4b9d"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-14T05:18:47Z",
          "updatedAt": "2019-02-14T05:18:48Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "Perhaps it should indicate that having a cib_local_location_error option without a cib_local_location makes no sense, and that having a cib_local_location option without a cib_local_location_error option means that the error is unknown.\r\n\r\nIf so, the same should be done for the other options as well.",
              "createdAt": "2019-02-14T05:18:47Z",
              "updatedAt": "2019-02-14T05:18:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzOTk1MDgx",
          "commit": {
            "abbreviatedOid": "5df4b9d"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-14T22:04:39Z",
          "updatedAt": "2019-02-14T22:04:39Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "I added that an overarching comment at line [2125](https://github.com/pcapng/pcapng/blob/5df4b9d9f6b4d7e902517a6e2c917479e8b02556/draft-tuexen-opsawg-pcapng.xml#L2125) rather than adding it per-option, though I can put it on each option if you would prefer?",
              "createdAt": "2019-02-14T22:04:39Z",
              "updatedAt": "2019-02-14T22:04:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzOTk3NjA1",
          "commit": {
            "abbreviatedOid": "5df4b9d"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-14T22:11:21Z",
          "updatedAt": "2019-02-14T22:11:22Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "A global comment suffices.\r\n\r\nWhat's the correct interpretation of a measurement without a corresponding error?  \"It's unknown how accurate this measurement is\"?",
              "createdAt": "2019-02-14T22:11:21Z",
              "updatedAt": "2019-02-14T22:11:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA0MDcyNjg5",
          "commit": {
            "abbreviatedOid": "5df4b9d"
          },
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-15T03:50:22Z",
          "updatedAt": "2019-02-15T03:50:22Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "I think the absence of error information only indicates that there is no error information.\r\nAs to whether it is unknown, unknowable, elided because the capturer doesn't care, or for any other reason, would be outside the scope of the capture file?",
              "createdAt": "2019-02-15T03:50:22Z",
              "updatedAt": "2019-02-15T03:50:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 53,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE1MDUxODQx",
      "title": "Add systemd Journal Export Block.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/53",
      "state": "MERGED",
      "author": "geraldcombs",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add blocktype 0x00000009 for systemd Journal Export Format entries.\r\nhttps://www.freedesktop.org/wiki/Software/systemd/export/",
      "createdAt": "2018-09-12T18:17:22Z",
      "updatedAt": "2018-09-26T21:30:09Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "01fe3b351aaefdd0fbff84e0bfedcb1f117f91e5",
      "headRepository": "geraldcombs/pcapng",
      "headRefName": "master",
      "headRefOid": "48dbfc1fbcdf3239e1bc479ee4cfd73c9a677514",
      "closedAt": "2018-09-26T21:30:09Z",
      "mergedAt": "2018-09-26T21:30:09Z",
      "mergedBy": "geraldcombs",
      "mergeCommit": {
        "oid": "2f97f6862791fea50b12396409424858f35979b9"
      },
      "comments": [
        {
          "author": "geraldcombs",
          "authorAssociation": "COLLABORATOR",
          "body": "So far no one has objected here or on the pcap-ng-format mailing list, so I'm going to go ahead and merge this.",
          "createdAt": "2018-09-26T21:30:03Z",
          "updatedAt": "2018-09-26T21:30:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 54,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE5MjE1MDc3",
      "title": "Add Decryption Secrets Block",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/54",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The original proposal from Ben Higgins is listed at\r\nhttps://www.wireshark.org/lists/wireshark-dev/201805/msg00003.html\r\nand asked for two separate block numbers (for DTLS and TLS) that\r\nincluded the contents of a SSL/TLS key log file:\r\nhttps://www.winpcap.org/pipermail/pcap-ng-format/2018-May/000390.html\r\n\r\nThe proposed specification text includes an additional \"Secrets Type\"\r\nwhich allows other users (like ZigBee) to specify additional keys.\r\n\r\nChanges from proposal:\r\n- Rename Secrets Description Block (SDB) to DSB.\r\n- Add Secrets Length field (suggested by Anders Broman) and mention\r\n  padding. Otherwise the start of options cannot be determined.\r\n\r\nSupport in Wireshark is tracked by\r\nhttps://bugs.wireshark.org/bugzilla/show_bug.cgi?id=15252\r\n___\r\nMore work is necessary to complete this new block type, including:\r\n- [x] Rename \"Secrets Description Block (SDB)\" to ~~\"Secrets Block\" or~~ \"Decryption Secrets Block (DSB)\"?\r\n- [x] Allow ~~/Forbid~~ multiple blocks.\r\n- [x] Require secrets before ~~all~~ other packet blocks? Pros: easier to parse as consumer in a single pass, sometimes it is not possible to guarantee that secrets are timely available. Cons: requires producers to rewrite a pcapng after a capture is complete.\r\n- [x] padding/alignment? Use options for this or...? *Added new Secrets Length field*\r\n- [ ] ~~Add other users? (Potential users: ZigBee, WireGuard, ...)~~ Deferred. There is no process yet for requesting new types, but I guess that to goes through the pcapng group/Wireshark.\r\n- [ ] Security considerations. Implementations must communicate very clearly that session/long-term secrets are revealed.\r\n___\r\nRelated mailing list discussion:\r\nhttps://www.winpcap.org/pipermail/pcap-ng-format/2018-September/000393.html\r\nhttps://www.winpcap.org/pipermail/pcap-ng-format/2018-October/000397.html",
      "createdAt": "2018-09-30T17:05:11Z",
      "updatedAt": "2018-11-21T15:31:36Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "08b790e07f6fb46bacc2db8d5e765213d4c1cc29",
      "headRepository": "Lekensteyn/pcapng",
      "headRefName": "secrets-block",
      "headRefOid": "94f89f0a231381e08ae0c7ddc5cfe9e87e889fdb",
      "closedAt": "2018-11-21T15:31:36Z",
      "mergedAt": "2018-11-21T15:31:36Z",
      "mergedBy": "packetfoo",
      "mergeCommit": {
        "oid": "34c15c6046b22788eca787ec98a0502bab6f8ce0"
      },
      "comments": [
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What about writing secrets just in time before they are required for a packet block (similar to IDBs that don't need to be all at the beginning but need to be written before a packet block references it)? That way you don't need to have them all written in the beginning as long as they exist before a packet block requires them.",
          "createdAt": "2018-10-01T12:12:36Z",
          "updatedAt": "2018-10-01T12:12:36Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> What about writing secrets just in time before they are required for a packet block (similar to IDBs that don't need to be all at the beginning but need to be written before a packet block references it)? That way you don't need to have them all written in the beginning as long as they exist before a packet block requires them.\r\n\r\nThis would make life much easier for pcapng consumers (and is the second placement suggestion at https://www.winpcap.org/pipermail/pcap-ng-format/2018-September/000393.html). Producers will not always able to satify this requirement. What about this text:\r\n> Secrets Blocks SHOULD be written before packet blocks that require those secrets. Decryption of packet blocks MAY ignore secrets that appear after them.\r\n\r\nIt's a \"SHOULD\" since producers may not be able to satisfy the rule. Other preprocessing tools (editcap?) may then rewrite the pcapng and relocate DSBs before the first packet block if necessary.",
          "createdAt": "2018-10-01T12:35:12Z",
          "updatedAt": "2018-10-01T12:35:12Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that text with \"SHOULD\" sounds good to me, as well as the \"MAY\" ignore part. I think it's a reasonable way to handle the block serialization problem.",
          "createdAt": "2018-10-01T12:45:23Z",
          "updatedAt": "2018-10-01T12:45:23Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just combined all previous commits and made some minor changes:\r\n- Mention padding requirement.\r\n- Rename Secrets field to Secrets Data.\r\n- Clarify that no DSB-specific options are currently defined. (The currently proposed Wireshark implementation silently skips options and will drop those while saving an existing pcapng file)\r\n- Rename \"TLS session secrets\" to \"TLS Key Log\" to clarify that the type refers to a particular format.",
          "createdAt": "2018-11-18T22:08:15Z",
          "updatedAt": "2018-11-18T22:08:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYwMjkxOTYy",
          "commit": {
            "abbreviatedOid": "b7c3366"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-10-01T13:21:24Z",
          "updatedAt": "2018-10-01T13:21:24Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYwMjkyNjYx",
          "commit": {
            "abbreviatedOid": "b7c3366"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-10-01T13:23:05Z",
          "updatedAt": "2018-10-01T13:23:05Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2NjA3MDk4",
          "commit": {
            "abbreviatedOid": "9fd563a"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-11-20T05:24:33Z",
          "updatedAt": "2018-11-20T05:24:34Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "...and anything that reads DSBs MUST handle both choices of line ending (i.e., you don't get to require your platform's line-ending choice).",
              "createdAt": "2018-11-20T05:24:34Z",
              "updatedAt": "2018-11-20T10:19:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2NjA4NjM1",
          "commit": {
            "abbreviatedOid": "9fd563a"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-11-20T05:35:27Z",
          "updatedAt": "2018-11-20T05:35:27Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Are these expected to be 4-character ASCII strings, like \"TLSK\", or do they just have to be unique?\r\n\r\n(I'm going to update the spec to make it clearer that the same procedure should be used to request a standard block type and standard option codes for the block; this change should then say \"...and to request standard secrets types for a DSB\".)",
              "createdAt": "2018-11-20T05:35:27Z",
              "updatedAt": "2018-11-20T10:19:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2NjA4NzE5",
          "commit": {
            "abbreviatedOid": "9fd563a"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-11-20T05:36:01Z",
          "updatedAt": "2018-11-20T05:36:02Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "...padded to a multiple of 4 bytes.",
              "createdAt": "2018-11-20T05:36:02Z",
              "updatedAt": "2018-11-20T10:19:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2NjkxMDQ3",
          "commit": {
            "abbreviatedOid": "9fd563a"
          },
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-11-20T10:17:19Z",
          "updatedAt": "2018-11-20T10:17:20Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Did I pick an ASCII string that happens to be `TLSK`? What a coincidence! ;)\r\n\r\nThey are expected to be unique unsigned integers, I'll clarify this.",
              "createdAt": "2018-11-20T10:17:19Z",
              "updatedAt": "2018-11-20T10:19:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI5MTEyMDQ3",
      "title": "Expand the systemd Journal Export Block description.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/55",
      "state": "MERGED",
      "author": "geraldcombs",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Move the description to its own section and expand it.",
      "createdAt": "2018-11-07T17:40:19Z",
      "updatedAt": "2018-12-31T19:40:14Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "2f97f6862791fea50b12396409424858f35979b9",
      "headRepository": "geraldcombs/pcapng",
      "headRefName": "master",
      "headRefOid": "7589b16134ed395471db7c11dcd3be6156c3abad",
      "closedAt": "2018-12-31T19:36:27Z",
      "mergedAt": "2018-12-31T19:36:27Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "3900f8b4c8d1686728bd8816f4d3297499e5442c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTgzMDA4MDg2",
          "commit": {
            "abbreviatedOid": "7589b16"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-12-10T01:25:40Z",
          "updatedAt": "2018-12-10T01:25:40Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "This is already in the tip of the master branch as of commit 94f89f0a231381e08ae0c7ddc5cfe9e87e889fdb.",
              "createdAt": "2018-12-10T01:25:40Z",
              "updatedAt": "2018-12-10T01:25:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg4NDkwMjY0",
          "commit": {
            "abbreviatedOid": "7589b16"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2018-12-31T12:13:00Z",
          "updatedAt": "2018-12-31T12:13:00Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg4NTMwMjU1",
          "commit": {
            "abbreviatedOid": "7589b16"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-12-31T19:40:13Z",
          "updatedAt": "2018-12-31T19:40:14Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "I removed the extra 0x0000000A in commit df9724322b5ed3758011a103a5968e87ea82e646.",
              "createdAt": "2018-12-31T19:40:13Z",
              "updatedAt": "2018-12-31T19:40:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQyNDYzMTM2",
      "title": "Additional RF information options for EPBs",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/56",
      "state": "OPEN",
      "author": "ryankurte",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Following from #48, this PR is to add per-packet options for capture information to the EPB, alongside the per-interface options introduced in #51.\r\n\r\nThis PR is a work in progress and requires further discussion, opening now so there is a clear delineation between this and #51.\r\n\r\n**TODO:**\r\n- What RF options do we want?\r\n- How do we want to represent them?\r\n  - I am in favour of 32-bit IEEE-754 floats where sensible, rather than defining our own fixed-point approximations (and we have already accepted the inclusion of this for location information)\r\n\r\n**Options:**\r\n- [x] RSSI per antenna\r\n\r\nThe updated RFC can be viewed [here](http://xml2rfc.tools.ietf.org/cgi-bin/xml2rfc.cgi?url=https://raw.githubusercontent.com/ryankurte/pcapng/proposed-epb-options/draft-tuexen-opsawg-pcapng.xml&modeAsFormat=html/ascii#section_epb)\r\n\r\n*Please read the RFC or check out the diff for an up to date view of the changes*",
      "createdAt": "2019-01-05T22:07:10Z",
      "updatedAt": "2023-07-23T19:21:52Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "f25b23a97b5699ef12a81ddc84a0014cc4d0c4ed",
      "headRepository": "ryankurte/pcapng",
      "headRefName": "proposed-epb-options",
      "headRefOid": "c1add7d097ccfa8ff34665d531b1ec74a8946ca2",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "Please include the following EPBs options for time-slotted radios.\r\n\r\nStart of slot timestamp.\r\nThe start of slot timestamp for this packet.  The start of slot preceeds the\r\nstart of frame timestamp in the EPB header.  Format and resolution follows\r\nthat used for the EPB timestamp.\r\n```\r\n 0                   1                   2                   3\r\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|      epb_startofslot_ts       |                8              |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                 Start of slot timestamp (high)                |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                 Start of slot timestamp (low)                 |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n```\r\n\r\nTimeslot size.\r\nDuration of active timeslot from the start of slot timestamp.\r\nResolution is the same as timestamps.\r\n```\r\n 0                   1                   2                   3\r\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|      epb_timeslot_size        |                4              |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                        Timeslot size                          |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n```\r\n\r\nEnd of Frame Timestamp.\r\nThe end of frame timestamp marks the completion of a received packet. Useful\r\nfor tracking packets that overrun a timeslot or where there are timing\r\nconstraints on the ACK sent in response to a data frame.\r\n```\r\n 0                   1                   2                   3\r\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|      epb_endofframe_ts        |                8              |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                  End of frame timestamp (high)                |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                  End of frame timestamp (low)                 |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n```\r\n\r\nAbsolute Slot number\r\nThe absolute slot number is a monotonically increasing number for each\r\ntimeslot. The ASN may be used in the nonce for packet decrytion.\r\n```\r\n 0                   1                   2                   3\r\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|         epb_slot_number       |                8              |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                       Slot number (high)                      |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n|                       Slot number (low)                       |\r\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n```",
          "createdAt": "2019-01-18T18:57:09Z",
          "updatedAt": "2019-01-18T18:57:09Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "I would also like to see standardized options for.\r\nChannel center frequency and Bit-rate.\r\n",
          "createdAt": "2019-01-18T20:24:47Z",
          "updatedAt": "2019-01-18T20:24:47Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "Those seem like good options to me! Any thoughts @guyharris @packetfoo ? Otherwise I will add them when I can.",
          "createdAt": "2019-01-23T21:01:33Z",
          "updatedAt": "2019-01-23T21:01:33Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Absolute Slot number\r\n> The absolute slot number is a monotonically increasing number for each\r\n> timeslot. The ASN may be used in the nonce for packet decrytion.\r\n> \r\n> ```\r\n>  0                   1                   2                   3\r\n>  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\r\n> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> |         epb_slot_number       |                8              |\r\n> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> |                       Slot number (high)                      |\r\n> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> |                       Slot number (low)                       |\r\n> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\r\n> ```\r\n\r\nI presume from the \"monotonically increasing\" and the 64-bit size that the slot number doesn't cycle around, i.e. it's not as if you have a fixed number of slots like the time slots in a TDM network.",
          "createdAt": "2019-01-23T21:09:49Z",
          "updatedAt": "2019-01-23T21:09:49Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "> I presume from the \"monotonically increasing\" and the 64-bit size that the slot number doesn't cycle around, i.e. it's not as if you have a fixed number of slots like the time slots in a TDM network.\r\n\r\nRight.  This could be called \"absolute slot number\" instead so \"slot number\" in a \"timeslot set\" could be used for relative timeslots.",
          "createdAt": "2019-01-24T00:08:04Z",
          "updatedAt": "2019-01-24T00:08:04Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > I presume from the \"monotonically increasing\" and the 64-bit size that the slot number doesn't cycle around, i.e. it's not as if you have a fixed number of slots like the time slots in a TDM network.\r\n> \r\n> Right. This could be called \"absolute slot number\" instead so \"slot number\" in a \"timeslot set\" could be used for relative timeslots.\r\n\r\nSounds good to me.",
          "createdAt": "2019-01-24T16:05:46Z",
          "updatedAt": "2019-01-24T16:05:46Z"
        },
        {
          "author": "jkcko",
          "authorAssociation": "NONE",
          "body": "It has become apparent that extrapolating the start of frame timestamp from the epb timestamp is not an accurate reference for computing relative times from the start of slot and end of frame timestamps.  The timestamps for comparison should all reference the same monotonically increasing clock.\r\nSo it is worth also including a Start of Frame timestamp in the same format as the End of Frame timestamp.\r\n",
          "createdAt": "2019-02-12T18:21:52Z",
          "updatedAt": "2019-02-12T18:21:52Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "This should probably be converted to a change to the extended Markdown version of the spec at [pcapng/draft-tuexen-opsawg-pcapng.md,](https://github.com/pcapng/pcapng/blob/master/draft-tuexen-opsawg-pcapng.md) as that's now the source for the spec.  See [cabo/kramdown-rfc2629](https://github.com/cabo/kramdown-rfc2629) for the extensions.",
          "createdAt": "2020-12-21T22:49:16Z",
          "updatedAt": "2020-12-21T22:49:16Z"
        },
        {
          "author": "ryankurte",
          "authorAssociation": "NONE",
          "body": "(sorry i should have tested that on one of my own repos)",
          "createdAt": "2021-08-10T21:43:48Z",
          "updatedAt": "2021-08-10T21:43:48Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "@ryankurte please rebase.",
          "createdAt": "2023-07-23T19:21:52Z",
          "updatedAt": "2023-07-23T19:21:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUzMDUxNTE3",
      "title": "fix typo: we're talking about minimum size here, not maximum",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/59",
      "state": "MERGED",
      "author": "dirkl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If I don't misunderstand the text, there's a min vs. max typo",
      "createdAt": "2019-02-14T12:20:59Z",
      "updatedAt": "2019-02-14T17:51:41Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "bf17d7fe42e9c2b4a695bf816cae27be4c9c978a",
      "headRepository": "dirkl/pcapng",
      "headRefName": "master",
      "headRefOid": "0cc87bb34d091716f37f335c8153c6ee62789ade",
      "closedAt": "2019-02-14T17:51:40Z",
      "mergedAt": "2019-02-14T17:51:40Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "227617ef7da90ed58afa0ef8ec2155ed5c42569c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 62,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwODA0NDAz",
      "title": "Add DSB type for WireGuard (0x57474b4c)",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/62",
      "state": "MERGED",
      "author": "Lekensteyn",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This permits WireGuard handshake keys to be embedded in a packet capture\r\nfile to enable decryption in Wireshark. This makes it easier to share\r\ndecipherable capture files for educational or debugging purposes.\r\n\r\nImplements the functionality requested by\r\nhttps://bugs.wireshark.org/bugzilla/show_bug.cgi?id=15571\r\n\r\nThe identifier 0x57474b4c (\"WGKL\") was arbitrarily chosen.\r\nCRLF support might not be necessary, but is mentioned just in case such\r\nkey log text files are processed on Windows.\r\n___\r\nCC @zx2c4",
      "createdAt": "2019-05-21T14:16:01Z",
      "updatedAt": "2019-09-15T20:45:38Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "3c35b6abf9171e767e4b2470e691c22346b7105e",
      "headRepository": "Lekensteyn/pcapng",
      "headRefName": "dsb-type-wireguard",
      "headRefOid": "732aff711b0ec1235cc3a667039a6f5c6b64e599",
      "closedAt": "2019-09-15T20:45:38Z",
      "mergedAt": "2019-09-15T20:45:38Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "e84160df6df058bbbe9c0bb14d6625ddf9a33cb6"
      },
      "comments": [
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I copied the key log file format to the WIreshark wiki:\r\nhttps://wiki.wireshark.org/WireGuard#Key_Log_Format\r\n\r\nWould you prefer the text to be shortened to a link or is this acceptable?",
          "createdAt": "2019-05-21T16:53:55Z",
          "updatedAt": "2019-05-21T16:53:55Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "You might want to briefly indicate what WireGuard is, linking to [the WireGuard home page](https://www.wireguard.com).",
          "createdAt": "2019-05-21T18:12:00Z",
          "updatedAt": "2019-05-21T18:12:00Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> CRLF support might not be necessary, but is mentioned just in case such\r\n> key log text files are processed on Windows.\r\n\r\nAccording to their home page, \"Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android)...\", so I wouldn't rule out the files ending with CR-LF.",
          "createdAt": "2019-05-21T18:21:31Z",
          "updatedAt": "2019-05-21T18:21:31Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I copied the key log file format to the WIreshark wiki:\r\n> https://wiki.wireshark.org/WireGuard#Key_Log_Format\r\n> \r\n> Would you prefer the text to be shortened to a link or is this acceptable?\r\n\r\nIt should be inline, not linked to, in the pcapng spec, as pcapng isn't tied to Wireshark.  The Wireshark Wiki could eventually point back *here*.",
          "createdAt": "2019-05-21T18:22:40Z",
          "updatedAt": "2019-05-21T18:22:40Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It should be inline, not linked to, in the pcapng spec, as pcapng isn't tied to Wireshark.\r\n\r\nSounds good to me if you are okay with this slightly larger paragraph.\r\n\r\nI just needed a stable link to place authorative information. The TLS Key Log file format for example has a well-known place on the Mozilla wiki, it was originally created for use in Wireshark by Adam Langley (https://bugzilla.mozilla.org/show_bug.cgi?id=536474). The extract-handshakes README contains an example (self-explanatory) output, but I am not sure how stable the link will be over time. Which is why I wrote down the requirements in the pcapng spec. (And copied it later to the Wireshark wiki.)\r\n\r\n> According to their home page, \"Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android)...\", so I wouldn't rule out the files ending with CR-LF.\r\n\r\nThere are implementations for other platforms, but these do not dump the keys. The extract-handshakes utility uses the Linux-specific kprobes method to extract keys from a running Linux system. The only way that CRLF can appear is due to someone copying the text file from a Linux to a Windows system, or if similar support is implemented in wireguard-go.\r\n\r\n> You might want to briefly indicate what WireGuard is, linking to the WireGuard home page.\r\n\r\nI assume that those implementing support for this will know... :) Nevertheless, good point about linking to the project, force-pushing with this diff:\r\n\r\n```diff\r\n--- a/draft-tuexen-opsawg-pcapng.xml\r\n+++ b/draft-tuexen-opsawg-pcapng.xml\r\n@@ -2050,7 +2050,9 @@ Section Header\r\n             The key type is one of LOCAL_STATIC_PRIVATE_KEY,\r\n             REMOTE_STATIC_PUBLIC_KEY, LOCAL_EPHEMERAL_PRIVATE_KEY,\r\n             or PRESHARED_KEY. This matches the output of <eref\r\n-                target=\"https://git.zx2c4.com/WireGuard/tree/contrib/examples/extract-handshakes/README\">extract-handshakes.sh</eref>.\r\n+                target=\"https://git.zx2c4.com/WireGuard/tree/contrib/examples/extract-handshakes/README\">extract-handshakes.sh</eref>\r\n+            which is part of the <eref\r\n+                target=\"https://www.wireguard.com/\">WireGuard</eref> project.\r\n             A PRESHARED_KEY line is linked to a session matched by a previous\r\n             LOCAL_EPHEMERAL_PRIVATE_KEY line.\r\n             Every line MUST be properly terminated with\r\n```",
          "createdAt": "2019-05-21T20:40:43Z",
          "updatedAt": "2019-05-21T20:40:43Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me",
          "createdAt": "2019-05-22T08:01:25Z",
          "updatedAt": "2019-05-22T08:01:25Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@guyharris Are you also happy with the changes? If so, could it be merged?",
          "createdAt": "2019-06-07T07:01:40Z",
          "updatedAt": "2019-06-07T07:01:40Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ping, the Wireshark patch has already been merged.",
          "createdAt": "2019-06-17T09:10:34Z",
          "updatedAt": "2019-06-17T09:10:34Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ping could this be merged?",
          "createdAt": "2019-07-21T11:33:14Z",
          "updatedAt": "2019-07-21T11:33:14Z"
        },
        {
          "author": "Lekensteyn",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@packetfoo @guyharris @geraldcombs Could any of you merge this change?",
          "createdAt": "2019-09-15T20:38:05Z",
          "updatedAt": "2019-09-15T20:38:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0MzA0NjkxNTQ2",
      "title": "Add information regarding signage of integer values",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/64",
      "state": "CLOSED",
      "author": "prauscher",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The specification currently does not specify iff values should be signed or unsigned for some fields. This pull request adds these information for some fields based on my personal reception.",
      "createdAt": "2019-08-06T12:26:16Z",
      "updatedAt": "2019-08-06T20:06:49Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "3c35b6abf9171e767e4b2470e691c22346b7105e",
      "headRepository": "prauscher/pcapng",
      "headRefName": "signed",
      "headRefOid": "ef7a11997f35f4a53c81e536cbbcfaefe2822079",
      "closedAt": "2019-08-06T20:06:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in 7253fb65294e790baf052ca888dbb85afd24b395.  I took the opportunity to do more copyediting.\r\n\r\nNote that the Original Packet Length field, like the Captured Packet Length, is *unsigned*.",
          "createdAt": "2019-08-06T20:06:48Z",
          "updatedAt": "2019-08-06T20:06:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIxMzcyNDIz",
      "title": "Added Toeplitz hash type to EPB options",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/65",
      "state": "MERGED",
      "author": "packetfoo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Added Toeplitz hash type to the Enhanced Packet Block epb_hash options, as requested by Stephen Hemminger <stephen@networkplumber.org> on the pcapng mailing list. Also added length values for SHA1 and MD5 and some minor reformatting.\r\n\r\nThis is my first pull request ever, so let's hope I do this right :)",
      "createdAt": "2019-09-25T18:08:15Z",
      "updatedAt": "2019-09-25T22:49:59Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "e84160df6df058bbbe9c0bb14d6625ddf9a33cb6",
      "headRepository": "packetfoo/pcapng",
      "headRefName": "master",
      "headRefOid": "149f58a672eed3c3dbd29791a912b1149bd32305",
      "closedAt": "2019-09-25T22:49:59Z",
      "mergedAt": "2019-09-25T22:49:59Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "4f092a68a42987c39b26c30ecb41dc570f00dc67"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMjc3OTky",
          "commit": {
            "abbreviatedOid": "0395f2b"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T18:28:08Z",
          "updatedAt": "2019-09-25T18:28:09Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Typo - \"algorithM octet\".\r\n\r\nShould each algorithm type have a link to a definition of the algorithm, if available?",
              "createdAt": "2019-09-25T18:28:09Z",
              "updatedAt": "2019-09-25T19:05:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMjg0Njgy",
          "commit": {
            "abbreviatedOid": "0395f2b"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T18:39:22Z",
          "updatedAt": "2019-09-25T18:39:23Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Thanks, darn typos... now I need to find out how to fix the problem... I assume I need to close the pull request and create a new one, but I'm not sure if that will also kill this comment thread. \r\n\r\nLinks to the definition is something we could add, yes. The common ones like MD5 and SHA1 probably would not really require it, but Toeplitz is indeed a bit \"under the radar\". I can prepare something and create another pull request.",
              "createdAt": "2019-09-25T18:39:23Z",
              "updatedAt": "2019-09-25T19:05:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMjkwOTkw",
          "commit": {
            "abbreviatedOid": "0395f2b"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T18:50:09Z",
          "updatedAt": "2019-09-25T18:50:09Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "> now I need to find out how to fix the problem... I assume I need to close the pull request and create a new one\r\n\r\nYou *shouldn't* have to.  [About Pull Requests](https://help.github.com/en/articles/about-pull-requests) says:\r\n\r\n> Once you've created a pull request, you can push commits from your topic branch to add them to your existing pull request. These commits will appear in chronological order within your pull request and the changes will be visible in the \"Files changed\" tab.\r\n\r\nSo, as far as I know, \"make another commit to fix the typo and do `git push`\" should work, and \"make a `git commit -a --amend` to fix the typo and do `git push`\" might also work.\r\n\r\nI've only rarely done git pulls (the main git repositories on which I work are libpcap, tcpdump, and the pcapng spec, and I'm a core committer to all of them, so I just directly `git push` from my machine), so I don't know if the second of those would work (the equivalent - `git commit -a --amend` followed by `git review` - works on the Wireshark repository).",
              "createdAt": "2019-09-25T18:50:09Z",
              "updatedAt": "2019-09-25T19:05:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMzAwODA0",
          "commit": {
            "abbreviatedOid": "149f58a"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T19:07:15Z",
          "updatedAt": "2019-09-25T19:07:16Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Interesting... you're right, the git push for the typo from my local PC automatically made it appear here, apparently. Thx!",
              "createdAt": "2019-09-25T19:07:16Z",
              "updatedAt": "2019-09-25T19:07:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMzE5ODA0",
          "commit": {
            "abbreviatedOid": "149f58a"
          },
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T19:44:34Z",
          "updatedAt": "2019-09-25T19:44:35Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "if you use git commit -a --amend, need to use git push -f(orce) because rewrite history... (but also work..)",
              "createdAt": "2019-09-25T19:44:34Z",
              "updatedAt": "2019-09-25T19:44:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 66,
      "id": "MDExOlB1bGxSZXF1ZXN0MzkzMDc2NDE3",
      "title": "Upgrade Makefile",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/66",
      "state": "MERGED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This upgrades the Makefile to the latest template from Martin Thomson.\r\n",
      "createdAt": "2020-03-24T15:49:16Z",
      "updatedAt": "2020-03-30T03:02:24Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cb6a5c353e8e48573f76c5f3b7933410600cf453",
      "headRepository": "mcr/pcapng",
      "headRefName": "added-mt-Makefile",
      "headRefOid": "c447c77c2b18acd93d2870e03c91ff7e7821c41b",
      "closedAt": "2020-03-27T17:23:06Z",
      "mergedAt": "2020-03-27T17:23:06Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "58b64ac865338f7bfd8b661281701ba22417ffc8"
      },
      "comments": [
        {
          "author": "alagoutte",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Look good (may be also convert after to Markdown ?)",
          "createdAt": "2020-03-24T19:50:50Z",
          "updatedAt": "2020-03-24T19:50:50Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I would like to convert to markdown if I have everyone's blessing.",
          "createdAt": "2020-03-25T00:56:49Z",
          "updatedAt": "2020-03-25T00:56:49Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, I would like to convert to markdown if I have everyone's blessing.\r\n\r\nUsing something such as [mmark](https://github.com/mmarkdown/mmark) to convert from Markdown to xml2rfc?\r\n\r\nSee also [\"Writing RFCs with Markdown\"](https://danielfett.de/2019/02/28/writing-rfcs-with-markdown/) and [\"How to Create an Internet-Draft Using Markdown\"](https://datatracker.ietf.org/meeting/104/materials/slides-104-edu-sessf-how-to-create-an-internet-draft-using-xml-or-markdown-markdown-01); mmark is listed on the [Tools for Creating Internet-Drafts page](https://www.rfc-editor.org/pubprocess/tools/) on rfc-editor.org.",
          "createdAt": "2020-03-25T01:43:57Z",
          "updatedAt": "2020-03-25T01:47:49Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> This upgrades the Makefile to the latest template from Martin Thomson.\r\n\r\nSo that's [Martin Thomson](https://datatracker.ietf.org/person/Martin%20Thomson) of the [Tools Architecture and Strategy Team (tools-arch)](https://datatracker.ietf.org/group/tools-arch/about/), presumably.\r\n\r\nAre these from the https://github.com/martinthomson/i-d-template repository?",
          "createdAt": "2020-03-25T05:39:55Z",
          "updatedAt": "2020-03-25T05:39:55Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Yes, I would like to convert to markdown if I have everyone's blessing.\r\n> \r\n> Using something such as [mmark](https://github.com/mmarkdown/mmark) to convert from Markdown to xml2rfc?\r\n\r\nI would use kramdown. https://github.com/cabo/kramdown-rfc2629  you can see many IDs that I edit in my github repo, and also at ietf-homenet-wg or ietf-roll-wg or anima-wg.\r\n",
          "createdAt": "2020-03-26T02:12:20Z",
          "updatedAt": "2020-03-26T02:12:20Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > Yes, I would like to convert to markdown if I have everyone's blessing.\r\n> > \r\n> > \r\n> > Using something such as [mmark](https://github.com/mmarkdown/mmark) to convert from Markdown to xml2rfc?\r\n> \r\n> I would use kramdown. https://github.com/cabo/kramdown-rfc2629 you can see many IDs that I edit in my github repo, and also at ietf-homenet-wg or ietf-roll-wg or anima-wg.\r\n\r\nkramdown itself being at https://kramdown.gettalong.org.",
          "createdAt": "2020-03-26T03:15:45Z",
          "updatedAt": "2020-03-26T03:15:45Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So having the checked-in version be Markdown would mean that the home page could just link to the copy of the Markdown version in the repository and GitHub would automatically format it into a Web page with its Markdown renderer, and kramdown + pick-your-xml2rfc-to-XXX-converter would be used to produce text/standard-html-version-of-an-RFC/PDF/whatever?",
          "createdAt": "2020-03-26T03:22:35Z",
          "updatedAt": "2020-03-26T03:22:35Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> So having the checked-in version be Markdown would mean that the home page could just link to the copy of the Markdown version in the repository and GitHub would automatically format it into a Web page with its Markdown renderer, and kramdown + pick-your-xml2rfc-to-XXX-converter would be used to produce text/standard-html-version-of-an-RFC/PDF/whatever?\r\n\r\nwell, it's most true. There is some meta data and some special markup that github do not understand, but they tolerate it just fine.\r\n",
          "createdAt": "2020-03-26T15:53:25Z",
          "updatedAt": "2020-03-26T15:53:25Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "@guyharris if there are no further issues, I guess I can now merge my own code, or you can push the button.\r\n",
          "createdAt": "2020-03-27T17:11:04Z",
          "updatedAt": "2020-03-27T17:11:04Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So is there a reason why the links to run the current XML file for the pcapng draft through the xml2rfc site were removed, to preview what we currently have?",
          "createdAt": "2020-03-27T17:26:08Z",
          "updatedAt": "2020-03-27T17:26:08Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> So is there a reason why the links to run the current XML file for the pcapng draft through the xml2rfc site were removed, to preview what we currently have?\r\n\r\nI just rebased the README, and tried to merge things sanely. I was trying to prefer the process that the MT Makefiles prefer (which is not, btw, the way I do things, but, I'm trying to hold my nose and go with majority rule).  I don't have a huge preference.\r\n",
          "createdAt": "2020-03-27T17:34:05Z",
          "updatedAt": "2020-03-27T17:34:05Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> > So is there a reason why the links to run the current XML file for the pcapng draft through the xml2rfc site were removed, to preview what we currently have?\r\n> \r\n> I just rebased the README, and tried to merge things sanely. I was trying to prefer the process that the MT Makefiles prefer (which is not, btw, the way I do things, but, I'm trying to hold my nose and go with majority rule). I don't have a huge preference.\r\n\r\nOK, I put the links back; they seem to work.  They completely bypass the Makefile, just letting the IETF's xml2rfc server do the work.  That might require some further tweaking if and when we go to Markdown for the source, but, for now, let's continue to have the \"show me the current draft in HTML/text/PDF\" links work.\r\n\r\nThe \"Editor's copy\" link you added gets a 404.  The \"Individual draft\" link goes to, I guess, the last version that was ever provided to the IETF.",
          "createdAt": "2020-03-27T18:20:15Z",
          "updatedAt": "2020-03-27T18:20:15Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\n    > The \"Editor's copy\" link you added gets a 404.  The \"Individual draft\"\n    > link goes to, I guess, the last version that was ever provided to the\n    > IETF.\n\nYes, it requires some additional github and travis-ci setup, which I have not done yet.\nI don't always do it, sometimes I just generate the files and commit them,\nbut that's a bit like commiting .o files.\n\n\n",
          "createdAt": "2020-03-30T03:02:24Z",
          "updatedAt": "2020-03-30T03:02:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0MzkzODEyMjA0",
      "title": "Added ZigBee NWK and APS Secret Types to the Decryption Secrets Block",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/67",
      "state": "MERGED",
      "author": "chrisbrandson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ZigBee traffic cannot be dissected without NWK and APS keys. At present the must be manually entered and transfered which is error prone and inconvenient. Since the dissector knows what these are it can record them in a Decryption Secrets Block at the time of capture.",
      "createdAt": "2020-03-25T20:31:00Z",
      "updatedAt": "2020-04-08T20:47:12Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cd204248e21d3df07bf8ec15cf36877fb38e435d",
      "headRepository": "chrisbrandson/pcapng",
      "headRefName": "master",
      "headRefOid": "65d3c1ea9695bbb18816c5e1f75c011912089905",
      "closedAt": "2020-04-08T20:47:12Z",
      "mergedAt": "2020-04-08T20:47:12Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "b054cdfa85fe8f9919bf4c120138e2ecd10293ca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTQxMjMz",
          "commit": {
            "abbreviatedOid": "94c0821"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-25T21:14:01Z",
          "updatedAt": "2020-03-25T21:14:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "So these are binary keys, right?",
              "createdAt": "2020-03-25T21:14:01Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTEyNjI2",
          "commit": {
            "abbreviatedOid": "94c0821"
          },
          "author": "chrisbrandson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T00:41:34Z",
          "updatedAt": "2020-03-27T00:41:35Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yes these are binary keys. These are same as the \"Key\" in the Pre-configured Keys dialog in the ZigBee Preferences in the Wireshark UI. This is one of two sources for these keys. The other is a ZigBee APS Transport Key frame that contains the NWK key.",
              "createdAt": "2020-03-27T00:41:34Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTIxMDg4",
          "commit": {
            "abbreviatedOid": "94c0821"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T01:11:47Z",
          "updatedAt": "2020-03-27T01:11:48Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I might add \"binary\" after \"16 octet\" in both places, just so nobody thinks it's a textual representation in hex or something such as that.\r\n\r\nDoes \"R21\" mean ZigBee Document 05-3474-21?  If so, I'm not seeing anything in 2.2.5.1 about the APS key.\r\n\r\nAnd it says \"Each 16 octet AES-128 key secures frames exchanged between a pair of network nodes.\"  If that means there's more than one APS key, one for each node pair, then is the ZigBee APS Key item a single key, so that you have multiple such items, or a list of keys, and, in either case, how do you associate an APS Key with a pair of endpoints?",
              "createdAt": "2020-03-27T01:11:48Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTgzNTc4",
          "commit": {
            "abbreviatedOid": "94c0821"
          },
          "author": "chrisbrandson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T20:37:00Z",
          "updatedAt": "2020-03-27T20:37:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Thanks for the feedback! I've made some changed to address your comments. Hopefully they are addressed.",
              "createdAt": "2020-03-27T20:37:01Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTg5MjY4",
          "commit": {
            "abbreviatedOid": "d5001e3"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T20:47:12Z",
          "updatedAt": "2020-03-27T20:47:13Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "So an NWK Key entry applies to all packets in packet blocks between the DSB in which an NWK Key appears and the next DSB in which an NWK Key appears?\r\n\r\nAlso, if, for example, a capture includes traffic from multiple PANs, what indicates the PAN to which a given NWK Key applies?",
              "createdAt": "2020-03-27T20:47:13Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTkwMzAw",
          "commit": {
            "abbreviatedOid": "d5001e3"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T20:49:02Z",
          "updatedAt": "2020-03-27T20:49:02Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "So an APS Key entry applies to all packets between the nodes in packet blocks between the DSB in which an APS Key appears and the next DSB in which an APS Key for that node pair appears?\r\n\r\n> There is a APS Key DSB for each node pair for which the Link Key is known.\r\n\r\nSo does an APS Key entry include, in addition to the key, an indication of the node pair to which it applies?",
              "createdAt": "2020-03-27T20:49:02Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODU2NzA3",
          "commit": {
            "abbreviatedOid": "d5001e3"
          },
          "author": "chrisbrandson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-02T23:59:48Z",
          "updatedAt": "2020-04-02T23:59:49Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "In essence yes. The purpose of the DSB is to replace the Pre-configured Keys UAT available at the time of capture but very likely different later when the PCAPNG file is opened. However you raise a good point because the key when looking up the nwk hints is the PANID. So, when loading the file the hash table lookup will need the PANID to locate the nwk_keyring. I'll update the document.",
              "createdAt": "2020-04-02T23:59:48Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODU5OTYw",
          "commit": {
            "abbreviatedOid": "d5001e3"
          },
          "author": "chrisbrandson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-03T00:10:17Z",
          "updatedAt": "2020-04-03T00:10:17Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "The APS Key will behave the same as the NWK Key above. Unfortunately the design of the dissector is such that both NWK keys and APS keys are stored in the same keyring. This means that APS Keys will also include the PANID. Although they are not needed now, we should probably include the short address of both pairs. Because the link key is symmetric the order doesn't matter (A,B) or (B,A) so to avoid having to check both, I would suggest a convention (low,high) i.e. (A,B) where A<B. I'll look at adding this change too.",
              "createdAt": "2020-04-03T00:10:17Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODYzMTky",
          "commit": {
            "abbreviatedOid": "d5001e3"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-03T00:20:59Z",
          "updatedAt": "2020-04-03T00:20:59Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "> the design of the dissector\r\n\r\n...is irrelevant; pcapng isn't a tcpdump or Wireshark file format, it's a general file format, and if the best design forces tcpdump or Wireshark dissectors to be changed, so be it.",
              "createdAt": "2020-04-03T00:20:59Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODc0Mjkw",
          "commit": {
            "abbreviatedOid": "1cd10a2"
          },
          "author": "chrisbrandson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-03T00:57:56Z",
          "updatedAt": "2020-04-03T00:57:57Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "This is why I've added separate tags for NWK and APS keys. The dissector doesn't distinguish, but from a ZigBee perspective it should.",
              "createdAt": "2020-04-03T00:57:57Z",
              "updatedAt": "2020-04-07T19:01:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjY0NzI2",
      "title": "Fix typos",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/69",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-27T10:15:04Z",
      "updatedAt": "2020-03-27T18:01:46Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "18ef1def2d861f6afed2274c12b7abbb7f84c637",
      "headRepository": "fxlb/pcapng",
      "headRefName": "typos",
      "headRefOid": "c5fae0b3ef38b6b76477ec784d62c2dd52aab929",
      "closedAt": "2020-03-27T10:41:44Z",
      "mergedAt": "2020-03-27T10:41:44Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "364eccb0e15745ec68588fd44314d269bfddabaa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjgwNTA3",
      "title": "Add sub chapiter for latest",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/70",
      "state": "MERGED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-27T10:46:46Z",
      "updatedAt": "2020-03-27T10:51:13Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "364eccb0e15745ec68588fd44314d269bfddabaa",
      "headRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "headRefName": "readme-chapiter",
      "headRefOid": "dac4b66b21b065c483a13baae11d9615e53ec46a",
      "closedAt": "2020-03-27T10:51:13Z",
      "mergedAt": "2020-03-27T10:51:13Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "28e7aa3d7fef702830b7ae2b7d68d1ec26b2ffe6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzUwNzEw",
      "title": "Add LINKTYPES reference and use it",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/72",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should solve #71.",
      "createdAt": "2020-03-27T13:22:11Z",
      "updatedAt": "2020-03-27T13:30:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cb6a5c353e8e48573f76c5f3b7933410600cf453",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "b73fc44dcc785c5f928493d50430a060b107c74d",
      "closedAt": "2020-03-27T13:24:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Bug, closed, replace by #73.",
          "createdAt": "2020-03-27T13:30:42Z",
          "updatedAt": "2020-03-27T13:30:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzU0NjYx",
      "title": "Add LINKTYPES reference and use it",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/73",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should solve #71.",
      "createdAt": "2020-03-27T13:29:44Z",
      "updatedAt": "2020-03-27T17:17:35Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cb6a5c353e8e48573f76c5f3b7933410600cf453",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "bf8834f1b742fa5d63766d11abe2708a162f30db",
      "closedAt": "2020-03-27T17:17:35Z",
      "mergedAt": "2020-03-27T17:17:35Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "8c9c1e2c79af045664274a02d273cbe11d7ec903"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 74,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODg1MDQz",
      "title": "Add a revision number to the docName",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/74",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\n",
      "createdAt": "2020-03-27T17:34:34Z",
      "updatedAt": "2020-03-27T22:05:28Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c7570f7c64a5fc7f435bdf020fc1bdc1be53f7a1",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "ed09d2e643237439e82fd244c6df8fa333f8b987",
      "closedAt": "2020-03-27T19:06:22Z",
      "mergedAt": "2020-03-27T19:06:22Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "1cbd4724c2b688f01db034ab50a3e9de32128274"
      },
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Link to the -01 ? pcap or pcapng ?",
          "createdAt": "2020-03-27T21:56:03Z",
          "updatedAt": "2020-03-27T21:56:03Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I'm mixing the two.  I'll fix up the pcapng document.",
          "createdAt": "2020-03-27T22:05:28Z",
          "updatedAt": "2020-03-27T22:05:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTE0Njg3",
          "commit": {
            "abbreviatedOid": "41e370c"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T18:42:07Z",
          "updatedAt": "2020-03-27T18:42:07Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "-01, or -00?  [These guidelines](https://www.ietf.org/standards/ids/guidelines/#7) say \"If the document is a new one (i.e., a version of \"00\") ...\".",
              "createdAt": "2020-03-27T18:42:07Z",
              "updatedAt": "2020-03-27T18:45:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTE3NTE0",
          "commit": {
            "abbreviatedOid": "ed09d2e"
          },
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T18:46:37Z",
          "updatedAt": "2020-03-27T18:46:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yes ! Updated.",
              "createdAt": "2020-03-27T18:46:37Z",
              "updatedAt": "2020-03-27T18:46:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjEzNTgy",
          "commit": {
            "abbreviatedOid": "ed09d2e"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T21:35:33Z",
          "updatedAt": "2020-03-27T21:35:33Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "There's already a -01 that presumably @mcr submitted, so maybe we should go to -02 now.",
              "createdAt": "2020-03-27T21:35:33Z",
              "updatedAt": "2020-03-27T21:35:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 75,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODk2ODkw",
      "title": "added Michael Richardson to author list to help editing process",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/75",
      "state": "MERGED",
      "author": "mcr",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "whether you want to keep me on the list long-term (the IETF has a 5 author guideline), it will help me to post new revisions if I am on the author list.\r\n",
      "createdAt": "2020-03-27T18:01:34Z",
      "updatedAt": "2020-03-27T19:57:15Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "58b64ac865338f7bfd8b661281701ba22417ffc8",
      "headRepository": "mcr/pcapng",
      "headRefName": "add-Michael-Richardson",
      "headRefOid": "da2df88f0c208933e67bd6dbcd5f99cdffae58a1",
      "closedAt": "2020-03-27T19:57:15Z",
      "mergedAt": "2020-03-27T19:57:15Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "1c1bebfcf53f244aa2bb479e41a84a8e84017fa0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTAzNTEy",
          "commit": {
            "abbreviatedOid": "da2df88"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "If you're going to be involved in the process, your name should be there even if you don't ever modify a single byte of the document :-), and you probably will end up modifying them.",
          "createdAt": "2020-03-27T18:25:35Z",
          "updatedAt": "2020-03-27T18:25:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTM3MjEx",
      "title": "Fix copy & paste errors",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/77",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-27T19:39:12Z",
      "updatedAt": "2020-03-27T19:42:52Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "1cbd4724c2b688f01db034ab50a3e9de32128274",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "10d051491bdf7ce374311babda9f7ffed636502d",
      "closedAt": "2020-03-27T19:42:52Z",
      "mergedAt": "2020-03-27T19:42:52Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "17d1181cd59e8e072484cb50e6448f4a19565bdb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 78,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTQzMTQ3",
      "title": "pcapng: Add a revision number to the docName",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/78",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-27T19:54:32Z",
      "updatedAt": "2020-03-30T03:36:10Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "b257b1c70932a1bbc0fea73076f2299a76c7dec1",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "b257b1c70932a1bbc0fea73076f2299a76c7dec1",
      "closedAt": "2020-03-27T22:09:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already done.",
          "createdAt": "2020-03-27T22:11:14Z",
          "updatedAt": "2020-03-27T22:11:14Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\n    >> @@ -10,7 +10,7 @@\n\n    > <rfc category='info'\n    > ipr='trust200902'\n    > -     docName=\"draft-tuexen-opsawg-pcapng-latest\">\n    > +     docName=\"draft-tuexen-opsawg-pcapng-latest-00\">\n\nIt needs to be -latest for the new makefile.\nIt's a bit daft I think, but that's how that makefile works.\nI have simpler Makefiles if the group prefers.\n\n\n",
          "createdAt": "2020-03-30T03:14:40Z",
          "updatedAt": "2020-03-30T03:14:40Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "-latest, or would -00 also work?  -latest-00 is probably wrong; -latest upsets the IETF RFC linting tool Fran\u00e7ois mentioned.",
          "createdAt": "2020-03-30T03:16:49Z",
          "updatedAt": "2020-03-30T03:16:49Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "\nGuy Harris <notifications@github.com> wrote:\n    > -latest, or would -00 also work?  -latest-00 is probably wrong; -latest\n    > upsets the IETF RFC linting tool Fran\u00e7ois mentioned.\n\nThe linting tool is wrong, and/or isn't to be used with that file.\nIt has to say latest, so that the rest of the Makefile will work.\n\"make publish\" will produce the publishable file.\nIf you prefer, we can use a simpler Makefile.\n\n\n",
          "createdAt": "2020-03-30T03:36:10Z",
          "updatedAt": "2020-03-30T03:36:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTY0MzUw",
          "commit": {
            "abbreviatedOid": "65616f4"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-27T20:02:28Z",
          "updatedAt": "2020-03-27T20:02:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This one, on the other hand, should perhaps be -01, as [there appears to be a -00 draft on the IETF site](https://tools.ietf.org/html/draft-tuexen-opsawg-pcapng-00), although it doesn't show up on datatracker.ietf.org.  @mcr, do you know what the status of that draft is?",
              "createdAt": "2020-03-27T20:02:29Z",
              "updatedAt": "2020-03-27T22:09:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 79,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTU1MDYx",
      "title": "pcap: Update RFC 2119 key words",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/79",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "s/MUST not/MUST NOT/",
      "createdAt": "2020-03-27T20:26:31Z",
      "updatedAt": "2020-03-27T21:38:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "2c5a75a3399042cf53c2f7bdf3159e59115a5656",
      "headRepository": "fxlb/pcapng",
      "headRefName": "must",
      "headRefOid": "ffbcc9aa4a5df27e2f85ac488f70a20d37ccae5d",
      "closedAt": "2020-03-27T21:38:42Z",
      "mergedAt": "2020-03-27T21:38:42Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "b0639cd6a0cf856868a4da7772c9bcbb1b953ef4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 80,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTYxMjk0",
      "title": "pcap: Rename the draft to draft-gharris-opsawg-pcap-00.xml",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/80",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This fix the warning from https://tools.ietf.org/tools/idnits/idnits.pyht\r\n\r\n  == Mismatching filename: the document gives the document name as\r\n     'draft-gharris-opsawg-pcap-00', but the file name used is\r\n     'draft-gharris-opsawg-pcap'",
      "createdAt": "2020-03-27T20:43:12Z",
      "updatedAt": "2020-03-27T21:57:47Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "2c5a75a3399042cf53c2f7bdf3159e59115a5656",
      "headRepository": "fxlb/pcapng",
      "headRefName": "rename",
      "headRefOid": "3a9c01dc35876cdf9472c2373c13cf19b382c329",
      "closedAt": "2020-03-27T21:57:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing for now. Perhaps use of symbolic links is better.",
          "createdAt": "2020-03-27T21:57:47Z",
          "updatedAt": "2020-03-27T21:57:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 81,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTAzNjIw",
      "title": "pcapng: Remove duplicate words",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/81",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Found with:\r\n$ git grep -E -n \"(\\b[a-zA-Z]+) +\\1\\b\"",
      "createdAt": "2020-03-28T14:32:26Z",
      "updatedAt": "2020-03-28T17:05:31Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "de1b89c8c9ed73d2d20896a61ca16fc899951d5e",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "7434edcd5103ab63dc62431a8262d5dff236ab50",
      "closedAt": "2020-03-28T17:05:31Z",
      "mergedAt": "2020-03-28T17:05:31Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "09026fabf00ee1c4ddcd43e265f4ca6f2c1978ae"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTM3ODAz",
      "title": "Replace multiple blank lines with a single blank line",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/82",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-01T17:41:47Z",
      "updatedAt": "2020-04-01T22:32:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "961a003fc0df31a09b57d595534ccff9afcf9aa4",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "30917a7a3cb42c4cad35af33bdc2a10528949dae",
      "closedAt": "2020-04-01T22:32:42Z",
      "mergedAt": "2020-04-01T22:32:42Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "1b684bf884ce14aac3f8f82f5180df584c090e85"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "@mcr, are the DTD and XSLT files just taken from something the IETF has?",
          "createdAt": "2020-04-01T17:54:31Z",
          "updatedAt": "2020-04-01T17:54:31Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The DTD  date is \"2004-04-04\".\r\nThis one has a date of \"2009-10-06\" (https://github.com/reschke/xml2rfc/blob/master/rfc2629.dtd)\r\nIs there an official version ?",
          "createdAt": "2020-04-01T19:23:31Z",
          "updatedAt": "2020-04-01T19:23:31Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The XSLT date is :\r\nCopyright (c) 2006-2007, Julian Reschke (julian.reschke@greenbytes.de)\r\nThis is a more recent here : https://github.com/reschke/xml2rfc/blob/master/rfc2629.xslt\r\nCopyright (c) 2006-2020, Julian Reschke (julian.reschke@greenbytes.de)",
          "createdAt": "2020-04-01T19:38:36Z",
          "updatedAt": "2020-04-01T19:38:36Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "I object.\r\nBlank lines in the source might represent pauses in thought or places where writers wanted to distance things in order to think better.\r\nThe DTD and XSLT files should not be touched (although they probably are not needed, period).\r\nThis just seems like busy work to me.\r\n",
          "createdAt": "2020-04-01T19:54:16Z",
          "updatedAt": "2020-04-01T19:54:16Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated without DTD and XSLT.\r\nYou can close it if you prefer.",
          "createdAt": "2020-04-01T20:04:24Z",
          "updatedAt": "2020-04-01T20:04:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 84,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk3Mzc5NTQw",
      "title": "describe SnapLen before LinkType, not after",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/84",
      "state": "MERGED",
      "author": "lukem",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Order the meaning of the fields in the File Header\r\nper the File Header order",
      "createdAt": "2020-04-02T06:21:26Z",
      "updatedAt": "2020-04-02T07:08:40Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "1b684bf884ce14aac3f8f82f5180df584c090e85",
      "headRepository": null,
      "headRefName": "file-header-desc-order",
      "headRefOid": "a0466e3b3d6410abceaac54917606c9678d25efa",
      "closedAt": "2020-04-02T06:30:33Z",
      "mergedAt": "2020-04-02T06:30:33Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "bd43b96f9d5d40e54ff7c330f8efd11821311d74"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzkyNTIw",
      "title": "describe former thiszone & sigfigs separately",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/85",
      "state": "MERGED",
      "author": "lukem",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Split File Header field Reserved into Reserved1 and Reserved2\r\nand expand upon the previous behaviour.",
      "createdAt": "2020-04-02T06:59:17Z",
      "updatedAt": "2020-04-02T07:08:29Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "bd43b96f9d5d40e54ff7c330f8efd11821311d74",
      "headRepository": null,
      "headRefName": "separate-reserved-fields",
      "headRefOid": "f8562bb919439bce525061d32f11472a63fc2205",
      "closedAt": "2020-04-02T07:03:21Z",
      "mergedAt": "2020-04-02T07:03:21Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "1c06e56b41fa965820699fad7d52bc1d23bc0870"
      },
      "comments": [
        {
          "author": "lukem",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I notice that the libpcap commit https://github.com/the-tcpdump-group/libpcap/commit/5f2a5c03e0f91bc2dc2ae33838db273dd6c7d8d9 in August 2018 changed the documentation to note that the two fields are stored as 0, but many implementations haven't incorporated this version yet. That's why I felt it was useful to expand the documentation",
          "createdAt": "2020-04-02T07:03:51Z",
          "updatedAt": "2020-04-02T07:03:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 86,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk3Mzk3MjQ2",
      "title": "use \"... other than\" not \"other ... than\"",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/86",
      "state": "MERGED",
      "author": "lukem",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-02T07:12:14Z",
      "updatedAt": "2020-04-02T07:18:32Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "1c06e56b41fa965820699fad7d52bc1d23bc0870",
      "headRepository": null,
      "headRefName": "other-than-pcap",
      "headRefOid": "a9044d5d073a49872619b51f700f7adc1568c742",
      "closedAt": "2020-04-02T07:14:25Z",
      "mergedAt": "2020-04-02T07:14:25Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "cd204248e21d3df07bf8ec15cf36877fb38e435d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 87,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDk5Njcy",
      "title": "Fix typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/87",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-04T10:02:44Z",
      "updatedAt": "2020-04-04T10:20:03Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cd204248e21d3df07bf8ec15cf36877fb38e435d",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "7a43e8c0db1c3e1ad475869c9747f11b8edf37cb",
      "closedAt": "2020-04-04T10:20:03Z",
      "mergedAt": "2020-04-04T10:20:02Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "c82d7b0437254402ad45e2e286f8ec23f82a93c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 88,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk4NTAyNTg1",
      "title": "Avoid non ASCII characters",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/88",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-04T10:29:20Z",
      "updatedAt": "2020-04-04T10:54:13Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c82d7b0437254402ad45e2e286f8ec23f82a93c9",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "19d14ce1ca0b62a815aa58f49d67558fdbde56f1",
      "closedAt": "2020-04-04T10:54:13Z",
      "mergedAt": "2020-04-04T10:54:13Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "29488352d80beafbe2abcf84db02e750aa9af0ce"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 89,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk4NTE5MDcx",
      "title": "Fix links",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/89",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-04T11:54:33Z",
      "updatedAt": "2020-04-04T19:22:39Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "29488352d80beafbe2abcf84db02e750aa9af0ce",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "e4c4e1b04a4aec3c543a04f53cb0486e2a9c51e8",
      "closedAt": "2020-04-04T19:22:39Z",
      "mergedAt": "2020-04-04T19:22:39Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "d277c880bce0766977ed1111a13906b172612c8c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 90,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAxMjY0MDgx",
      "title": "Fix a stale link",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/90",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-09T07:45:58Z",
      "updatedAt": "2020-04-09T08:47:41Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "b054cdfa85fe8f9919bf4c120138e2ecd10293ca",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "19019ea6338099c7e75c125e789b8033dba7c62b",
      "closedAt": "2020-04-09T08:47:40Z",
      "mergedAt": "2020-04-09T08:47:40Z",
      "mergedBy": "packetfoo",
      "mergeCommit": {
        "oid": "201cb1d0e39ba5e32ee11a8e33ee5adc7178f19e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjA0MTkz",
          "commit": {
            "abbreviatedOid": "19019ea"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-09T08:47:22Z",
          "updatedAt": "2020-04-09T08:47:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAxMjg2MTk4",
      "title": "epb: add three new epb options, packetid, queue and verdict",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/91",
      "state": "MERGED",
      "author": "chaudron",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Signed-off-by: Eelco Chaudron <echaudro@redhat.com>",
      "createdAt": "2020-04-09T08:32:21Z",
      "updatedAt": "2021-04-29T07:33:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "22bebb865b28b9421b5761ae4190ecea88738f7b",
      "headRepository": null,
      "headRefName": "ecb_options",
      "headRefOid": "b5b2c088b23fdf6a14a1a44a1bb6e9472e4d23d3",
      "closedAt": "2020-06-03T01:04:52Z",
      "mergedAt": "2020-06-03T01:04:52Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "587eb9f9415b7142a4a19a3d825883f3579fa301"
      },
      "comments": [
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if I had to add my name as an editor if I added text. If not I can remove it, no problem.\r\n\r\nAlso for some reason, I'm not getting emails from the pcap-ng-format mailing list. I've asked the pcap-ng-format-owner to verify I'm properly registered but got no update. So I will monitor the list manually, but if you do send related emails there I would appreciate it if you can put me on CC directly.\r\n",
          "createdAt": "2020-04-09T08:35:13Z",
          "updatedAt": "2020-04-09T08:35:13Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Eelco Chaudron <notifications@github.com> wrote:\n    > Not sure if I had to add my name as an editor if I added text. If not I\n    > can remove it, no problem.\n\nGenerally, in an IETF document, we would acknowledge all contributors in the\nAcknolwedgements section, but only list the lead authors/editors in the\nheading.  There is a guideline for five authors only on an RFC, and we'll\njustify or prune names if/when we get closer to that stage.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [\n\n",
          "createdAt": "2020-04-09T14:20:44Z",
          "updatedAt": "2020-04-09T14:20:44Z"
        },
        {
          "author": "netoptimizer",
          "authorAssociation": "NONE",
          "body": "General question what does \"epb\" stand for?",
          "createdAt": "2020-04-14T12:58:59Z",
          "updatedAt": "2020-04-14T12:58:59Z"
        },
        {
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \r\n> \r\n> General question what does \"epb\" stand for?\r\n\r\nIt stands for \"Enhanced Packet Block\", which is the most commonly used block type to store each packet.",
          "createdAt": "2020-04-14T13:13:05Z",
          "updatedAt": "2020-04-14T13:13:05Z"
        },
        {
          "author": "netoptimizer",
          "authorAssociation": "NONE",
          "body": "> > General question what does \"epb\" stand for?\r\n> \r\n> It stands for \"Enhanced Packet Block\", which is the most commonly used block type to store each packet.\r\n\r\nThanks for explaining that! :-)",
          "createdAt": "2020-04-14T13:44:50Z",
          "updatedAt": "2020-04-14T13:44:50Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">Generally, in an IETF document, we would acknowledge all contributors in the Acknolwedgements section, but only list the lead authors/editors in the heading. There is a guideline for five authors only on an RFC, and we'll justify or prune names if/when we get closer to that stage.\r\n> [\u2026](#)\r\n\r\nOk, will leave it in for now, or let me know and I'll remove/move my name.\r\n",
          "createdAt": "2020-04-15T07:38:35Z",
          "updatedAt": "2020-04-15T07:38:35Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Anything pending from my side, or something I can do to get this merged?\r\n",
          "createdAt": "2020-04-22T15:49:35Z",
          "updatedAt": "2020-04-22T15:49:35Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Commited the changes suggested by @guyharris as I got no further feedback. Please let me know if I need to change more...\r\n",
          "createdAt": "2020-04-30T16:07:58Z",
          "updatedAt": "2020-04-30T16:07:58Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@guyharris pushed the suggested changes and fixed one other issue with a duplicate ecb_option number. Anything else?",
          "createdAt": "2020-05-04T09:09:02Z",
          "updatedAt": "2020-05-04T09:09:02Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@guyharris anything else I can do to speed up the acceptance of this change? I've done a rough implementation in WireShark to display these new fields.\r\n",
          "createdAt": "2020-05-12T13:10:49Z",
          "updatedAt": "2020-05-12T13:10:49Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@guyharris @mcr anything I can do to speed up this merge request? Asking as I have a project that would really benefit from this.",
          "createdAt": "2020-06-02T19:35:03Z",
          "updatedAt": "2020-06-02T19:35:03Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> @guyharris @mcr anything I can do to speed up this merge request? Asking as I have a project that would really benefit from this.\r\n\r\nI'm OK with it; @mcr, are you OK with @chaudron's appearance in the authors list?",
          "createdAt": "2020-06-02T19:52:38Z",
          "updatedAt": "2020-06-02T19:52:38Z"
        },
        {
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks a lot for merging this!!",
          "createdAt": "2020-06-03T15:05:44Z",
          "updatedAt": "2020-06-03T15:05:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjAzMDg5",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "packetfoo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-09T08:45:49Z",
          "updatedAt": "2020-04-09T08:45:50Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "What does \"verdict\" mean? I assume it means firewall/ACL activity like \"drop\", \"reject\", \"accept\"? Not all readers might be familiar with the term, so it would be good to explain it just a bit :-)",
              "createdAt": "2020-04-09T08:45:50Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODk4ODQ4",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "netoptimizer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-14T12:56:46Z",
          "updatedAt": "2020-04-14T12:56:47Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Typo: XPD -> XDP",
              "createdAt": "2020-04-14T12:56:46Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODk5NTIy",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "netoptimizer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-14T12:57:36Z",
          "updatedAt": "2020-04-14T12:57:37Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Typo: Linux_eBPD_XDP -> Linux_eBPF_XDP",
              "createdAt": "2020-04-14T12:57:37Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTIwNjAz",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-15T07:29:48Z",
          "updatedAt": "2020-04-15T07:29:49Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Added some additional explanation",
              "createdAt": "2020-04-15T07:29:49Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTIyNDAy",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-15T07:32:29Z",
          "updatedAt": "2020-04-15T07:32:30Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "> Eelco Chaudron <notifications@github.com> wrote: Not sure if I had to add my name as an editor if I added text. If not I can remove it, no problem. Generally, in an IETF document, we would acknowledge all contributors in the Acknolwedgements section, but only list the lead authors/editors in the heading. There is a guideline for five authors only on an RFC, and we'll justify or prune names if/when we get closer to that stage.\r\n> [\u2026](#)\r\n\r\nOk, will leave it for now, or let me know if you want me to remove/move.",
              "createdAt": "2020-04-15T07:32:29Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTIyNTcx",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-15T07:32:47Z",
          "updatedAt": "2020-04-15T07:32:48Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Thanks! fixed in last commit",
              "createdAt": "2020-04-15T07:32:48Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTIyNjI1",
          "commit": {
            "abbreviatedOid": "1d89b75"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-15T07:32:53Z",
          "updatedAt": "2020-04-15T07:32:53Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Thanks! fixed in last commit",
              "createdAt": "2020-04-15T07:32:53Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDM0NDc3",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-22T17:50:20Z",
          "updatedAt": "2020-04-22T17:50:20Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "\"XXX\" presumably meaning \"variable\".",
              "createdAt": "2020-04-22T17:50:20Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDM1Mzcz",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-22T17:51:27Z",
          "updatedAt": "2020-04-22T17:51:28Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "These should probably point to a source indicating what the values for Linux eBPF TC and Linux eBPF XDP values signify.",
              "createdAt": "2020-04-22T17:51:27Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDM5MDg3",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-22T17:56:03Z",
          "updatedAt": "2020-04-22T17:56:04Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "So the capture has two packets that are different from each other but that are the same?\r\n\r\nThis probably needs to be rephrased in a way to make it clearer that \"the packet\" doesn't refer to the exact sequence of octets.  Perhaps it should include a less-exotic example than an XDP one, such as a packet captured on a multiple-interface router that arrives on one interface, gets its IP TTL reduced, and is transmitted on another interface.",
              "createdAt": "2020-04-22T17:56:03Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTMwMjgx",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T09:39:44Z",
          "updatedAt": "2020-04-23T09:39:44Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Yes, it means variable, copied this layout from the epb_hash option above. I will change XXX to variable, as it makes more sense.",
              "createdAt": "2020-04-23T09:39:44Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTg3Njk4",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T10:59:23Z",
          "updatedAt": "2020-04-23T10:59:24Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "What about:\r\n\r\nThe verdict type can be: Hardware (type\r\n            octet = 0, size = variable), Linux_eBPF_TC (type octet = 1, size = 8\r\n            (64-bit unsigned integer), value = TC_ACT_* as defined in the Linux\r\n            <eref target=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/pkt_cls.h\">pck_cls.h</eref>\r\n            include), Linux_eBPF_XDP (type octet = 2, size = 8 (64-bit unsigned\r\n            integer), value = xdp_action as defined in the Linux\r\n            <eref target=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/bpf.h\">pbf.h</eref>\r\n            include).</t>",
              "createdAt": "2020-04-23T10:59:24Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTkzNjc4",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T11:08:14Z",
          "updatedAt": "2020-04-23T11:08:14Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Like the idea, what about changing the example to:\r\n\r\nAn example could be a router that captures packets on all its interfaces in both directions. When a packet hits interface A on ingress, an ECB entry gets created, TTL gets decremented, and right before it egresses on interface B another ECB entry gets created in the trace file. In this case, two packets are in the capture file, which are not identical but the epb_packetid can be used to correlate them.",
              "createdAt": "2020-04-23T11:08:14Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzI1MDc5",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T17:33:35Z",
          "updatedAt": "2020-04-23T17:33:35Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "What's an \"ECB\"?",
              "createdAt": "2020-04-23T17:33:35Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzMzNTIz",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T17:44:24Z",
          "updatedAt": "2020-04-23T17:44:25Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "So where can these \"pck_cls.h\" and \"pbf.h\" files be found?  They can't be found in any obvious place in the Linux 5.6.7 kernel source, at least not if the source tarball is downloaded and unpacked and a \"find\" command is run in the top-level directory.",
              "createdAt": "2020-04-23T17:44:25Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzM0NjI4",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-23T17:45:52Z",
          "updatedAt": "2020-04-23T17:45:53Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Yes, the epb_hash option is vague about those hashes in a fashion that doesn't make it clear whether 1) they haven't yet decided how big the hash should be or 2) deliberately left it unspecified to allow different-width hashes to be used.",
              "createdAt": "2020-04-23T17:45:52Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODA5MDY0",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-24T10:00:53Z",
          "updatedAt": "2020-04-24T10:00:53Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Ooops, should be EPB :(",
              "createdAt": "2020-04-24T10:00:53Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODA5OTI0",
          "commit": {
            "abbreviatedOid": "294fa5f"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-24T10:02:09Z",
          "updatedAt": "2020-04-24T10:02:09Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Nice... The Github editor removed the ref links I put in... \r\n\r\n```\r\nThe verdict type can be: Hardware (type\r\n            octet = 0, size = variable), Linux_eBPF_TC (type octet = 1, size = 8\r\n            (64-bit unsigned integer), value = TC_ACT_* as defined in the Linux\r\n            <eref target=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/pkt_cls.h\">pck_cls.h</eref>\r\n            include), Linux_eBPF_XDP (type octet = 2, size = 8 (64-bit unsigned\r\n            integer), value = xdp_action as defined in the Linux\r\n            <eref target=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/bpf.h\">pbf.h</eref>\r\n            include).</t>\r\n```",
              "createdAt": "2020-04-24T10:02:09Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjkwMTcx",
          "commit": {
            "abbreviatedOid": "9bbfa23"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-30T16:35:52Z",
          "updatedAt": "2020-04-30T16:35:53Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "That should be \"to correlate them\".",
              "createdAt": "2020-04-30T16:35:52Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjkxMzEy",
          "commit": {
            "abbreviatedOid": "9bbfa23"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-04-30T16:37:21Z",
          "updatedAt": "2020-04-30T16:37:22Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I'd just say \"a firewall could drop the packet\"; how the firewall rules are internally implemented is a detail.",
              "createdAt": "2020-04-30T16:37:21Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDU4MzU3",
          "commit": {
            "abbreviatedOid": "9bbfa23"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-01T07:55:36Z",
          "updatedAt": "2020-05-01T07:55:37Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Thanks will fix in next update...",
              "createdAt": "2020-05-01T07:55:36Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDU5MTk2",
          "commit": {
            "abbreviatedOid": "9bbfa23"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-01T07:58:40Z",
          "updatedAt": "2020-05-01T07:58:41Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Will remove it!",
              "createdAt": "2020-05-01T07:58:41Z",
              "updatedAt": "2020-05-01T10:23:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3ODIyNTA5",
          "commit": {
            "abbreviatedOid": "b5b2c08"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T05:23:05Z",
          "updatedAt": "2021-04-29T05:23:06Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "By the way, the Linux_eBPF_TC and Linux_eBPF_XDP verdict types appear to be integral values; if so, are they in the byte order of the host writing the file (so that a little-endian machine will write them as little-endian numbers and a big-endian machine will write them as big-endian numbers)?\r\n\r\nAnd is the hardware verdict type an opaque blob of bytes?",
              "createdAt": "2021-04-29T05:23:05Z",
              "updatedAt": "2021-04-29T05:23:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3ODI1MTI3",
          "commit": {
            "abbreviatedOid": "b5b2c08"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T05:31:04Z",
          "updatedAt": "2021-04-29T05:31:04Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "(The byte order question also applies to the packet ID and queue options, with presumably the same answer.)",
              "createdAt": "2021-04-29T05:31:04Z",
              "updatedAt": "2021-04-29T05:31:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3ODkyMTYy",
          "commit": {
            "abbreviatedOid": "b5b2c08"
          },
          "author": "chaudron",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T07:33:42Z",
          "updatedAt": "2021-04-29T07:33:42Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "The Linux_eBPF_TC and Linux_eBPF_XDP are stored a uint64 and hence the same as all other metadata in the block, so in host order as explained in the \"Endianness\" section. \r\n\r\nYou are right about the hardware verdict type, this is an opaque blob of bytes.\r\n\r\nPacket and queue ID are the same as any other option, for example, epb_dropcount, which are stored as explained in the \"Endianness\" section. \r\n\r\n",
              "createdAt": "2021-04-29T07:33:42Z",
              "updatedAt": "2021-04-29T07:33:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 94,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA3ODkzOTYw",
      "title": "pcap: Fix Packet Header fields offsets",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/94",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-23T12:48:41Z",
      "updatedAt": "2020-04-23T17:08:18Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "d6779400a3bbbdde77909e038c403128c5856eb7",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "b0b457b9bb78d5d9462857330da7004e58e2d11c",
      "closedAt": "2020-04-23T17:08:18Z",
      "mergedAt": "2020-04-23T17:08:18Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "36d9048f68b930bce438e74f5e77d4da0f149752"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 95,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA4MTU3NjA4",
      "title": "pcap: Add File Header and Packet Header lengths",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/95",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-23T19:57:52Z",
      "updatedAt": "2020-04-23T20:29:03Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "36d9048f68b930bce438e74f5e77d4da0f149752",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "d37ce70c6e274855ddfc33afc77a3d6942910705",
      "closedAt": "2020-04-23T20:29:03Z",
      "mergedAt": "2020-04-23T20:29:02Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "8a789f5fac31ab48adceddc01e07c56264baaaed"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA4MTgyMTA1",
      "title": "Fix typos",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/96",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-23T20:39:17Z",
      "updatedAt": "2020-04-23T21:29:12Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8a789f5fac31ab48adceddc01e07c56264baaaed",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "36c94da1026fe2ed9d0e4b1b6211b7653153d532",
      "closedAt": "2020-04-23T21:29:12Z",
      "mergedAt": "2020-04-23T21:29:12Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "22bebb865b28b9421b5761ae4190ecea88738f7b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 99,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzOTcwMzIw",
      "title": "Update draft-gharris-opsawg-pcap.md",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/99",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-22T08:50:18Z",
      "updatedAt": "2020-12-22T09:13:14Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "8c6ea0870025b25eb9b3d8ca4e892ad153ae734e",
      "headRepository": "tuexen/pcapng",
      "headRefName": "cleanups",
      "headRefOid": "be7c1a242ac6e23691b753c4694d574e1d760550",
      "closedAt": "2020-12-22T09:03:27Z",
      "mergedAt": "2020-12-22T09:03:27Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "af00891b80d9f11564617ce012922dc5d0181c64"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 100,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzOTg2MjI5",
      "title": "Possible cleanup",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/100",
      "state": "MERGED",
      "author": "tuexen",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think this makes the text clearer. But I'm not sure if it is a way to go.",
      "createdAt": "2020-12-22T09:19:00Z",
      "updatedAt": "2020-12-23T22:49:04Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6870a6560b240dbfad7fd2a32c7f1f8fadf50ec7",
      "headRepository": "tuexen/pcapng",
      "headRefName": "possible-cleanup",
      "headRefOid": "e6063b9f9bd3a846c426879b4b2f81cbd44d8569",
      "closedAt": "2020-12-23T22:49:04Z",
      "mergedAt": "2020-12-23T22:49:04Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "1488e92d66e8a6572e0682b732fb33ecee14dfc1"
      },
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\n    > Alternatively, we could do\n\n    > * values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\n    > * values from 32768 to 65000 are marked as First-Come First-Served;\n    > * values from 147 to 162, and from 65000 to 65535 are marked as Private Use.\n\nThis is much clearer. I'll use that.\n\n\n",
          "createdAt": "2020-12-23T00:54:31Z",
          "updatedAt": "2020-12-23T00:54:31Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris <notifications@github.com> wrote:\n    >> @@ -295,6 +291,8 @@ DLT values are associated with specific operation system captures, and are opera\n    > |LINKTYPE_SCCP|142|SS7 Control Part, ITU-T Q.711/Q.712/Q.713/Q.714\n    > |LINKTYPE_DOCSIS|143|DOCSIS MAC frames, DOCSIS 3.1\n    > |LINKTYPE_LINUX_IRDA|144|Linux-IrDA packets w/LINKTYPE_LINUX_IRDA header\n    > +|LINKTYPE_PRIVATE_USE_1|147|For private use\n\n    > There aren't 2 private use values, there are 16 private use values, 147\n    > to 162, so they'd be `LINKTYPE_PRIVATE_USE_1` (`LINKTYPE_USER1`)\n    > through `LINKTYPE_PRIVATE_USE_16` (`LINKTYPE_USER16`).\n\nThe last revision does not list that entry at all.\nI felt that giving away ~500 at the end of the range should accomodate pretty\nmuch all sorts of experiments.\nIf we ever get close (at ~10/year it would be a long time), then the\n65535+PEN thing should work great.\nIn PCAPNG, we could also just have a new packet header.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [\n\n\n\n",
          "createdAt": "2020-12-23T00:57:30Z",
          "updatedAt": "2020-12-23T00:57:30Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> This is much clearer. I'll use that.\r\n\r\nOr\r\n\r\n- values from 0 to 146, and from 163 to 32767, are marked as Specification Required;\r\n- values from 32768 to 65000 are marked as First-Come First-Served;\r\n- values from 147 to 162, and from 65000 to 65535 are marked as Private Use.\r\n",
          "createdAt": "2020-12-23T02:25:35Z",
          "updatedAt": "2020-12-23T02:25:35Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> On 23. Dec 2020, at 01:54, Michael Richardson <notifications@github.com> wrote:\n> \n> \n> Guy Harris <notifications@github.com> wrote:\n> > Alternatively, we could do\n> \n> > * values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\n> > * values from 32768 to 65000 are marked as First-Come First-Served;\n> > * values from 147 to 162, and from 65000 to 65535 are marked as Private Use.\n> \n> This is much clearer. I'll use that.\nI would vote for just putting 147 to 162 in the initial allocation table and have only\nthe first two rules. That means that IANA has only to deal with two ranges.\n\nBest regards\nMichael\n> \n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> \n\n",
          "createdAt": "2020-12-23T12:19:44Z",
          "updatedAt": "2020-12-23T12:19:44Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "\nMichael T\u00fcxen <notifications@github.com> wrote:\n    >> Guy Harris <notifications@github.com> wrote:\n    >> > Alternatively, we could do\n    >>\n    >> > * values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\n    >> > * values from 32768 to 65000 are marked as First-Come First-Served;\n    >> > * values from 147 to 162, and from 65000 to 65535 are marked as Private Use.\n    >>\n    >> This is much clearer. I'll use that.\n    > I would vote for just putting 147 to 162 in the initial allocation table and have only\n    > the first two rules. That means that IANA has only to deal with two ranges.\n\nI don't have a strong opinion about table vs not, or the \"except...\" text.\nI wanted to list 147->162 this way so that people reading would see what\nchoices they have.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [\n\n",
          "createdAt": "2020-12-23T13:26:17Z",
          "updatedAt": "2020-12-23T13:26:17Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> On 23. Dec 2020, at 14:26, Michael Richardson <notifications@github.com> wrote:\n> \n> \n> \n> Michael T\u00fcxen <notifications@github.com> wrote:\n> >> Guy Harris <notifications@github.com> wrote:\n> >> > Alternatively, we could do\n> >>\n> >> > * values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\n> >> > * values from 32768 to 65000 are marked as First-Come First-Served;\n> >> > * values from 147 to 162, and from 65000 to 65535 are marked as Private Use.\n> >>\n> >> This is much clearer. I'll use that.\n> > I would vote for just putting 147 to 162 in the initial allocation table and have only\n> > the first two rules. That means that IANA has only to deal with two ranges.\n> \n> I don't have a strong opinion about table vs not, or the \"except...\" text.\n> I wanted to list 147->162 this way so that people reading would see what\n> choices they have.\nIf I would be a developer looking for a number I can take, I would scroll\nthrough header files to find something for private use. Maybe look at the\ntable available from IANA, but not in the IANA section.\n\nSo I would suggest:\n* add the entries to the table.\n* take them out of the IANA consoderations\n\nI you want to draw the attention to such values, put some text in the main\npart of the document, not only in the IANA section.\n\nIf you agree, I can update my pull request.\n\nBest regards\nMichael\n> \n> --\n> ] Never tell me the odds! | ipv6 mesh networks [\n> ] Michael Richardson, Sandelman Software Works | IoT architect [\n> ] mcr@sandelman.ca http://www.sandelman.ca/ | ruby on rails [\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> \n\n",
          "createdAt": "2020-12-23T14:34:40Z",
          "updatedAt": "2020-12-23T14:34:40Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "\nMichael T\u00fcxen <notifications@github.com> wrote:\n    >> I don't have a strong opinion about table vs not, or the \"except...\" text.\n    >> I wanted to list 147->162 this way so that people reading would see what\n    >> choices they have.\n\n    > If I would be a developer looking for a number I can take, I would scroll\n    > through header files to find something for private use. Maybe look at the\n    > table available from IANA, but not in the IANA section.\n\n    > So I would suggest:\n    > * add the entries to the table.\n    > * take them out of the IANA consoderations\n\nokay, so the 147->162 are already listed in the header/source.\nThey are also in the tables on tcpdump.org, and I would expect them to be\nvisible in the IANA table...\n\n    > I you want to draw the attention to such values, put some text in the main\n    > part of the document, not only in the IANA section.\n\n    > If you agree, I can update my pull request.\n\nI think we already merged it, and further adapted.\nMore text welcome!\n\nI guess we also need some emails to the chairs.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [\n\n\n",
          "createdAt": "2020-12-23T16:00:48Z",
          "updatedAt": "2020-12-23T16:00:48Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Given that the link-layer types are used in both pcap and pcapng, should there be a third I-D that just lists the link-layer types, to which both the pcap and pcapng I-Ds refer?  A number of protocols aren't handled by a single RFC, they have multiple RFCs.",
          "createdAt": "2020-12-23T19:47:39Z",
          "updatedAt": "2020-12-23T19:47:39Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> On 23. Dec 2020, at 20:47, Guy Harris <notifications@github.com> wrote:\n> \n> \n> Given that the link-layer types are used in both pcap and pcapng, should there be a third I-D that just lists the link-layer types, to which both the pcap and pcapng I-Ds refer? A number of protocols aren't handled by a single RFC, they have multiple RFCs.\nI think it is a valid approach for the first document using some values to define\nthe corresponding registry.\n\nI like the approach of getting out the pcap spec first introducing the link layer\ntype registry and then having the pcapng spec using it and defining the registries\nfor the blocks and so on.\n\nBest regards\nMichael\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> \n\n",
          "createdAt": "2020-12-23T20:15:15Z",
          "updatedAt": "2020-12-23T20:15:15Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "\nGuy Harris <notifications@github.com> wrote:\n    > Given that the link-layer types are used in both pcap and pcapng,\n    > should there be a third I-D that just lists the link-layer types, to\n    > which both the pcap and pcapng I-Ds refer?  A number of protocols\n    > aren't handled by a single RFC, they have multiple RFCs.\n\nyes, that's a reasonable refactor.... in a world where the IESG wasn't so\nheavy-weight and liked more documents rather than bigger documents that might make sense.\n\nI think that it will take a few months to get pcapng through.\nLook at the conversation in November in the \"lets adopt it\" thread from\nToerless and others who want to redo the entire thing.\nSo if we put it into pcapng, then pcap would just stall.\n\n--\n]               Never tell me the odds!                 | ipv6 mesh networks [\n]   Michael Richardson, Sandelman Software Works        |    IoT architect   [\n]     mcr@sandelman.ca  http://www.sandelman.ca/        |   ruby on rails    [\n\n",
          "createdAt": "2020-12-23T20:26:40Z",
          "updatedAt": "2020-12-23T20:26:40Z"
        },
        {
          "author": "tuexen",
          "authorAssociation": "COLLABORATOR",
          "body": "> Guy Harris <notifications@github.com> wrote: Given that the link-layer types are used in both pcap and pcapng, should there be a third I-D that just lists the link-layer types, to which both the pcap and pcapng I-Ds refer? A number of protocols aren't handled by a single RFC, they have multiple RFCs. yes, that's a reasonable refactor.... in a world where the IESG wasn't so heavy-weight and liked more documents rather than bigger documents that might make sense. I think that it will take a few months to get pcapng through. Look at the conversation in November in the \"lets adopt it\" thread from Toerless and others who want to redo the entire thing. So if we put it into pcapng, then pcap would just stall.\r\n> [\u2026](#)\r\n\r\n\r\n\r\n> Guy Harris <notifications@github.com> wrote: Given that the link-layer types are used in both pcap and pcapng, should there be a third I-D that just lists the link-layer types, to which both the pcap and pcapng I-Ds refer? A number of protocols aren't handled by a single RFC, they have multiple RFCs. yes, that's a reasonable refactor.... in a world where the IESG wasn't so heavy-weight and liked more documents rather than bigger documents that might make sense. I think that it will take a few months to get pcapng through. Look at the conversation in November in the \"lets adopt it\" thread from Toerless and others who want to redo the entire thing. So if we put it into pcapng, then pcap would just stall.\r\n> [\u2026](#)\r\n\r\nI would suggest to finish the work on the pcap specification, which includes the IANA registry for the link layer types.\r\n\r\nWe should also decide first, which Registration Policy is the right one. Then deal with the IETF procedural issues. Let me ask the question: Do we really want Specification Required. I'm not sure if the current assignments really have specs. I would vote for expert review. Since there needs to be text to describe the expert review anyway (also for spec required), we could request some sort of description. I think this way it was handled in the past. Or am I wrong?",
          "createdAt": "2020-12-23T21:52:40Z",
          "updatedAt": "2020-12-23T21:53:26Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would suggest to finish the work on the pcap specification, which includes the IANA registry for the link layer types.\r\n\r\nAgreed. \r\nMay I also suggest we do this on the opsawg list, because doing it there means getting more attention from the chairs :-)\r\n\r\n> We should also decide first, which Registration Policy is the right one. Then deal with the IETF procedural issues. Let me ask the  question: Do we really want Specification Required. I'm not sure if the current assignments really have specs. I would vote for expert review. Since there needs to be text to describe the expert review anyway (also for spec required), we could request some sort of description. I think this way it was handled in the past. Or am I wrong?\r\n\r\nHi, Specification Required actually implies Designated Experts (aka \"expert review\").\r\nSo, we have on the tcpdump-workers, essentially run things as expert review, and asked/begged for a Specification, but\r\nwe haven't insisted upon it.  So I'm trying to keep a similar policy.  Guy has mostly been that expert, with Dennis and I asking questions around the edges.  \r\nOften in github issues where someone does a pull request.  I think that we can probably adapt the IANA process into github Issues as in almost all cases we'll want to put it into libpcap as well.   \r\n\r\nIf we were to *DROP* Specification Required, then we could go via ISE.\r\nBut, I've had a bunch of back and forth with Adrian Farrel (the ISE), and he would like to see us exhaust all other avenues first.\r\nSo I would tentatively say we go until Jan.31 or so.\r\n\r\n\r\n",
          "createdAt": "2020-12-23T22:48:17Z",
          "updatedAt": "2020-12-23T22:48:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzczODY4",
          "commit": {
            "abbreviatedOid": "e02edbf"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-22T21:21:40Z",
          "updatedAt": "2020-12-22T21:21:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'd leave that in, because not *all* the values in that range are marked as Specification Required.\r\n\r\nPerhaps:\r\n\r\n* values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\r\n* values from 147 to 162 are marked as Private Use;\r\n* values from 32768 to 65000 are marked as First-Come First-Served;\r\n* values from 65000 to 65535 are marked as Private Use.\r\n\r\nAlternatively, we could do\r\n\r\n* values from 0 to 32767, except for values from 147 to 162, are marked as Specification Required;\r\n* values from 32768 to 65000 are marked as First-Come First-Served;\r\n* values from 147 to 162, and from 65000 to 65535 are marked as Private Use.",
              "createdAt": "2020-12-22T21:21:40Z",
              "updatedAt": "2020-12-23T21:23:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc0NDMx",
          "commit": {
            "abbreviatedOid": "e02edbf"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-22T21:22:52Z",
          "updatedAt": "2020-12-22T21:22:52Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "There aren't 2 private use values, there are 16 private use values, 147 to 162, so they'd be `LINKTYPE_PRIVATE_USE_1` (`LINKTYPE_USER1`) through `LINKTYPE_PRIVATE_USE_16` (`LINKTYPE_USER16`).",
              "createdAt": "2020-12-22T21:22:52Z",
              "updatedAt": "2020-12-23T21:23:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODE0MjMw",
      "title": "Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/103",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-27T14:26:09Z",
      "updatedAt": "2020-12-27T18:25:21Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "a589f9bcf3f786017b0732d35126f305ef91650d",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "da66c47ef39ca121741be6f058202826f4126e55",
      "closedAt": "2020-12-27T18:25:21Z",
      "mergedAt": "2020-12-27T18:25:21Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "1572878d7f374e3b41d513d543dfa05b544f78a2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIyMzgxNjYy",
      "title": "Change the type code request PoC to gitlab.com/pcapng/pcapng.",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/105",
      "state": "MERGED",
      "author": "geraldcombs",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Specify that new type codes should be requested as part of updating\r\nthis document. Closes #104.",
      "createdAt": "2021-04-23T23:51:20Z",
      "updatedAt": "2021-04-24T00:00:10Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "db134e246ddbd9fffd0ea353b106c6254fa2e3b6",
      "headRepository": "geraldcombs/pcapng",
      "headRefName": "type-code-request-poc",
      "headRefOid": "d5490d086c2a0d7d2a14085382b059f8f2d19c70",
      "closedAt": "2021-04-24T00:00:10Z",
      "mergedAt": "2021-04-24T00:00:10Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "59a0875d1d664b57dec8a53fc28d3c3a4afadeca"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "MDExOlB1bGxSZXF1ZXN0NjU4NDc2Mzk2",
      "title": "Fix typos",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/107",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-31T19:00:09Z",
      "updatedAt": "2021-05-31T19:39:41Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "59a0875d1d664b57dec8a53fc28d3c3a4afadeca",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "cc7bbeeac8975707cc89182da06616cafac608fa",
      "closedAt": "2021-05-31T19:39:41Z",
      "mergedAt": "2021-05-31T19:39:41Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "b1699d7a721e64dd71a3d0a9b226b8c980eea823"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 110,
      "id": "PR_kwDOAU54e84smu10",
      "title": "Fix link to the \"NSS Key Log Format\" page",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/110",
      "state": "MERGED",
      "author": "jpoliv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-03T15:59:57Z",
      "updatedAt": "2021-10-03T16:27:16Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "a275223b4270550c20ce178ac20eeba929e062d7",
      "headRepository": "jpoliv/pcapng",
      "headRefName": "jpoliv/fix-link-to-the-nss_key_log_format-page",
      "headRefOid": "8eb2d454b83a1a7d191d07107205434f3751cdca",
      "closedAt": "2021-10-03T16:27:16Z",
      "mergedAt": "2021-10-03T16:27:16Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "91c6077f2f0728ea8f1750ea47db75c71fd57f22"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 111,
      "id": "PR_kwDOAU54e84sq3RS",
      "title": "Correct a couple of typographical errors",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/111",
      "state": "MERGED",
      "author": "jpoliv",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-05T01:30:46Z",
      "updatedAt": "2021-10-05T05:18:17Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "f75a5189ab5437f1773f71ae665177602ed9d6ae",
      "headRepository": "jpoliv/pcapng",
      "headRefName": "jpoliv/fix-typographical-errors",
      "headRefOid": "76b6c2abb1349e144c74892030a368c1656ad872",
      "closedAt": "2021-10-05T05:18:17Z",
      "mergedAt": "2021-10-05T05:18:16Z",
      "mergedBy": "alagoutte",
      "mergeCommit": {
        "oid": "74837374bae38979c0a4c63b0400f7f8f3255eb6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 112,
      "id": "PR_kwDOAU54e84z_SBX",
      "title": "Fix YAML (and work around kramdown-rfc bug)",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/112",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-05T10:12:51Z",
      "updatedAt": "2022-03-05T10:29:13Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "98a1e0567c24c396d08dc465a66f920c57e0c48e",
      "headRepository": "cabo/pcapng",
      "headRefName": "kramdown-bug",
      "headRefOid": "0da7f36f4b5eb8d6aeafb35d471ac66031f90733",
      "closedAt": "2022-03-05T10:23:21Z",
      "mergedAt": "2022-03-05T10:23:20Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "b396076202d1341408d1d20eda1ee112ee76541f"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The crash in kramdown-rfc is caused by the attempt to blank out the name -- just leave it out, and it will work.",
          "createdAt": "2022-03-05T10:13:30Z",
          "updatedAt": "2022-03-05T10:13:30Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "It still doesn't complete, but that's because draft-ietf-opsawg-pcapng.md isn't the only document attempting to blank out the name; I'll fix any other ones that have the same problem.\r\n\r\nThanks!",
          "createdAt": "2022-03-05T10:23:14Z",
          "updatedAt": "2022-03-05T10:23:14Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'll fix any other ones that have the same problem.\r\n\r\nIt works now.  Again, thanks!",
          "createdAt": "2022-03-05T10:29:12Z",
          "updatedAt": "2022-03-05T10:29:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 119,
      "id": "PR_kwDOAU54e847Z6S_",
      "title": "Add name resolution types for EUI-48/64",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/119",
      "state": "MERGED",
      "author": "eqvinox",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "cf. #118\r\n\r\njust some simple text \u2014 purpose is really just to grab 0x0003 / 0x0004 for EUI-48/64.",
      "createdAt": "2022-07-14T13:00:58Z",
      "updatedAt": "2022-09-01T10:05:01Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "57b1d30b57107e2a3c15c8c16d76e44ed9dbb0c7",
      "headRepository": "eqvinox/pcapng",
      "headRefName": "eui-names",
      "headRefOid": "5df566c1c155c2aa0f408c235534b40337942ff3",
      "closedAt": "2022-09-01T10:01:43Z",
      "mergedAt": "2022-09-01T10:01:43Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "bd3e5f60a5543e74068fb0d94f298d0133d59557"
      },
      "comments": [
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "So you want to map L2 name directly to name.  That seems to skip some L3 name, but maybe that's on purpose, because you don't have L3 names for stuff like STP chatter, etc?",
          "createdAt": "2022-07-14T18:11:59Z",
          "updatedAt": "2022-07-14T18:11:59Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> So you want to map L2 name directly to name. That seems to skip some L3 name, but maybe that's on purpose, because you don't have L3 names for stuff like STP chatter, etc?\r\n\r\nIf packet capture code sees packets (for example, ARP packets) that indicate that the host with a given L2 address also has a given L3 address, and that application knows the name for that L3 address, it could also, if it writes out a capture, put in an entry mapping the given L2 address to the name for the L3 address, as well as an entry mapping the given L3 address to the name for that L3 address.  (Wireshark infers names for L2 addresses that way.)\r\n\r\nCode that reads this information would presumably map L2 addresses to names using the L2 map, when displaying L2 addresses, and map L3 addresses to names using the L3 map(s), when displaying L3 addresses.",
          "createdAt": "2022-07-14T20:23:12Z",
          "updatedAt": "2022-07-14T20:23:12Z"
        },
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> [\u2026] because you don't have L3 names for stuff like STP chatter, etc?\r\n\r\nExactly that.\r\n\r\n> If packet capture code sees packets (for example, ARP packets) that indicate that the host with a given L2 address also has a given L3 address\r\n\r\nNo such packets in my traces :) \u2026 in some cases it could be gleaned from LLDP or IS-IS router name TLVs, but in reality what I'm looking for is a way to include a [subset of a] manually created `/etc/ethers` file.\r\n\r\n(Also about to post on opsawg)",
          "createdAt": "2022-07-15T08:25:55Z",
          "updatedAt": "2022-07-15T08:25:55Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> No such packets in my traces :) \u2026 in some cases it could be gleaned from LLDP or IS-IS router name TLVs, but in reality what I'm looking for is a way to include a [subset of a] manually created /etc/ethers file.\r\n\r\nBut it should be thought of as a way to include mappings between MAC addresses and host names, *regardless of the source of the mapping*, not as just a way to include stuff from /etc/ethers - an application might even allow new mappings to be added manually, by the user.",
          "createdAt": "2022-07-15T08:28:37Z",
          "updatedAt": "2022-07-15T08:28:37Z"
        },
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> But it should be thought of as a way to include mappings between MAC addresses and host names, _regardless of the source of the mapping_ [\u2026]\r\n\r\nOh, yeah, absolutely. I was just providing my use case for context.\r\n",
          "createdAt": "2022-07-15T08:29:53Z",
          "updatedAt": "2022-07-15T08:29:53Z"
        },
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated to fix conflicts.",
          "createdAt": "2022-09-01T09:57:26Z",
          "updatedAt": "2022-09-01T09:57:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 120,
      "id": "PR_kwDOAU54e848aJqf",
      "title": "pcaplinktype.md: Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/120",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-01T08:00:20Z",
      "updatedAt": "2022-08-01T10:38:37Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "4cdac34be257d7b348e3ec5bd2c599adcdc9941d",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "ff2b9505edaa112d123100b3aed61b25d2eec841",
      "closedAt": "2022-08-01T10:38:37Z",
      "mergedAt": "2022-08-01T10:38:37Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "506f3c6693b613dc8971ccb8d35ce37d235468b0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 121,
      "id": "PR_kwDOAU54e848bDl9",
      "title": "pcaplinktype: Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/121",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-01T11:23:55Z",
      "updatedAt": "2022-08-01T11:28:06Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "506f3c6693b613dc8971ccb8d35ce37d235468b0",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "5c8dbd27a740ca5c3b3e4107ca7bfcf0f977a298",
      "closedAt": "2022-08-01T11:28:06Z",
      "mergedAt": "2022-08-01T11:28:05Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "2106ce8061761f218d37b3cbb1c0045a93d6aebc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "PR_kwDOAU54e84-Mnd1",
      "title": "extras: allow options in journal export block",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/122",
      "state": "OPEN",
      "author": "eqvinox",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Can't currently put options on captured log messages... (Also adding a nanosecond timestamp in the next commit.)\r\n\r\n---\r\nReally want to add a comment on some log messages :smile:\r\n\r\nI'm fully aware wireshark (aka the primary pcap-ng editing tool) doesn't support this yet, I just feel like specifying out things before implementing them. I *may* code this up for wireshark in a bit. It currently ignores the \"trailing garbage\" (my generator already tries generating comments because I didn't check that the journal block actually supports options\u2026)\r\n\r\nI'm 99.9% sure this shouldn't cause any compatibility problems; any reader or writer unaware of the options would still process the blocks correctly. Even if a writer was previously generating \"excessive\" padding (0\u20263 + n*4 zero bytes), it would just be read as end-of-options. Doing it this way should make existing readers just ignore the options.\r\n\r\nNo idea how to make the cross-document reference to `section_opt` work :disappointed:",
      "createdAt": "2022-09-01T10:02:55Z",
      "updatedAt": "2023-07-24T23:40:51Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6dbff11f50bef7a4548c58107ac53a0809679efe",
      "headRepository": "eqvinox/pcapng",
      "headRefName": "journal-entry-options",
      "headRefOid": "3e86c0991ebf0b11b3cd8909afb44102e0ee4e09",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Can you rebase and fix the TBD?\r\n\r\ndone",
          "createdAt": "2023-07-23T23:52:57Z",
          "updatedAt": "2023-07-23T23:52:57Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "A URL change needs to be made:\r\n\r\n- https://www.freedesktop.org/wiki/Software/systemd/export/ says, at the top, that it moved to https://systemd.io/JOURNAL_EXPORT_FORMATS/ (I guess systemd isn't restricted to desktop Linux).",
          "createdAt": "2023-07-24T00:29:47Z",
          "updatedAt": "2023-07-24T00:29:47Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> If the block contains options, there MUST be at least one byte of zero padding present to mark the end of the journal entry.  This only makes a difference if the journal entry is a multiple of four octets long, in this case 4 bytes of zero padding MUST be appended. Blocks without options do not contain any zero padding if the journal entry is a multiple of 4 octets long, therefore readers MUST NOT rely on the presence of a zero byte to terminate the entry.\r\n\r\nSo what is the algorithm that a pcapng reader would use to find the end of the journal entry?\r\n\r\nSearch for a zero byte, starting at the beginning of the Journal Entry field and ending just before the beginning of the Block Total Length field.\r\n\r\nIf a zero byte is not found, the entry ends before the Block Total Length field (as it's not padded).\r\n\r\nIf a zero byte *is* found, the entry ends before the zero byte; skip over zero bytes until you're at a 4-byte boundary.  If the Block Total Length field follows the entry, there are no options; otherwise, the options begin on that 4-byte boundary and run until the Block Total Length field.",
          "createdAt": "2023-07-24T00:37:40Z",
          "updatedAt": "2023-07-24T00:37:40Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "wish we could put the options first....\r\n\r\n",
          "createdAt": "2023-07-24T00:47:16Z",
          "updatedAt": "2023-07-24T00:47:16Z"
        },
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> A URL change needs to be made: [\u2026]\r\n\r\n#133\r\n\r\n> Search for a zero byte, starting at the beginning of the Journal Entry field and ending just before the beginning of the Block Total Length field.\r\n\r\nYes \u2014 if there's any zero bytes, options start at the 4-byte boundary following the first zero byte.  To be clear, if any options are present, there will be 1 to 4 zero bytes of padding. If without any zero bytes, the entry ends at a 4-byte boundary, there will be 4 bytes of zero padding. Otherwise how would you tell the entry has in fact ended\u2026\r\n\r\n> wish we could put the options first....\r\n\r\nYup, that'd make things a lot easier :cry: \u2026 sadly the format is already established without options\u2026",
          "createdAt": "2023-07-24T23:40:19Z",
          "updatedAt": "2023-07-24T23:40:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85b7u1W",
          "commit": {
            "abbreviatedOid": "bb53072"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can you rebase and fix the TBD?",
          "createdAt": "2023-07-23T19:23:06Z",
          "updatedAt": "2023-07-23T19:23:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOAU54e84-Mn8a",
      "title": "extras: timestamp for journal entries",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/123",
      "state": "OPEN",
      "author": "eqvinox",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mcr"
      ],
      "labels": [],
      "body": "... to allow nanosecond resolution.\r\n\r\n---\r\nNot much to say here, just useful to have a way of encoding nanosecond precision timestamps.",
      "createdAt": "2022-09-01T10:04:28Z",
      "updatedAt": "2023-07-23T23:57:09Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6dbff11f50bef7a4548c58107ac53a0809679efe",
      "headRepository": "eqvinox/pcapng",
      "headRefName": "journal-entry-timestamp",
      "headRefOid": "3c3584324f4487e231c2b712e94ce0f932420d58",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "eqvinox",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This seems to include the changes for #122, so could you make them independant PRs?\r\n\r\nI can't, this one depends on the options block added in #122, as it is adding an option for use inside of that block\u2026\r\n\r\nThe commits shared between #122 and #123 are the exact same commits (same hash), merging #122 will make the first 2 commits disappear from this PR.",
          "createdAt": "2023-07-23T23:57:09Z",
          "updatedAt": "2023-07-23T23:57:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85BNjCi",
          "commit": {
            "abbreviatedOid": "dce30c8"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-01T21:17:52Z",
          "updatedAt": "2022-09-01T21:17:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAU54e85b7u28",
          "commit": {
            "abbreviatedOid": "dce30c8"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This seems to include the changes for #122, so could you make them independant PRs?",
          "createdAt": "2023-07-23T19:24:06Z",
          "updatedAt": "2023-07-23T19:24:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOAU54e85Ika8w",
      "title": "A minor edit to avoid redundant language",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/127",
      "state": "MERGED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-26T07:21:41Z",
      "updatedAt": "2023-01-27T07:57:38Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6ff11513c1f7184ee24ed7d543c082d25347ed45",
      "headRepository": "boucadair/draft-ietf-opsawg-pcap",
      "headRefName": "patch-1",
      "headRefOid": "6024fc5865992826ecc9884b51c9db708eac1926",
      "closedAt": "2023-01-26T18:58:37Z",
      "mergedAt": "2023-01-26T18:58:37Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "7c09907ddfffe04e37b6e5925c389885080c5003"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see any redundancy; it's just moving the adjectives rather than removing redundant ones.\r\n\r\nHowever, given that the preceding text says \"they have been grouped in the following four categories\", it's indicated that a list of categories will follow, and the current text doesn't begin each of the next four items with a category indicator, so the replacement text, which *does* begin each of the next four items with a category indicator, is better.",
          "createdAt": "2023-01-26T18:58:29Z",
          "updatedAt": "2023-01-26T18:58:29Z"
        },
        {
          "author": "boucadair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I don't see any redundancy; it's just moving the adjectives rather than removing redundant ones.\r\n\r\nI agree this may be subtle, but statements such as \"OPTIONAL ...MAY\" are redundant because both terms means the same thing as per your section 2:\r\n\r\n```\r\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\r\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"**MAY**\", and\r\n   \"**OPTIONAL**\" in this document are to be interpreted as described in\r\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\r\n   capitals, as shown here\r\n```.",
          "createdAt": "2023-01-27T07:57:38Z",
          "updatedAt": "2023-01-27T07:57:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 128,
      "id": "PR_kwDOAU54e85N7E1T",
      "title": "draft-ietf-opsawg-pcapng.md: Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/128",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-10T10:15:45Z",
      "updatedAt": "2023-04-10T18:28:36Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "4a5f0ff3013ee7e6b814cbeda9212fbb7c2ac5cc",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "c752b88bb54663d685aecaab016d663aad677684",
      "closedAt": "2023-04-10T18:28:36Z",
      "mergedAt": "2023-04-10T18:28:36Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "baa591fad0fa0e91e130337994ff619aa86c1ff4"
      },
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Found with codespell.",
          "createdAt": "2023-04-10T12:26:36Z",
          "updatedAt": "2023-04-10T12:26:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 130,
      "id": "PR_kwDOAU54e85Q8Hdf",
      "title": "draft-ietf-opsawg-pcap.md: Update the text about Reserved1",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/130",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add the current documentation from libpcap/pcap-savefile.manfile.in.",
      "createdAt": "2023-05-20T11:32:20Z",
      "updatedAt": "2023-07-12T08:43:07Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "baa591fad0fa0e91e130337994ff619aa86c1ff4",
      "headRepository": "fxlb/pcapng",
      "headRefName": "master",
      "headRefOid": "89cae5726aef48dd467fe84e42beeafff7366b4a",
      "closedAt": "2023-07-12T08:43:06Z",
      "mergedAt": "2023-07-12T08:43:06Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "075a594f32f849019f10d0f2b8b53b1a1310e238"
      },
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Update planned for libpcap soon to be in line with the draft.)",
          "createdAt": "2023-05-20T14:20:21Z",
          "updatedAt": "2023-05-20T14:20:21Z"
        },
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> (Update planned for libpcap soon to be in line with the draft.)\r\n\r\nDone.",
          "createdAt": "2023-06-14T13:00:02Z",
          "updatedAt": "2023-06-14T13:00:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 131,
      "id": "PR_kwDOAU54e85THIrj",
      "title": "Fix some typos",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/131",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-15T15:41:13Z",
      "updatedAt": "2023-08-21T10:50:23Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "baa591fad0fa0e91e130337994ff619aa86c1ff4",
      "headRepository": "fxlb/pcapng",
      "headRefName": "typos",
      "headRefOid": "71f6408fe70bedcbadb494f49f2008bacc373846",
      "closedAt": "2023-07-12T08:42:06Z",
      "mergedAt": "2023-07-12T08:42:06Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "8aa718536d816cd5264c1c1bf0e42066a6ebfb28"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 132,
      "id": "PR_kwDOAU54e85TwCPR",
      "title": "add EPB extension epb_processid_threadid",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/132",
      "state": "MERGED",
      "author": "RavuAlHemio",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add an Enhanced Packet Block extension to store a process ID and a thread ID.\r\n\r\nCapture methods like Windows Network Trace include process and thread IDs in the captured data. The data makes most sense for outbound packets (the PID and TID of the originating process), but the TID might also be interesting when obtaining capture data while doing kernel debugging, where incoming packets are processed by different threads within the System process.\r\n\r\nIt appears that, according to the answers to [this Unix StackExchange question](https://unix.stackexchange.com/questions/16883/what-is-the-maximum-value-of-the-process-id), process and thread IDs on Unix systems generally fit into an unsigned 32-bit integer each; this is also true for Windows.\r\n\r\nShould an operating system not have a concept of processes or threads, the value 0 can be stored for the respective field. I don't know of any operating system where process or thread ID 0 is valid.",
      "createdAt": "2023-06-23T13:50:16Z",
      "updatedAt": "2023-07-24T00:39:23Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "baa591fad0fa0e91e130337994ff619aa86c1ff4",
      "headRepository": "RavuAlHemio/draft-ietf-opsawg-pcap",
      "headRefName": "epb_processid_threadid",
      "headRefOid": "69de62a376b3507863a07a1f8b91114e554cf647",
      "closedAt": "2023-07-23T19:24:55Z",
      "mergedAt": "2023-07-23T19:24:55Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "1fd95a36739747b2f38a0f5d019f8c18e0d6cc71"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Should an operating system not have a concept of processes or threads, the value 0 can be stored for the respective field. I don't know of any operating system where process or thread ID 0 is valid.\r\n\r\nProcess 0 on Darwin-based OSes is the \"kernel task\", which is a multi-threaded task whose code runs entirely in kernel space and whose threads could send and receive packets.  Other UN\\*Xes have a process 0; back in the old old old old old days it was an in-kernel swapper process, but there may be other UN\\*Xes where it can perform networking.",
          "createdAt": "2023-07-23T19:35:47Z",
          "updatedAt": "2023-07-23T19:35:47Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps a better scheme would be to have separate process ID and thread ID options; if the option in question is present, the OS is presumed to have a notion of processes and threads, and the process or thread that would receive or was sending the packet is known.  If there is no concept of process or thread, or if the receiving process or thread is unknown, omit the option.",
          "createdAt": "2023-07-23T19:38:00Z",
          "updatedAt": "2023-07-23T19:38:00Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "> Process 0 on Darwin-based OSes is the \"kernel task\", which is a multi-threaded task whose code runs entirely in kernel space and whose threads could send and receive packets. Other UN*Xes have a process 0; back in the old old old old old days it was an in-kernel swapper process, but there may be other UN*Xes where it can perform networking.\r\n\r\nDo we expect Darwin systems to have their kernel-task write PCAPNG files? (I think not)\r\nI'm pretty sure that the swapper process isn't going to be involved, so it sure seems safe to use 0 as invalid.\r\nI am agnostic about separate process/thread IDs.  If we need them, that's fine with.\r\n",
          "createdAt": "2023-07-23T20:08:30Z",
          "updatedAt": "2023-07-23T20:08:30Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we expect Darwin systems to have their kernel-task write PCAPNG files?\r\n\r\nDo we expect packets sent by or received by the kernel task to show up in pcapng files?  If there are any such packets, I'd expect them to show up the same way other process's packets show up.\r\n\r\nActivity Monitor isn't showing kernel_task as having sent or received any packets.  iStat Menus, however, shows it as sending and receiving a lot of packets when a VMware virtual machine is doing network I/O; I don't know whether that's going through the new virtualization mechanisms in XNU, or through BPF (at least at one point, VMware did network device emulation using BPF to send and receive link-layer packets), or what, and I don't know why Activity Monitor and iStat Menus disagree on this.\r\n\r\nI'll have to look at the XNU source to see if any kernel threads would do network I/O.  (The one I created doesn't, it just tries to unmount automounted file systems.)",
          "createdAt": "2023-07-23T20:28:08Z",
          "updatedAt": "2023-07-23T20:28:08Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's a line of output from macOS tcpdump, from a capture on all network interfaces using PKTAP rather than BPF and providing a big pile of metadata, asking it to dump all metadata; the capture took place while I was doing some networking on a Linux VM in VMware:\r\n\r\n```\r\nProcess Information Block pid: 0 proc_name: kernel_task\r\n13:53:12.694804 (en0, proc kernel_task:0:, eproc vmnet-natd:65879:, svc BE, in, so, flowid 0x895c471a, ttag 0x0) IP (tos 0x0, ttl 52, id 31338, offset 0, flags [DF], proto TCP (6), length 580)\r\n    172.64.41.4.https > 192.168.1.3.61862: Flags [P.], cksum 0x2505 (correct), seq 4896:5424, ack 582, win 8, options [nop,nop,TS val 353030640 ecr 3943903301], length 528\r\n```\r\n\r\nI'm not sure what the difference between \"proc\" and \"eproc\" is.  [The description I concocted of the `LINKTYPE_PKTAP` link-layer header](https://www.tcpdump.org/linktypes/LINKTYPE_PKTAP.html), from looking at macOS source, speaks of an \"effective\" process ID and name.  It also says that the PID may be 0 if the process is unknown, but, apparently, it may also be 0 if the process is the kernel task.",
          "createdAt": "2023-07-23T21:23:37Z",
          "updatedAt": "2023-07-23T21:23:37Z"
        },
        {
          "author": "RavuAlHemio",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with splitting up the information into separate options. Do we want to handle Darwin's \"effective PID\" case somehow?\r\n\r\nI can think of the following variants:\r\n\r\n* one 8-byte option for process ID and thread ID (with 0 as unknown; no EffPID handling, no differentiation between PID 0 and unknown PID) -- this is the currently merged variant\r\n* one 4-byte option for process ID; one 4-byte option for thread ID (0 means PID/TID zero, absence of the option means unknown PID/TID; no EffPID handling)\r\n* one 4-byte or 8-byte option for process ID followed by, if known, effective process ID (0 means PID zero, {0, 0} means PID zero and EffPID zero, absence of the option means unknown PID and unknown EffPID); one 4-byte option for thread ID (0 means TID zero, absence of option means unknown TID)\r\n* one 4-byte option for process ID, one 4-byte option for thread ID, one 4-byte option for effective process ID (0 means PID/TID/EffPID zero, absence of the option means unknown PID/TID/EffPID)\r\n\r\nI don't think it's entirely absurd that a kernel process with PID 0 might originate network packets that may end up in a PCAPNG file. I certainly wouldn't want to make it impossible for PCAPNG to handle such cases.",
          "createdAt": "2023-07-23T21:40:40Z",
          "updatedAt": "2023-07-23T21:40:40Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "So the way Apple handles this is that they added a Process Information Block, with a local block type; a (reverse-engineered?) description of a PIB is [in the Wireshark source](https://gitlab.com/wireshark/wireshark/-/blob/master/epan/dissectors/file-pcapng-darwin.c).\r\n\r\nApple also has some custom options for the EPB, including options for the PIB ID of the process and the PIB ID of the \"effective process\".\r\n\r\nThey don't bother with thread information.  Threads can have names in Darwin, but aren't guaranteed to have them.  (A thread has a name if code running in that thread has called `pthread_setname_np()` to set the name.)  They can also be created and destroyed, so a PIB can't include a thread list; I suppose if Apple wanted to provide thread information they could add a Thread Information Block.",
          "createdAt": "2023-07-23T23:32:41Z",
          "updatedAt": "2023-07-23T23:33:58Z"
        },
        {
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "body": "Guy Harris ***@***.***> wrote:\n    >> Do we expect Darwin systems to have their kernel-task write PCAPNG\n    >> files?\n\n> Do we expect packets sent by or received by the kernel task to show up\n\nNo, because they'd have to have some userspace context in order to open a\nfile or socket.\n\n",
          "createdAt": "2023-07-24T00:07:20Z",
          "updatedAt": "2023-07-24T00:07:20Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> No, because they'd have to have some userspace context in order to open a\r\nfile or socket.\r\n\r\nWhy would they have to have userspace context for that?  Kernel-mode NFS servers don't have that issue.",
          "createdAt": "2023-07-24T00:39:23Z",
          "updatedAt": "2023-07-24T00:39:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85b7u4C",
          "commit": {
            "abbreviatedOid": "69de62a"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-23T19:24:49Z",
          "updatedAt": "2023-07-23T19:24:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOAU54e85WR0Ry",
      "title": "pcapng-extras: update systemd URLs",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/133",
      "state": "MERGED",
      "author": "eqvinox",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The man page has no alternate URL under systemd.io that I could find, so it still points at freedesktop.org.",
      "createdAt": "2023-07-24T23:35:30Z",
      "updatedAt": "2023-07-25T00:45:33Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "6dbff11f50bef7a4548c58107ac53a0809679efe",
      "headRepository": "eqvinox/pcapng",
      "headRefName": "sd.io-url",
      "headRefOid": "73735b2fa10af91ec5ac1e29885d8de13016f9bb",
      "closedAt": "2023-07-25T00:45:33Z",
      "mergedAt": "2023-07-25T00:45:33Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "e808104bd998955ece83873591aeefce3d093ac0"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "> The man page has no alternate URL under systemd.io that I could find, so it still points at freedesktop.org.\r\n\r\nI looked, but couldn't find one.",
          "createdAt": "2023-07-25T00:45:09Z",
          "updatedAt": "2023-07-25T00:45:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 134,
      "id": "PR_kwDOAU54e85WcNej",
      "title": "Some minor edits",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/134",
      "state": "MERGED",
      "author": "boucadair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-26T13:04:55Z",
      "updatedAt": "2023-11-10T00:17:01Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "e808104bd998955ece83873591aeefce3d093ac0",
      "headRepository": "boucadair/draft-ietf-opsawg-pcap",
      "headRefName": "master",
      "headRefOid": "67e6f27dd971571a54eb0f0e8981fa74d3a17e89",
      "closedAt": "2023-11-10T00:17:00Z",
      "mergedAt": "2023-11-10T00:17:00Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "34d21e3f35d4df0c7b6da0297990194445e7e70e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85cSKaI",
          "commit": {
            "abbreviatedOid": "034b7cf"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-26T17:32:34Z",
          "updatedAt": "2023-07-26T17:32:34Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nThe initial version of the registry is provided in the table below.  In each\r\n```",
              "createdAt": "2023-07-26T17:32:34Z",
              "updatedAt": "2023-07-26T17:32:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85cSKq3",
          "commit": {
            "abbreviatedOid": "67e6f27"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-26T17:33:14Z",
          "updatedAt": "2023-07-26T17:33:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOAU54e85Xz_i_",
      "title": "pcaplinktype.md: Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/138",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "requestor is not listed in Merriam Webster or dictionary.com.\r\n\r\nFound with the codespell command.",
      "createdAt": "2023-08-13T06:18:35Z",
      "updatedAt": "2023-08-21T10:50:08Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "e808104bd998955ece83873591aeefce3d093ac0",
      "headRepository": "fxlb/pcapng",
      "headRefName": "typo",
      "headRefOid": "c120f5802cce435e72d94f6726d0a6417dd40c3f",
      "closedAt": "2023-08-13T07:11:06Z",
      "mergedAt": "2023-08-13T07:11:06Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "86555896c408b9dc9bb25f82512d2af20effb2ed"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 140,
      "id": "PR_kwDOAU54e85YDt_W",
      "title": "draft-ietf-opsawg-pcap.md: Add some information on byte order",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/140",
      "state": "CLOSED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As in the pcap-savefile libpcap manual page.",
      "createdAt": "2023-08-16T12:14:11Z",
      "updatedAt": "2023-08-17T09:58:26Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "86555896c408b9dc9bb25f82512d2af20effb2ed",
      "headRepository": "fxlb/pcapng",
      "headRefName": "pcap-byte-order",
      "headRefOid": "b3a58b7a1607255a2c0b3eb73a0ac81223f873e9",
      "closedAt": "2023-08-17T09:03:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's already been said differently. closing.\r\n\"All fields in the File Header and in the headers of Packet Records will\r\nalways be written according to the characteristics (little endian / big\r\nendian) of the machine that is writing the file.\"",
          "createdAt": "2023-08-17T09:03:27Z",
          "updatedAt": "2023-08-17T09:03:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 141,
      "id": "PR_kwDOAU54e85YJOwx",
      "title": "Always use timestamp",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/141",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change avoids mixing of 'time stamp' and 'timestamp'.\r\n\r\ns/time stamps/timestamps/g\r\n\r\nIn the RFCs, there are ~23 times more 'timestamp' than 'time stamp'.",
      "createdAt": "2023-08-17T10:42:20Z",
      "updatedAt": "2023-08-17T11:06:42Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "86555896c408b9dc9bb25f82512d2af20effb2ed",
      "headRepository": "fxlb/pcapng",
      "headRefName": "timestamp",
      "headRefOid": "f1cdedcaf73c338e09c4456391c34382766eae9e",
      "closedAt": "2023-08-17T10:56:27Z",
      "mergedAt": "2023-08-17T10:56:27Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "c16756a70d6a04f22d452e5f0e46f9388d405499"
      },
      "comments": [
        {
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR should answer to issue #139.",
          "createdAt": "2023-08-17T10:43:40Z",
          "updatedAt": "2023-08-17T10:43:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 142,
      "id": "PR_kwDOAU54e85YUWUK",
      "title": "draft-ietf-opsawg-pcap.md: Add Security Considerations",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/142",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-20T08:57:58Z",
      "updatedAt": "2023-08-22T08:50:54Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c16756a70d6a04f22d452e5f0e46f9388d405499",
      "headRepository": "fxlb/pcapng",
      "headRefName": "secu",
      "headRefOid": "71497c5aacf290f77558396f5e9d8691a4614139",
      "closedAt": "2023-08-21T17:23:54Z",
      "mergedAt": "2023-08-21T17:23:54Z",
      "mergedBy": "mcr",
      "mergeCommit": {
        "oid": "fe773cece772237183d21440cb9c9d560d62bc28"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "[The media type registry entry for vnd.tcpdump.pcap](https://www.iana.org/assignments/media-types/application/vnd.tcpdump.pcap) has its own list of security considerations; I don't know whether the I-D/RFC needs to list them all or not.",
          "createdAt": "2023-08-21T09:22:46Z",
          "updatedAt": "2023-08-21T09:22:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85en7p4",
          "commit": {
            "abbreviatedOid": "71497c5"
          },
          "author": "mcr",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-21T17:23:45Z",
          "updatedAt": "2023-08-21T17:23:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOAU54e85YeXrw",
      "title": "draft-ietf-opsawg-pcap.md: Update Security Considerations",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/143",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add the link to the media type registry entry for vnd.tcpdump.pcap pointed out by Guy.",
      "createdAt": "2023-08-22T09:12:49Z",
      "updatedAt": "2023-11-10T19:56:44Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "fe773cece772237183d21440cb9c9d560d62bc28",
      "headRepository": "fxlb/pcapng",
      "headRefName": "secu",
      "headRefOid": "31ab27d36509720ebb1726870195c43e04b93d6d",
      "closedAt": "2023-11-10T00:17:54Z",
      "mergedAt": "2023-11-10T00:17:54Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "05c20cb4c4f565b21ef4e89843795a74b96224a2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 144,
      "id": "PR_kwDOAU54e85c8yM_",
      "title": "Use 3 bits in EPB epb_flags option for GSO_TCP and Csum metadata",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/144",
      "state": "MERGED",
      "author": "lxin",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Csum NotReady, Csum Valid and GSO_TCP are 3 flags from the tp_status in PACKET socket when capturing packets from kernel:\r\n\r\n  TP_STATUS_CSUMNOTREADY\r\n  TP_STATUS_VLAN_VALID\r\n  TP_STATUS_GSO_TCP\r\n\r\nSee each description in the patch.\r\n\r\nThese are important flags when parsing the packets, and this patch adds them into epb_flags by using its reserved 3 bits.\r\n\r\nNote that GSO_TCP flag provides a more reliable way to parse BIG TCP packets than currently using 'guessing' TSO for such packets in tcpdump and wireshark.",
      "createdAt": "2023-10-16T21:37:40Z",
      "updatedAt": "2023-11-10T00:14:46Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "986ebbb11cc09d87b9530ecdadeb6bbe6469df3d",
      "headRepository": "lxin/draft-ietf-opsawg-pcap",
      "headRefName": "epb_flags",
      "headRefOid": "903d7a80604f7ab54756a90ac3c360c9e73f101e",
      "closedAt": "2023-11-10T00:14:46Z",
      "mergedAt": "2023-11-10T00:14:46Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "47ecb0e0a146b174842136a315ee701e62d1b196"
      },
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "An option containing flag bits could also be added to the [Interface Description Block](https://ietf-opsawg-wg.github.io/draft-ietf-opsawg-pcap/draft-ietf-opsawg-pcapng.html#name-interface-description-block), with flag bits indicating that the interface supports TCP desegmentation when receiving, TCP segmentation when transmitting, generating IP checksums when transmitting, checking IP checksums when receiving, generating TCP checksums when transmitting, checking TCP checksums when receiving, generating UDP checksums when transmitting, and checking UDP checksums when receiving.  This could support environments that don't provide per-packet indicating of whether segmentation/desegmentation has been done, whether the checksum was handled by the adapter, etc..",
          "createdAt": "2023-10-23T08:36:29Z",
          "updatedAt": "2023-10-23T08:36:29Z"
        },
        {
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> An option containing flag bits could also be added to the [Interface Description Block](https://ietf-opsawg-wg.github.io/draft-ietf-opsawg-pcap/draft-ietf-opsawg-pcapng.html#name-interface-description-block), with flag bits indicating that the interface supports TCP desegmentation when receiving, TCP segmentation when transmitting, generating IP checksums when transmitting, checking IP checksums when receiving, generating TCP checksums when transmitting, checking TCP checksums when receiving, generating UDP checksums when transmitting, and checking UDP checksums when receiving. This could support environments that don't provide per-packet indicating of whether segmentation/desegmentation has been done, whether the checksum was handled by the adapter, etc..\r\n\r\nThese interface features are configurable by ethtool in linux without even bringing down the interfaces, like disabling tcp-segmentation-offload:\r\n\r\n    # ethtool -K eth0 tcp-segmentation-offload off\r\n\r\nAs IDB is not per packet, I think we can't assume all packets were captured with the same features on this interface.",
          "createdAt": "2023-10-24T16:19:59Z",
          "updatedAt": "2023-10-24T16:20:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85kOSTH",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T06:36:37Z",
          "updatedAt": "2023-10-17T06:36:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"as a consequence\" of what?\r\n\r\nAs a consequence of checksum offloading, e.g. a transmitted packet on an interface doing checksum offloading, so that the host networking stack doesn't compute and fill in the checksum before handing the packet either to the network adapter *or* the wraparound code path in the packet capture mechanism?\r\n\r\nOr also as a consequence of segmentation/desegmentation offloading (or quasi-offloading, as I have the impression may be done in the Linux networking for adapters that *don't* do segmentation/desegmentation offloading)?",
              "createdAt": "2023-10-17T06:36:37Z",
              "updatedAt": "2023-10-17T06:36:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kOSxq",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T06:37:57Z",
          "updatedAt": "2023-10-17T06:37:58Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Meaning \"the checksum has already been checked on the receive path before it was handed to the packet capture mechanism, so there's no need for the packet analyzer to check it\"?",
              "createdAt": "2023-10-17T06:37:57Z",
              "updatedAt": "2023-10-17T06:37:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kOT6A",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T06:41:24Z",
          "updatedAt": "2023-10-17T06:41:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "So this means \"this is either a received packet corresponding to *several* received link-layer packets, with reassembly having been done before the packet was handed to the packet capture mechanism, or a transmitted packet that will correspond to *several* link-layer packets after being fragmented, but that was wrapped around to the packet capture mechanism before the fragmentation occurred\"? ",
              "createdAt": "2023-10-17T06:41:24Z",
              "updatedAt": "2023-10-17T06:41:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kSf9G",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T14:45:29Z",
          "updatedAt": "2023-10-17T14:45:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"As a consequence of checksum or segmentation offloading\" will be more accurate, as it also sets CHECKSUM_PARTIAL (Csum NotReady) for the packets to segmentation offloading and does checksum in network adapter later.",
              "createdAt": "2023-10-17T14:45:29Z",
              "updatedAt": "2023-10-17T14:45:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kSig0",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T14:49:51Z",
          "updatedAt": "2023-10-17T14:49:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "right",
              "createdAt": "2023-10-17T14:49:51Z",
              "updatedAt": "2023-10-17T14:49:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kSnDu",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T14:55:33Z",
          "updatedAt": "2023-10-17T14:55:33Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Exactly, there might be such packets on both RX and TX paths, as the packet capture mechanism works earlier than GSO/TSO on TX, and later than GRO/TSO on RX.",
              "createdAt": "2023-10-17T14:55:33Z",
              "updatedAt": "2023-10-17T14:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85kTC_u",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "pabeni",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T15:41:03Z",
          "updatedAt": "2023-10-17T15:41:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@guyharris: in addition to your wording, the GSO TCP bit also has the specific consequence mentioned above:  iph->len can be 0, and in such case the ip-level length must be computed using the Original Packet Length.\r\n\r\nThat is due to the (recent) BIG TCP support inside the Linux kernel, which allows aggregating link-layer packets beyond the 64K total size imposed by the IPv4 header.",
              "createdAt": "2023-10-17T15:41:03Z",
              "updatedAt": "2023-10-17T15:41:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85k06b3",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T01:54:24Z",
          "updatedAt": "2023-10-23T01:54:25Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "That's not unique to Linux or to BIG TCP.  Code in Wireshark to deal with the total length being 0 in the IPv4 header dates back to at least 2012; it uses the packet length that was provided to libpcap and put into the packet record header as the total length in that case.\r\n\r\nThis flag should probably just be called the \"TCP segmentation offloaded\" flag, as there's no reason to presume it will only be used when capturing on an operating system that has something called, in the context of that OS, \"GSO\".",
              "createdAt": "2023-10-23T01:54:24Z",
              "updatedAt": "2023-10-23T01:54:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85k09SS",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T02:14:52Z",
          "updatedAt": "2023-10-23T02:14:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "> and does checksum in network adapter later.\r\n\r\nThat's called \"checksum offloading\".  If you offload segmentation, so that the TCP segment you hand to the adapter is different from the TCP segments, possibly plural, that go out on the network, the TCP checksum has to be computed after the segmentation.\r\n\r\nAnd, when multiple TCP segments are received by the adapter and reassembled, with the reassembled segment being what's handed to the host, the adapter has little reason to recompute a checksum for the packet it hands to the host.\r\n\r\n(Well, if you don't trust the I/O bus, packet checksums can come in handy; in the early days of NetApp, they sent out UDPgrams without a checksum, but it turned out that the UDPgram was getting mangled when read by the adapter over EISA, so they switched to providing a checksum.)",
              "createdAt": "2023-10-23T02:14:53Z",
              "updatedAt": "2023-10-23T02:14:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85lDL09",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-24T16:10:41Z",
          "updatedAt": "2023-10-24T16:10:41Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Just curious why tcpdump doesn't use the packet length to deal with the total length being 0 in the IPv4 by default. Now it actually breaks when handling BIG TCP packets on tcpdump if GUESS_TSO is not enabled, while it works well in wireshark. is it because instead of trusting the packet length tcpudmp wants to handle it more carefully?\r\n\r\n\"TCP segmentation offloaded\" looks better to me. Should I post v2 with your suggested words above? like:\r\n\r\n| 9 | Checksum not ready, as a consequence of checksum offloading, e.g. a transmitted packet on an interface doing checksum offloading, so that the host networking stack doesn't compute and fill in the checksum before handing the packet either to the network adapter or the wraparound code path in the packet capture mechanism. |\r\n| 10 | Checksum valid, the checksum has already been checked on the receive path before it was handed to the packet capture mechanism, so there's no need for the packet analyzer to check it. |\r\n| 11 | TCP segmentation offloaded, this is either a received packet corresponding to several received link-layer packets, with reassembly having been done before the packet was handed to the packet capture mechanism, or a transmitted packet that will correspond to several link-layer packets after being fragmented, but that was wrapped around to the packet capture mechanism before the fragmentation occurred. |",
              "createdAt": "2023-10-24T16:10:41Z",
              "updatedAt": "2023-10-24T16:10:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85lGOFj",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-25T00:34:53Z",
          "updatedAt": "2023-10-25T00:34:53Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> Just curious why tcpdump doesn't use the packet length to deal with the total length being 0 in the IPv4 by default.\r\n\r\nBecause https://github.com/the-tcpdump-group/tcpdump/commit/3465ec4a0c94f3abe774dfdb9874f966403e20ce hasn't been backported to the 4.99 branch, so it's only in the main branch.  @fxlb, should that be backported to make captures with BIG TCP (and other forms of segmentation offloading) work better?  As noted, Wireshark already assumes segmentation offloading if the IP total length is 0.",
              "createdAt": "2023-10-25T00:34:53Z",
              "updatedAt": "2023-10-25T00:34:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85lH0lN",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-25T07:21:55Z",
          "updatedAt": "2023-10-25T07:21:55Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> should that be backported to make captures with BIG TCP (and other forms of segmentation offloading) work better?\r\n\r\nYes. I will backport the \"IP: Enable TSO\" update in the 4.99 branch (with some other recent fixes for the IP printer).",
              "createdAt": "2023-10-25T07:21:55Z",
              "updatedAt": "2023-10-25T07:21:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85lMx2N",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "fxlb",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-25T16:57:55Z",
          "updatedAt": "2023-10-25T16:57:55Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> I will backport the \"IP: Enable TSO\" update in the 4.99 branch (with some other recent fixes for the IP printer).\r\n\r\nDone.",
              "createdAt": "2023-10-25T16:57:55Z",
              "updatedAt": "2023-10-25T16:57:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85mQCzY",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-06T15:25:58Z",
          "updatedAt": "2023-11-06T15:25:58Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Thanks, I assume it will be included in the release of tcpdump-4.99.5.",
              "createdAt": "2023-11-06T15:25:58Z",
              "updatedAt": "2023-11-06T15:25:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAU54e85mQDqi",
          "commit": {
            "abbreviatedOid": "f790993"
          },
          "author": "lxin",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-06T15:27:30Z",
          "updatedAt": "2023-11-06T15:27:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "reposted with the suggested words.",
              "createdAt": "2023-11-06T15:27:30Z",
              "updatedAt": "2023-11-06T15:27:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOAU54e85dwVR8",
      "title": "add new secrets type for OPC UA protocol",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/145",
      "state": "MERGED",
      "author": "gergap",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This new type allows embedding UA secrets log into PCAPNG files to easily distribute Wireshark capture files with the according secrets. This branch: https://gitlab.com/gergap/wireshark/-/tree/opcua_pcang_keylogfile contains the necessary changes in Wireshark to support this new type.",
      "createdAt": "2023-10-25T13:28:28Z",
      "updatedAt": "2023-10-26T18:26:56Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "fe773cece772237183d21440cb9c9d560d62bc28",
      "headRepository": "gergap/draft-ietf-opsawg-pcap",
      "headRefName": "opcua_secret_block_type",
      "headRefOid": "82822c36a116b79f7cfd9116fb106014297b4c79",
      "closedAt": "2023-10-26T18:26:56Z",
      "mergedAt": "2023-10-26T18:26:56Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "cc04959d45efb94b0de914775e2f5c1a5fb5ac23"
      },
      "comments": [
        {
          "author": "gergap",
          "authorAssociation": "CONTRIBUTOR",
          "body": "currently the OPCF website is broken. Need to check later again if the links are correct.\r\n",
          "createdAt": "2023-10-26T07:46:10Z",
          "updatedAt": "2023-10-26T07:46:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAU54e85lNgUs",
          "commit": {
            "abbreviatedOid": "8fc3795"
          },
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-25T18:44:01Z",
          "updatedAt": "2023-10-25T18:44:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "You might want to add a link to, for example, https://opcfoundation.org/about/opc-technologies/opc-ua/, to indicate what \"OPC UA\" is, to add some context.",
              "createdAt": "2023-10-25T18:44:01Z",
              "updatedAt": "2023-10-25T18:44:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOAU54e85d-Kyn",
      "title": "pcap: Update Figure number for Packet Records",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/146",
      "state": "MERGED",
      "author": "johnthacker",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Commit 3b121bcfe57918ef66202a7a5cd2b340d5433426 added a diagram for the LinkType plus additional information field, so the Packet Record is no longer Figure 2 but Figure 3.",
      "createdAt": "2023-10-27T13:08:01Z",
      "updatedAt": "2023-11-03T02:19:52Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "cc04959d45efb94b0de914775e2f5c1a5fb5ac23",
      "headRepository": "johnthacker/draft-ietf-opsawg-pcap",
      "headRefName": "figure_typo",
      "headRefOid": "c39438d659717e0d90bed99d4ea894cd9a086ef2",
      "closedAt": "2023-10-27T17:06:53Z",
      "mergedAt": "2023-10-27T17:06:53Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "986ebbb11cc09d87b9530ecdadeb6bbe6469df3d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOAU54e85fH9iv",
      "title": "Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/147",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-10T10:05:30Z",
      "updatedAt": "2023-11-11T19:18:41Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "05c20cb4c4f565b21ef4e89843795a74b96224a2",
      "headRepository": "fxlb/pcapng",
      "headRefName": "typos",
      "headRefOid": "daa834559dc510769a3fd06c8026a5219a8ebe03",
      "closedAt": "2023-11-11T19:18:41Z",
      "mergedAt": "2023-11-11T19:18:41Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "5b91c13917560156d6e631fe60a2fb424f2e040c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 148,
      "id": "PR_kwDOAU54e85fpwLX",
      "title": "Add if_tzone option specifications",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/148",
      "state": "CLOSED",
      "author": "ds-j-ot",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This PR is a proposal on how to store time zone information in the respective if_tzone option.",
      "createdAt": "2023-11-16T16:38:02Z",
      "updatedAt": "2023-11-22T21:21:39Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "5b91c13917560156d6e631fe60a2fb424f2e040c",
      "headRepository": "ds-j-ot/draft-ietf-opsawg-pcap",
      "headRefName": "if_tzone-specs-update",
      "headRefOid": "016c82bf02f155bf8b3b1145fe2a625c6587c676",
      "closedAt": "2023-11-22T21:21:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "That doesn't provide sufficient information to correctly convert times to local time in the locale where the capture was done;  as the proposed example states, \"Example: '3C 00 3C 00' for Europe/Berlin with daylight saving time.\", so there's a 1-hour positive offset from UTC, and an added 1-hour positive offset during DST/summer time, but no indication is given as to when changes between standard time and DST/summer time occur.\r\n\r\nPerhaps we should just deprecate if_tzone and add, instead, a string option containing a tzid, so the example would be \"Example: Europe/Berlin for Europe/Berlin\". :-)",
          "createdAt": "2023-11-16T19:52:28Z",
          "updatedAt": "2023-11-16T19:52:28Z"
        },
        {
          "author": "guyharris",
          "authorAssociation": "COLLABORATOR",
          "body": "In e63374c8aa03fdfd296042ff92c4fc565b2b2980 I've added an `if_iana_tzname` string option to specify an IANA time zone database timezone name, and deprecated `if_tzone`.",
          "createdAt": "2023-11-22T21:21:38Z",
          "updatedAt": "2023-11-22T21:21:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 150,
      "id": "PR_kwDOAU54e85iylZK",
      "title": "Fix a typo",
      "url": "https://github.com/IETF-OPSAWG-WG/draft-ietf-opsawg-pcap/pull/150",
      "state": "MERGED",
      "author": "fxlb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Found with:\r\ncodespell $(git ls-files '*.md')",
      "createdAt": "2023-12-26T18:31:21Z",
      "updatedAt": "2023-12-26T18:39:54Z",
      "baseRepository": "IETF-OPSAWG-WG/draft-ietf-opsawg-pcap",
      "baseRefName": "master",
      "baseRefOid": "c2a09853c130058499c15349fea865ca5f6956f8",
      "headRepository": "fxlb/pcapng",
      "headRefName": "typo",
      "headRefOid": "879cc454f2be6eb7bdfad4762aa8cfda4718c2ad",
      "closedAt": "2023-12-26T18:37:39Z",
      "mergedAt": "2023-12-26T18:37:39Z",
      "mergedBy": "guyharris",
      "mergeCommit": {
        "oid": "89cfeb0bca6458f361aa0c562a9d0333d7381344"
      },
      "comments": [],
      "reviews": []
    }
  ]
}